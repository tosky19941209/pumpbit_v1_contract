/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "GovernorCountingSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorCountingSimple__factory>;
    getContractFactory(
      name: "GovernorSettings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorSettings__factory>;
    getContractFactory(
      name: "GovernorTimelockControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorTimelockControl__factory>;
    getContractFactory(
      name: "GovernorVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorVotes__factory>;
    getContractFactory(
      name: "GovernorVotesQuorumFraction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorVotesQuorumFraction__factory>;
    getContractFactory(
      name: "IGovernorTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernorTimelock__factory>;
    getContractFactory(
      name: "Governor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governor__factory>;
    getContractFactory(
      name: "IGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernor__factory>;
    getContractFactory(
      name: "TimelockController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockController__factory>;
    getContractFactory(
      name: "IVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: "Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Votes__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "IERC5805",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5805__factory>;
    getContractFactory(
      name: "IERC6372",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC6372__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Capped",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Capped__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Votes__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "DoubleEndedQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DoubleEndedQueue__factory>;
    getContractFactory(
      name: "TickMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TickMath__factory>;
    getContractFactory(
      name: "Configurable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Configurable__factory>;
    getContractFactory(
      name: "IConfigurable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConfigurable__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPoolErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolErrors__factory>;
    getContractFactory(
      name: "IPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolFactory__factory>;
    getContractFactory(
      name: "IPoolLiquidityPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolLiquidityPosition__factory>;
    getContractFactory(
      name: "IPoolPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolPosition__factory>;
    getContractFactory(
      name: "Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: "PoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolFactory__factory>;
    getContractFactory(
      name: "PoolIndexer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolIndexer__factory>;
    getContractFactory(
      name: "FarmRewardDistributorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FarmRewardDistributorV2__factory>;
    getContractFactory(
      name: "IRewardFarm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardFarm__factory>;
    getContractFactory(
      name: "IRewardFarmCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardFarmCallback__factory>;
    getContractFactory(
      name: "PositionFarmRewardDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionFarmRewardDistributor__factory>;
    getContractFactory(
      name: "RewardFarm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardFarm__factory>;
    getContractFactory(
      name: "EFCGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EFCGovernor__factory>;
    getContractFactory(
      name: "EquationTimelockController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EquationTimelockController__factory>;
    getContractFactory(
      name: "EQUGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EQUGovernor__factory>;
    getContractFactory(
      name: "Governable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governable__factory>;
    getContractFactory(
      name: "IEFCGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEFCGovernor__factory>;
    getContractFactory(
      name: "IEQUGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEQUGovernor__factory>;
    getContractFactory(
      name: "TokenVertexUpdaterGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenVertexUpdaterGovernor__factory>;
    getContractFactory(
      name: "FundingRateUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundingRateUtil__factory>;
    getContractFactory(
      name: "LiquidityPositionUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityPositionUtil__factory>;
    getContractFactory(
      name: "PositionUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionUtil__factory>;
    getContractFactory(
      name: "PriceUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceUtil__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "ExecutorAssistant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExecutorAssistant__factory>;
    getContractFactory(
      name: "IPositionRouterState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPositionRouterState__factory>;
    getContractFactory(
      name: "MixedExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MixedExecutor__factory>;
    getContractFactory(
      name: "MixedExecutorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MixedExecutorV2__factory>;
    getContractFactory(
      name: "IChainLinkAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainLinkAggregator__factory>;
    getContractFactory(
      name: "IPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceFeed__factory>;
    getContractFactory(
      name: "PriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceFeed__factory>;
    getContractFactory(
      name: "ILiquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidator__factory>;
    getContractFactory(
      name: "IOrderBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrderBook__factory>;
    getContractFactory(
      name: "IPluginManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPluginManager__factory>;
    getContractFactory(
      name: "IPositionRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPositionRouter__factory>;
    getContractFactory(
      name: "Liquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Liquidator__factory>;
    getContractFactory(
      name: "OrderBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderBook__factory>;
    getContractFactory(
      name: "OrderBookAssistant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderBookAssistant__factory>;
    getContractFactory(
      name: "PluginManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginManager__factory>;
    getContractFactory(
      name: "PositionRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionRouter__factory>;
    getContractFactory(
      name: "RewardCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardCollector__factory>;
    getContractFactory(
      name: "RewardCollectorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardCollectorV2__factory>;
    getContractFactory(
      name: "RewardCollectorV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardCollectorV3__factory>;
    getContractFactory(
      name: "Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: "FeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeDistributor__factory>;
    getContractFactory(
      name: "IFeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeDistributor__factory>;
    getContractFactory(
      name: "IFeeDistributorCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeDistributorCallback__factory>;
    getContractFactory(
      name: "IPositionManagerMinimum",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPositionManagerMinimum__factory>;
    getContractFactory(
      name: "IUniswapV3PoolFactoryMinimum",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolFactoryMinimum__factory>;
    getContractFactory(
      name: "IUniswapV3PoolMinimum",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolMinimum__factory>;
    getContractFactory(
      name: "ERC20Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Test__factory>;
    getContractFactory(
      name: "FeeDistributorTestHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeDistributorTestHelper__factory>;
    getContractFactory(
      name: "FundingRateUtilTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundingRateUtilTest__factory>;
    getContractFactory(
      name: "GovernableTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernableTest__factory>;
    getContractFactory(
      name: "LiquidityPositionUtilTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityPositionUtilTest__factory>;
    getContractFactory(
      name: "MockChainLinkPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockChainLinkPriceFeed__factory>;
    getContractFactory(
      name: "MockEFC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockEFC__factory>;
    getContractFactory(
      name: "MockFeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFeeDistributor__factory>;
    getContractFactory(
      name: "MockFeeDistributorCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFeeDistributorCallback__factory>;
    getContractFactory(
      name: "MockPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPool__factory>;
    getContractFactory(
      name: "MockPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPoolFactory__factory>;
    getContractFactory(
      name: "MockPositionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPositionManager__factory>;
    getContractFactory(
      name: "MockPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPriceFeed__factory>;
    getContractFactory(
      name: "MockRewardFarm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRewardFarm__factory>;
    getContractFactory(
      name: "MockRewardFarmCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRewardFarmCallback__factory>;
    getContractFactory(
      name: "GasDrainingMockRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasDrainingMockRouter__factory>;
    getContractFactory(
      name: "MockRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRouter__factory>;
    getContractFactory(
      name: "MockUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV3Pool__factory>;
    getContractFactory(
      name: "MockUniswapV3PoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV3PoolFactory__factory>;
    getContractFactory(
      name: "PositionUtilTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionUtilTest__factory>;
    getContractFactory(
      name: "PriceUtilTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceUtilTest__factory>;
    getContractFactory(
      name: "RevertedFeeReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertedFeeReceiver__factory>;
    getContractFactory(
      name: "EFC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EFC__factory>;
    getContractFactory(
      name: "EQU",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EQU__factory>;
    getContractFactory(
      name: "ERC721WeightedVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721WeightedVotes__factory>;
    getContractFactory(
      name: "IEFC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEFC__factory>;
    getContractFactory(
      name: "MultiMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiMinter__factory>;
    getContractFactory(
      name: "VeEQU",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VeEQU__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "GovernorCountingSimple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorCountingSimple>;
    getContractAt(
      name: "GovernorSettings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorSettings>;
    getContractAt(
      name: "GovernorTimelockControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorTimelockControl>;
    getContractAt(
      name: "GovernorVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorVotes>;
    getContractAt(
      name: "GovernorVotesQuorumFraction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorVotesQuorumFraction>;
    getContractAt(
      name: "IGovernorTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernorTimelock>;
    getContractAt(
      name: "Governor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governor>;
    getContractAt(
      name: "IGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernor>;
    getContractAt(
      name: "TimelockController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockController>;
    getContractAt(
      name: "IVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotes>;
    getContractAt(
      name: "Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Votes>;
    getContractAt(
      name: "IERC5267",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "IERC5805",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5805>;
    getContractAt(
      name: "IERC6372",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC6372>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Capped",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Capped>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "ERC20Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Votes>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "EIP712",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "ShortStrings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "DoubleEndedQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DoubleEndedQueue>;
    getContractAt(
      name: "TickMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TickMath>;
    getContractAt(
      name: "Configurable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Configurable>;
    getContractAt(
      name: "IConfigurable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConfigurable>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPoolErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolErrors>;
    getContractAt(
      name: "IPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolFactory>;
    getContractAt(
      name: "IPoolLiquidityPosition",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolLiquidityPosition>;
    getContractAt(
      name: "IPoolPosition",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolPosition>;
    getContractAt(
      name: "Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pool>;
    getContractAt(
      name: "PoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolFactory>;
    getContractAt(
      name: "PoolIndexer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolIndexer>;
    getContractAt(
      name: "FarmRewardDistributorV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FarmRewardDistributorV2>;
    getContractAt(
      name: "IRewardFarm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardFarm>;
    getContractAt(
      name: "IRewardFarmCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardFarmCallback>;
    getContractAt(
      name: "PositionFarmRewardDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionFarmRewardDistributor>;
    getContractAt(
      name: "RewardFarm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardFarm>;
    getContractAt(
      name: "EFCGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EFCGovernor>;
    getContractAt(
      name: "EquationTimelockController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EquationTimelockController>;
    getContractAt(
      name: "EQUGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EQUGovernor>;
    getContractAt(
      name: "Governable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governable>;
    getContractAt(
      name: "IEFCGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEFCGovernor>;
    getContractAt(
      name: "IEQUGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEQUGovernor>;
    getContractAt(
      name: "TokenVertexUpdaterGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenVertexUpdaterGovernor>;
    getContractAt(
      name: "FundingRateUtil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FundingRateUtil>;
    getContractAt(
      name: "LiquidityPositionUtil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityPositionUtil>;
    getContractAt(
      name: "PositionUtil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionUtil>;
    getContractAt(
      name: "PriceUtil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceUtil>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "SafeCast",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "SafeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "ExecutorAssistant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExecutorAssistant>;
    getContractAt(
      name: "IPositionRouterState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPositionRouterState>;
    getContractAt(
      name: "MixedExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MixedExecutor>;
    getContractAt(
      name: "MixedExecutorV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MixedExecutorV2>;
    getContractAt(
      name: "IChainLinkAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainLinkAggregator>;
    getContractAt(
      name: "IPriceFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceFeed>;
    getContractAt(
      name: "PriceFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceFeed>;
    getContractAt(
      name: "ILiquidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidator>;
    getContractAt(
      name: "IOrderBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrderBook>;
    getContractAt(
      name: "IPluginManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPluginManager>;
    getContractAt(
      name: "IPositionRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPositionRouter>;
    getContractAt(
      name: "Liquidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Liquidator>;
    getContractAt(
      name: "OrderBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderBook>;
    getContractAt(
      name: "OrderBookAssistant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderBookAssistant>;
    getContractAt(
      name: "PluginManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginManager>;
    getContractAt(
      name: "PositionRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionRouter>;
    getContractAt(
      name: "RewardCollector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardCollector>;
    getContractAt(
      name: "RewardCollectorV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardCollectorV2>;
    getContractAt(
      name: "RewardCollectorV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardCollectorV3>;
    getContractAt(
      name: "Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Router>;
    getContractAt(
      name: "FeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeDistributor>;
    getContractAt(
      name: "IFeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeDistributor>;
    getContractAt(
      name: "IFeeDistributorCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeDistributorCallback>;
    getContractAt(
      name: "IPositionManagerMinimum",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPositionManagerMinimum>;
    getContractAt(
      name: "IUniswapV3PoolFactoryMinimum",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolFactoryMinimum>;
    getContractAt(
      name: "IUniswapV3PoolMinimum",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolMinimum>;
    getContractAt(
      name: "ERC20Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Test>;
    getContractAt(
      name: "FeeDistributorTestHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeDistributorTestHelper>;
    getContractAt(
      name: "FundingRateUtilTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FundingRateUtilTest>;
    getContractAt(
      name: "GovernableTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernableTest>;
    getContractAt(
      name: "LiquidityPositionUtilTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityPositionUtilTest>;
    getContractAt(
      name: "MockChainLinkPriceFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockChainLinkPriceFeed>;
    getContractAt(
      name: "MockEFC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockEFC>;
    getContractAt(
      name: "MockFeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFeeDistributor>;
    getContractAt(
      name: "MockFeeDistributorCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFeeDistributorCallback>;
    getContractAt(
      name: "MockPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPool>;
    getContractAt(
      name: "MockPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPoolFactory>;
    getContractAt(
      name: "MockPositionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPositionManager>;
    getContractAt(
      name: "MockPriceFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPriceFeed>;
    getContractAt(
      name: "MockRewardFarm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRewardFarm>;
    getContractAt(
      name: "MockRewardFarmCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRewardFarmCallback>;
    getContractAt(
      name: "GasDrainingMockRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GasDrainingMockRouter>;
    getContractAt(
      name: "MockRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRouter>;
    getContractAt(
      name: "MockUniswapV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUniswapV3Pool>;
    getContractAt(
      name: "MockUniswapV3PoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUniswapV3PoolFactory>;
    getContractAt(
      name: "PositionUtilTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionUtilTest>;
    getContractAt(
      name: "PriceUtilTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceUtilTest>;
    getContractAt(
      name: "RevertedFeeReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertedFeeReceiver>;
    getContractAt(
      name: "EFC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EFC>;
    getContractAt(
      name: "EQU",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EQU>;
    getContractAt(
      name: "ERC721WeightedVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721WeightedVotes>;
    getContractAt(
      name: "IEFC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEFC>;
    getContractAt(
      name: "MultiMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiMinter>;
    getContractAt(
      name: "VeEQU",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VeEQU>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
