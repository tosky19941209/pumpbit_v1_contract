/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface PriceUtilInterface extends utils.Interface {
  functions: {
    "calculateMarketPriceX96(uint8,uint8,uint160,uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "calculateMarketPriceX96"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateMarketPriceX96",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateMarketPriceX96",
    data: BytesLike
  ): Result;

  events: {
    "LiquidationBufferNetSizeChanged(uint8,uint128)": EventFragment;
    "PremiumRateChanged(uint128)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "LiquidationBufferNetSizeChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumRateChanged"): EventFragment;
}

export interface LiquidationBufferNetSizeChangedEventObject {
  index: number;
  netSizeAfter: BigNumber;
}
export type LiquidationBufferNetSizeChangedEvent = TypedEvent<
  [number, BigNumber],
  LiquidationBufferNetSizeChangedEventObject
>;

export type LiquidationBufferNetSizeChangedEventFilter =
  TypedEventFilter<LiquidationBufferNetSizeChangedEvent>;

export interface PremiumRateChangedEventObject {
  premiumRateAfterX96: BigNumber;
}
export type PremiumRateChangedEvent = TypedEvent<
  [BigNumber],
  PremiumRateChangedEventObject
>;

export type PremiumRateChangedEventFilter =
  TypedEventFilter<PremiumRateChangedEvent>;

export interface PriceUtil extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceUtilInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateMarketPriceX96(
      _globalSide: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marketPriceX96: BigNumber }>;
  };

  calculateMarketPriceX96(
    _globalSide: PromiseOrValue<BigNumberish>,
    _side: PromiseOrValue<BigNumberish>,
    _indexPriceX96: PromiseOrValue<BigNumberish>,
    _premiumRateX96: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calculateMarketPriceX96(
      _globalSide: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "LiquidationBufferNetSizeChanged(uint8,uint128)"(
      index?: null,
      netSizeAfter?: null
    ): LiquidationBufferNetSizeChangedEventFilter;
    LiquidationBufferNetSizeChanged(
      index?: null,
      netSizeAfter?: null
    ): LiquidationBufferNetSizeChangedEventFilter;

    "PremiumRateChanged(uint128)"(
      premiumRateAfterX96?: null
    ): PremiumRateChangedEventFilter;
    PremiumRateChanged(
      premiumRateAfterX96?: null
    ): PremiumRateChangedEventFilter;
  };

  estimateGas: {
    calculateMarketPriceX96(
      _globalSide: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateMarketPriceX96(
      _globalSide: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
