/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace PositionFarmRewardDistributor {
  export type PoolTotalRewardStruct = {
    pool: PromiseOrValue<string>;
    totalReward: PromiseOrValue<BigNumberish>;
  };

  export type PoolTotalRewardStructOutput = [string, BigNumber] & {
    pool: string;
    totalReward: BigNumber;
  };
}

export interface RewardCollectorV2Interface extends utils.Interface {
  functions: {
    "EFC()": FunctionFragment;
    "EQU()": FunctionFragment;
    "collectArchitectRewardBatch(uint256[])": FunctionFragment;
    "collectFarmLiquidityRewardBatch(address[])": FunctionFragment;
    "collectFarmReferralRewardBatch(address[],uint256[])": FunctionFragment;
    "collectFarmRiskBufferFundRewardBatch(address[])": FunctionFragment;
    "collectPositionFarmRewardBatch(uint32,(address,uint256)[],bytes)": FunctionFragment;
    "collectReferralFeeBatch(address[],uint256[])": FunctionFragment;
    "collectStakingRewardBatch(uint256[])": FunctionFragment;
    "collectV3PosStakingRewardBatch(uint256[])": FunctionFragment;
    "distributor()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "router()": FunctionFragment;
    "sweepToken(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EFC"
      | "EQU"
      | "collectArchitectRewardBatch"
      | "collectFarmLiquidityRewardBatch"
      | "collectFarmReferralRewardBatch"
      | "collectFarmRiskBufferFundRewardBatch"
      | "collectPositionFarmRewardBatch"
      | "collectReferralFeeBatch"
      | "collectStakingRewardBatch"
      | "collectV3PosStakingRewardBatch"
      | "distributor"
      | "multicall"
      | "router"
      | "sweepToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "EFC", values?: undefined): string;
  encodeFunctionData(functionFragment: "EQU", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectArchitectRewardBatch",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFarmLiquidityRewardBatch",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFarmReferralRewardBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFarmRiskBufferFundRewardBatch",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPositionFarmRewardBatch",
    values: [
      PromiseOrValue<BigNumberish>,
      PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectReferralFeeBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectStakingRewardBatch",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectV3PosStakingRewardBatch",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "EFC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "EQU", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectArchitectRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFarmLiquidityRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFarmReferralRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFarmRiskBufferFundRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPositionFarmRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectReferralFeeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectStakingRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectV3PosStakingRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;

  events: {};
}

export interface RewardCollectorV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardCollectorV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EFC(overrides?: CallOverrides): Promise<[string]>;

    EQU(overrides?: CallOverrides): Promise<[string]>;

    collectArchitectRewardBatch(
      _tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectFarmLiquidityRewardBatch(
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectFarmReferralRewardBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectFarmRiskBufferFundRewardBatch(
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectPositionFarmRewardBatch(
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectReferralFeeBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectStakingRewardBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectV3PosStakingRewardBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sweepToken(
      _token: PromiseOrValue<string>,
      _amountMinimum: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  EFC(overrides?: CallOverrides): Promise<string>;

  EQU(overrides?: CallOverrides): Promise<string>;

  collectArchitectRewardBatch(
    _tokenIDs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectFarmLiquidityRewardBatch(
    _pools: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectFarmReferralRewardBatch(
    _pools: PromiseOrValue<string>[],
    _referralTokens: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectFarmRiskBufferFundRewardBatch(
    _pools: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectPositionFarmRewardBatch(
    _nonce: PromiseOrValue<BigNumberish>,
    _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectReferralFeeBatch(
    _pools: PromiseOrValue<string>[],
    _referralTokens: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectStakingRewardBatch(
    _ids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectV3PosStakingRewardBatch(
    _ids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributor(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  sweepToken(
    _token: PromiseOrValue<string>,
    _amountMinimum: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EFC(overrides?: CallOverrides): Promise<string>;

    EQU(overrides?: CallOverrides): Promise<string>;

    collectArchitectRewardBatch(
      _tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectFarmLiquidityRewardBatch(
      _pools: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectFarmReferralRewardBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectFarmRiskBufferFundRewardBatch(
      _pools: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectPositionFarmRewardBatch(
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectReferralFeeBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectStakingRewardBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectV3PosStakingRewardBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<string>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    router(overrides?: CallOverrides): Promise<string>;

    sweepToken(
      _token: PromiseOrValue<string>,
      _amountMinimum: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    EFC(overrides?: CallOverrides): Promise<BigNumber>;

    EQU(overrides?: CallOverrides): Promise<BigNumber>;

    collectArchitectRewardBatch(
      _tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectFarmLiquidityRewardBatch(
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectFarmReferralRewardBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectFarmRiskBufferFundRewardBatch(
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectPositionFarmRewardBatch(
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectReferralFeeBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectStakingRewardBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectV3PosStakingRewardBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sweepToken(
      _token: PromiseOrValue<string>,
      _amountMinimum: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EFC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EQU(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectArchitectRewardBatch(
      _tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectFarmLiquidityRewardBatch(
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectFarmReferralRewardBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectFarmRiskBufferFundRewardBatch(
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectPositionFarmRewardBatch(
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectReferralFeeBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectStakingRewardBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectV3PosStakingRewardBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweepToken(
      _token: PromiseOrValue<string>,
      _amountMinimum: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
