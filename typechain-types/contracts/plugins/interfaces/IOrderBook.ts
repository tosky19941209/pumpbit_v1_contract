/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IOrderBookInterface extends utils.Interface {
  functions: {
    "cancelDecreaseOrder(uint256,address)": FunctionFragment;
    "cancelIncreaseOrder(uint256,address)": FunctionFragment;
    "createDecreaseOrder(address,uint8,uint128,uint128,uint160,bool,uint160,address)": FunctionFragment;
    "createIncreaseOrder(address,uint8,uint128,uint128,uint160,bool,uint160)": FunctionFragment;
    "createTakeProfitAndStopLossOrders(address,uint8,uint128[2],uint128[2],uint160[2],uint160[2],address)": FunctionFragment;
    "executeDecreaseOrder(uint256,address)": FunctionFragment;
    "executeIncreaseOrder(uint256,address)": FunctionFragment;
    "updateDecreaseOrder(uint256,uint160,uint160)": FunctionFragment;
    "updateExecutionGasLimit(uint256)": FunctionFragment;
    "updateIncreaseOrder(uint256,uint160,uint160)": FunctionFragment;
    "updateMinExecutionFee(uint256)": FunctionFragment;
    "updateOrderExecutor(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelDecreaseOrder"
      | "cancelIncreaseOrder"
      | "createDecreaseOrder"
      | "createIncreaseOrder"
      | "createTakeProfitAndStopLossOrders"
      | "executeDecreaseOrder"
      | "executeIncreaseOrder"
      | "updateDecreaseOrder"
      | "updateExecutionGasLimit"
      | "updateIncreaseOrder"
      | "updateMinExecutionFee"
      | "updateOrderExecutor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelDecreaseOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreaseOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreaseOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreaseOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTakeProfitAndStopLossOrders",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreaseOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDecreaseOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutionGasLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIncreaseOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinExecutionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrderExecutor",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTakeProfitAndStopLossOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutionGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrderExecutor",
    data: BytesLike
  ): Result;

  events: {
    "DecreaseOrderCancelled(uint256,address)": EventFragment;
    "DecreaseOrderCreated(address,address,uint8,uint128,uint128,uint160,bool,uint160,address,uint256,uint256)": EventFragment;
    "DecreaseOrderExecuted(uint256,uint160,address)": EventFragment;
    "DecreaseOrderUpdated(uint256,uint160,uint160)": EventFragment;
    "IncreaseOrderCancelled(uint256,address)": EventFragment;
    "IncreaseOrderCreated(address,address,uint8,uint128,uint128,uint160,bool,uint160,uint256,uint256)": EventFragment;
    "IncreaseOrderExecuted(uint256,uint160,address)": EventFragment;
    "IncreaseOrderUpdated(uint256,uint160,uint160)": EventFragment;
    "MinExecutionFeeUpdated(uint256)": EventFragment;
    "OrderExecutorUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DecreaseOrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseOrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseOrderExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseOrderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseOrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseOrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseOrderExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseOrderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinExecutionFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderExecutorUpdated"): EventFragment;
}

export interface DecreaseOrderCancelledEventObject {
  orderIndex: BigNumber;
  feeReceiver: string;
}
export type DecreaseOrderCancelledEvent = TypedEvent<
  [BigNumber, string],
  DecreaseOrderCancelledEventObject
>;

export type DecreaseOrderCancelledEventFilter =
  TypedEventFilter<DecreaseOrderCancelledEvent>;

export interface DecreaseOrderCreatedEventObject {
  account: string;
  pool: string;
  side: number;
  marginDelta: BigNumber;
  sizeDelta: BigNumber;
  triggerMarketPriceX96: BigNumber;
  triggerAbove: boolean;
  acceptableTradePriceX96: BigNumber;
  receiver: string;
  executionFee: BigNumber;
  orderIndex: BigNumber;
}
export type DecreaseOrderCreatedEvent = TypedEvent<
  [
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ],
  DecreaseOrderCreatedEventObject
>;

export type DecreaseOrderCreatedEventFilter =
  TypedEventFilter<DecreaseOrderCreatedEvent>;

export interface DecreaseOrderExecutedEventObject {
  orderIndex: BigNumber;
  marketPriceX96: BigNumber;
  feeReceiver: string;
}
export type DecreaseOrderExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  DecreaseOrderExecutedEventObject
>;

export type DecreaseOrderExecutedEventFilter =
  TypedEventFilter<DecreaseOrderExecutedEvent>;

export interface DecreaseOrderUpdatedEventObject {
  orderIndex: BigNumber;
  triggerMarketPriceX96: BigNumber;
  acceptableTradePriceX96: BigNumber;
}
export type DecreaseOrderUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  DecreaseOrderUpdatedEventObject
>;

export type DecreaseOrderUpdatedEventFilter =
  TypedEventFilter<DecreaseOrderUpdatedEvent>;

export interface IncreaseOrderCancelledEventObject {
  orderIndex: BigNumber;
  feeReceiver: string;
}
export type IncreaseOrderCancelledEvent = TypedEvent<
  [BigNumber, string],
  IncreaseOrderCancelledEventObject
>;

export type IncreaseOrderCancelledEventFilter =
  TypedEventFilter<IncreaseOrderCancelledEvent>;

export interface IncreaseOrderCreatedEventObject {
  account: string;
  pool: string;
  side: number;
  marginDelta: BigNumber;
  sizeDelta: BigNumber;
  triggerMarketPriceX96: BigNumber;
  triggerAbove: boolean;
  acceptableTradePriceX96: BigNumber;
  executionFee: BigNumber;
  orderIndex: BigNumber;
}
export type IncreaseOrderCreatedEvent = TypedEvent<
  [
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  IncreaseOrderCreatedEventObject
>;

export type IncreaseOrderCreatedEventFilter =
  TypedEventFilter<IncreaseOrderCreatedEvent>;

export interface IncreaseOrderExecutedEventObject {
  orderIndex: BigNumber;
  marketPriceX96: BigNumber;
  feeReceiver: string;
}
export type IncreaseOrderExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  IncreaseOrderExecutedEventObject
>;

export type IncreaseOrderExecutedEventFilter =
  TypedEventFilter<IncreaseOrderExecutedEvent>;

export interface IncreaseOrderUpdatedEventObject {
  orderIndex: BigNumber;
  triggerMarketPriceX96: BigNumber;
  acceptableTradePriceX96: BigNumber;
}
export type IncreaseOrderUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  IncreaseOrderUpdatedEventObject
>;

export type IncreaseOrderUpdatedEventFilter =
  TypedEventFilter<IncreaseOrderUpdatedEvent>;

export interface MinExecutionFeeUpdatedEventObject {
  minExecutionFee: BigNumber;
}
export type MinExecutionFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  MinExecutionFeeUpdatedEventObject
>;

export type MinExecutionFeeUpdatedEventFilter =
  TypedEventFilter<MinExecutionFeeUpdatedEvent>;

export interface OrderExecutorUpdatedEventObject {
  account: string;
  active: boolean;
}
export type OrderExecutorUpdatedEvent = TypedEvent<
  [string, boolean],
  OrderExecutorUpdatedEventObject
>;

export type OrderExecutorUpdatedEventFilter =
  TypedEventFilter<OrderExecutorUpdatedEvent>;

export interface IOrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createDecreaseOrder(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      triggerAbove: PromiseOrValue<boolean>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createIncreaseOrder(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      triggerAbove: PromiseOrValue<boolean>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTakeProfitAndStopLossOrders(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDeltas: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      sizeDeltas: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      triggerMarketPriceX96s: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      acceptableTradePriceX96s: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExecutionGasLimit(
      executionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMinExecutionFee(
      minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOrderExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelDecreaseOrder(
    orderIndex: PromiseOrValue<BigNumberish>,
    feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelIncreaseOrder(
    orderIndex: PromiseOrValue<BigNumberish>,
    feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createDecreaseOrder(
    pool: PromiseOrValue<string>,
    side: PromiseOrValue<BigNumberish>,
    marginDelta: PromiseOrValue<BigNumberish>,
    sizeDelta: PromiseOrValue<BigNumberish>,
    triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
    triggerAbove: PromiseOrValue<boolean>,
    acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createIncreaseOrder(
    pool: PromiseOrValue<string>,
    side: PromiseOrValue<BigNumberish>,
    marginDelta: PromiseOrValue<BigNumberish>,
    sizeDelta: PromiseOrValue<BigNumberish>,
    triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
    triggerAbove: PromiseOrValue<boolean>,
    acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTakeProfitAndStopLossOrders(
    pool: PromiseOrValue<string>,
    side: PromiseOrValue<BigNumberish>,
    marginDeltas: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    sizeDeltas: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    triggerMarketPriceX96s: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    acceptableTradePriceX96s: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeDecreaseOrder(
    orderIndex: PromiseOrValue<BigNumberish>,
    feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeIncreaseOrder(
    orderIndex: PromiseOrValue<BigNumberish>,
    feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDecreaseOrder(
    orderIndex: PromiseOrValue<BigNumberish>,
    triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
    acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExecutionGasLimit(
    executionGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateIncreaseOrder(
    orderIndex: PromiseOrValue<BigNumberish>,
    triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
    acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMinExecutionFee(
    minExecutionFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOrderExecutor(
    account: PromiseOrValue<string>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createDecreaseOrder(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      triggerAbove: PromiseOrValue<boolean>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createIncreaseOrder(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      triggerAbove: PromiseOrValue<boolean>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTakeProfitAndStopLossOrders(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDeltas: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      sizeDeltas: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      triggerMarketPriceX96s: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      acceptableTradePriceX96s: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExecutionGasLimit(
      executionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinExecutionFee(
      minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOrderExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DecreaseOrderCancelled(uint256,address)"(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      feeReceiver?: null
    ): DecreaseOrderCancelledEventFilter;
    DecreaseOrderCancelled(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      feeReceiver?: null
    ): DecreaseOrderCancelledEventFilter;

    "DecreaseOrderCreated(address,address,uint8,uint128,uint128,uint160,bool,uint160,address,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      sizeDelta?: null,
      triggerMarketPriceX96?: null,
      triggerAbove?: null,
      acceptableTradePriceX96?: null,
      receiver?: null,
      executionFee?: null,
      orderIndex?: PromiseOrValue<BigNumberish> | null
    ): DecreaseOrderCreatedEventFilter;
    DecreaseOrderCreated(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      sizeDelta?: null,
      triggerMarketPriceX96?: null,
      triggerAbove?: null,
      acceptableTradePriceX96?: null,
      receiver?: null,
      executionFee?: null,
      orderIndex?: PromiseOrValue<BigNumberish> | null
    ): DecreaseOrderCreatedEventFilter;

    "DecreaseOrderExecuted(uint256,uint160,address)"(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      marketPriceX96?: null,
      feeReceiver?: null
    ): DecreaseOrderExecutedEventFilter;
    DecreaseOrderExecuted(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      marketPriceX96?: null,
      feeReceiver?: null
    ): DecreaseOrderExecutedEventFilter;

    "DecreaseOrderUpdated(uint256,uint160,uint160)"(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      triggerMarketPriceX96?: null,
      acceptableTradePriceX96?: null
    ): DecreaseOrderUpdatedEventFilter;
    DecreaseOrderUpdated(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      triggerMarketPriceX96?: null,
      acceptableTradePriceX96?: null
    ): DecreaseOrderUpdatedEventFilter;

    "IncreaseOrderCancelled(uint256,address)"(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      feeReceiver?: null
    ): IncreaseOrderCancelledEventFilter;
    IncreaseOrderCancelled(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      feeReceiver?: null
    ): IncreaseOrderCancelledEventFilter;

    "IncreaseOrderCreated(address,address,uint8,uint128,uint128,uint160,bool,uint160,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      sizeDelta?: null,
      triggerMarketPriceX96?: null,
      triggerAbove?: null,
      acceptableTradePriceX96?: null,
      executionFee?: null,
      orderIndex?: PromiseOrValue<BigNumberish> | null
    ): IncreaseOrderCreatedEventFilter;
    IncreaseOrderCreated(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      sizeDelta?: null,
      triggerMarketPriceX96?: null,
      triggerAbove?: null,
      acceptableTradePriceX96?: null,
      executionFee?: null,
      orderIndex?: PromiseOrValue<BigNumberish> | null
    ): IncreaseOrderCreatedEventFilter;

    "IncreaseOrderExecuted(uint256,uint160,address)"(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      marketPriceX96?: null,
      feeReceiver?: null
    ): IncreaseOrderExecutedEventFilter;
    IncreaseOrderExecuted(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      marketPriceX96?: null,
      feeReceiver?: null
    ): IncreaseOrderExecutedEventFilter;

    "IncreaseOrderUpdated(uint256,uint160,uint160)"(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      triggerMarketPriceX96?: null,
      acceptableTradePriceX96?: null
    ): IncreaseOrderUpdatedEventFilter;
    IncreaseOrderUpdated(
      orderIndex?: PromiseOrValue<BigNumberish> | null,
      triggerMarketPriceX96?: null,
      acceptableTradePriceX96?: null
    ): IncreaseOrderUpdatedEventFilter;

    "MinExecutionFeeUpdated(uint256)"(
      minExecutionFee?: null
    ): MinExecutionFeeUpdatedEventFilter;
    MinExecutionFeeUpdated(
      minExecutionFee?: null
    ): MinExecutionFeeUpdatedEventFilter;

    "OrderExecutorUpdated(address,bool)"(
      account?: PromiseOrValue<string> | null,
      active?: null
    ): OrderExecutorUpdatedEventFilter;
    OrderExecutorUpdated(
      account?: PromiseOrValue<string> | null,
      active?: null
    ): OrderExecutorUpdatedEventFilter;
  };

  estimateGas: {
    cancelDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createDecreaseOrder(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      triggerAbove: PromiseOrValue<boolean>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createIncreaseOrder(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      triggerAbove: PromiseOrValue<boolean>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTakeProfitAndStopLossOrders(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDeltas: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      sizeDeltas: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      triggerMarketPriceX96s: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      acceptableTradePriceX96s: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExecutionGasLimit(
      executionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMinExecutionFee(
      minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOrderExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createDecreaseOrder(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      triggerAbove: PromiseOrValue<boolean>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createIncreaseOrder(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      triggerAbove: PromiseOrValue<boolean>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTakeProfitAndStopLossOrders(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDeltas: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      sizeDeltas: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      triggerMarketPriceX96s: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      acceptableTradePriceX96s: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDecreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExecutionGasLimit(
      executionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateIncreaseOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      triggerMarketPriceX96: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMinExecutionFee(
      minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOrderExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
