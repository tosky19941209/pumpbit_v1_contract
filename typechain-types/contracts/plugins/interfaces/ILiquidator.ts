/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ILiquidatorInterface extends utils.Interface {
  functions: {
    "liquidateLiquidityPosition(address,uint96,address)": FunctionFragment;
    "liquidatePosition(address,address,uint8,address)": FunctionFragment;
    "updateExecutor(address,bool)": FunctionFragment;
    "updatePriceFeed()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "liquidateLiquidityPosition"
      | "liquidatePosition"
      | "updateExecutor"
      | "updatePriceFeed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "liquidateLiquidityPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutor",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "liquidateLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;

  events: {
    "ExecutorUpdated(address,bool)": EventFragment;
    "PositionClosedByLiquidator(address,address,uint8,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecutorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionClosedByLiquidator"): EventFragment;
}

export interface ExecutorUpdatedEventObject {
  account: string;
  active: boolean;
}
export type ExecutorUpdatedEvent = TypedEvent<
  [string, boolean],
  ExecutorUpdatedEventObject
>;

export type ExecutorUpdatedEventFilter = TypedEventFilter<ExecutorUpdatedEvent>;

export interface PositionClosedByLiquidatorEventObject {
  pool: string;
  account: string;
  side: number;
  liquidationExecutionFee: BigNumber;
}
export type PositionClosedByLiquidatorEvent = TypedEvent<
  [string, string, number, BigNumber],
  PositionClosedByLiquidatorEventObject
>;

export type PositionClosedByLiquidatorEventFilter =
  TypedEventFilter<PositionClosedByLiquidatorEvent>;

export interface ILiquidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    liquidateLiquidityPosition(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidatePosition(
      pool: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePriceFeed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  liquidateLiquidityPosition(
    pool: PromiseOrValue<string>,
    positionID: PromiseOrValue<BigNumberish>,
    feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidatePosition(
    pool: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    side: PromiseOrValue<BigNumberish>,
    feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExecutor(
    account: PromiseOrValue<string>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePriceFeed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    liquidateLiquidityPosition(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatePosition(
      pool: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceFeed(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ExecutorUpdated(address,bool)"(
      account?: null,
      active?: null
    ): ExecutorUpdatedEventFilter;
    ExecutorUpdated(account?: null, active?: null): ExecutorUpdatedEventFilter;

    "PositionClosedByLiquidator(address,address,uint8,uint64)"(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      side?: null,
      liquidationExecutionFee?: null
    ): PositionClosedByLiquidatorEventFilter;
    PositionClosedByLiquidator(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      side?: null,
      liquidationExecutionFee?: null
    ): PositionClosedByLiquidatorEventFilter;
  };

  estimateGas: {
    liquidateLiquidityPosition(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidatePosition(
      pool: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePriceFeed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    liquidateLiquidityPosition(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      pool: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceFeed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
