/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IPositionRouterInterface extends utils.Interface {
  functions: {
    "cancelAdjustLiquidityPositionMargin(uint128,address)": FunctionFragment;
    "cancelCloseLiquidityPosition(uint128,address)": FunctionFragment;
    "cancelDecreasePosition(uint128,address)": FunctionFragment;
    "cancelDecreaseRiskBufferFundPosition(uint128,address)": FunctionFragment;
    "cancelIncreasePosition(uint128,address)": FunctionFragment;
    "cancelIncreaseRiskBufferFundPosition(uint128,address)": FunctionFragment;
    "cancelOpenLiquidityPosition(uint128,address)": FunctionFragment;
    "createAdjustLiquidityPositionMargin(address,uint96,int128,address)": FunctionFragment;
    "createCloseLiquidityPosition(address,uint96,address)": FunctionFragment;
    "createDecreasePosition(address,uint8,uint128,uint128,uint160,address)": FunctionFragment;
    "createDecreaseRiskBufferFundPosition(address,uint128,address)": FunctionFragment;
    "createIncreasePosition(address,uint8,uint128,uint128,uint160)": FunctionFragment;
    "createIncreaseRiskBufferFundPosition(address,uint128)": FunctionFragment;
    "createOpenLiquidityPosition(address,uint128,uint128)": FunctionFragment;
    "executeAdjustLiquidityPositionMargin(uint128,address)": FunctionFragment;
    "executeAdjustLiquidityPositionMargins(uint128,address)": FunctionFragment;
    "executeCloseLiquidityPosition(uint128,address)": FunctionFragment;
    "executeCloseLiquidityPositions(uint128,address)": FunctionFragment;
    "executeDecreasePosition(uint128,address)": FunctionFragment;
    "executeDecreasePositions(uint128,address)": FunctionFragment;
    "executeDecreaseRiskBufferFundPosition(uint128,address)": FunctionFragment;
    "executeDecreaseRiskBufferFundPositions(uint128,address)": FunctionFragment;
    "executeIncreasePosition(uint128,address)": FunctionFragment;
    "executeIncreasePositions(uint128,address)": FunctionFragment;
    "executeIncreaseRiskBufferFundPosition(uint128,address)": FunctionFragment;
    "executeIncreaseRiskBufferFundPositions(uint128,address)": FunctionFragment;
    "executeOpenLiquidityPosition(uint128,address)": FunctionFragment;
    "executeOpenLiquidityPositions(uint128,address)": FunctionFragment;
    "updateDelayValues(uint32,uint32,uint32)": FunctionFragment;
    "updateExecutionGasLimit(uint160)": FunctionFragment;
    "updateMinExecutionFee(uint256)": FunctionFragment;
    "updatePositionExecutor(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelAdjustLiquidityPositionMargin"
      | "cancelCloseLiquidityPosition"
      | "cancelDecreasePosition"
      | "cancelDecreaseRiskBufferFundPosition"
      | "cancelIncreasePosition"
      | "cancelIncreaseRiskBufferFundPosition"
      | "cancelOpenLiquidityPosition"
      | "createAdjustLiquidityPositionMargin"
      | "createCloseLiquidityPosition"
      | "createDecreasePosition"
      | "createDecreaseRiskBufferFundPosition"
      | "createIncreasePosition"
      | "createIncreaseRiskBufferFundPosition"
      | "createOpenLiquidityPosition"
      | "executeAdjustLiquidityPositionMargin"
      | "executeAdjustLiquidityPositionMargins"
      | "executeCloseLiquidityPosition"
      | "executeCloseLiquidityPositions"
      | "executeDecreasePosition"
      | "executeDecreasePositions"
      | "executeDecreaseRiskBufferFundPosition"
      | "executeDecreaseRiskBufferFundPositions"
      | "executeIncreasePosition"
      | "executeIncreasePositions"
      | "executeIncreaseRiskBufferFundPosition"
      | "executeIncreaseRiskBufferFundPositions"
      | "executeOpenLiquidityPosition"
      | "executeOpenLiquidityPositions"
      | "updateDelayValues"
      | "updateExecutionGasLimit"
      | "updateMinExecutionFee"
      | "updatePositionExecutor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelAdjustLiquidityPositionMargin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCloseLiquidityPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDecreasePosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDecreaseRiskBufferFundPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreasePosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreaseRiskBufferFundPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOpenLiquidityPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAdjustLiquidityPositionMargin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCloseLiquidityPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreasePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreaseRiskBufferFundPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreaseRiskBufferFundPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOpenLiquidityPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAdjustLiquidityPositionMargin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAdjustLiquidityPositionMargins",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCloseLiquidityPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCloseLiquidityPositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreaseRiskBufferFundPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreaseRiskBufferFundPositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseRiskBufferFundPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseRiskBufferFundPositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOpenLiquidityPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOpenLiquidityPositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDelayValues",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutionGasLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinExecutionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionExecutor",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelAdjustLiquidityPositionMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCloseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDecreaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOpenLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAdjustLiquidityPositionMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCloseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOpenLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAdjustLiquidityPositionMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAdjustLiquidityPositionMargins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCloseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCloseLiquidityPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreaseRiskBufferFundPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseRiskBufferFundPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOpenLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOpenLiquidityPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDelayValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutionGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionExecutor",
    data: BytesLike
  ): Result;

  events: {
    "AdjustLiquidityPositionMarginCancelled(uint128,address)": EventFragment;
    "AdjustLiquidityPositionMarginCreated(address,address,uint96,int128,address,uint256,uint128)": EventFragment;
    "AdjustLiquidityPositionMarginExecuted(uint128,address)": EventFragment;
    "CloseLiquidityPositionCancelled(uint128,address)": EventFragment;
    "CloseLiquidityPositionCreated(address,address,uint96,address,uint256,uint128)": EventFragment;
    "CloseLiquidityPositionExecuted(uint128,address)": EventFragment;
    "DecreasePositionCancelled(uint128,address)": EventFragment;
    "DecreasePositionCreated(address,address,uint8,uint128,uint128,uint160,address,uint256,uint128)": EventFragment;
    "DecreasePositionExecuted(uint128,address)": EventFragment;
    "DecreaseRiskBufferFundPositionCancelled(uint128,address)": EventFragment;
    "DecreaseRiskBufferFundPositionCreated(address,address,uint128,address,uint256,uint128)": EventFragment;
    "DecreaseRiskBufferFundPositionExecuted(uint128,address)": EventFragment;
    "DelayValuesUpdated(uint32,uint32,uint32)": EventFragment;
    "IncreasePositionCancelled(uint128,address)": EventFragment;
    "IncreasePositionCreated(address,address,uint8,uint128,uint128,uint160,uint256,uint128)": EventFragment;
    "IncreasePositionExecuted(uint128,address)": EventFragment;
    "IncreaseRiskBufferFundPositionCancelled(uint128,address)": EventFragment;
    "IncreaseRiskBufferFundPositionCreated(address,address,uint128,uint256,uint128)": EventFragment;
    "IncreaseRiskBufferFundPositionExecuted(uint128,address)": EventFragment;
    "MinExecutionFeeUpdated(uint256)": EventFragment;
    "OpenLiquidityPositionCancelled(uint128,address)": EventFragment;
    "OpenLiquidityPositionCreated(address,address,uint128,uint256,uint256,uint128)": EventFragment;
    "OpenLiquidityPositionExecuted(uint128,address)": EventFragment;
    "PositionExecutorUpdated(address,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AdjustLiquidityPositionMarginCancelled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AdjustLiquidityPositionMarginCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AdjustLiquidityPositionMarginExecuted"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CloseLiquidityPositionCancelled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CloseLiquidityPositionCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CloseLiquidityPositionExecuted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreasePositionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreasePositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreasePositionExecuted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DecreaseRiskBufferFundPositionCancelled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DecreaseRiskBufferFundPositionCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DecreaseRiskBufferFundPositionExecuted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayValuesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePositionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePositionExecuted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncreaseRiskBufferFundPositionCancelled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncreaseRiskBufferFundPositionCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncreaseRiskBufferFundPositionExecuted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinExecutionFeeUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OpenLiquidityPositionCancelled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OpenLiquidityPositionCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OpenLiquidityPositionExecuted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionExecutorUpdated"): EventFragment;
}

export interface AdjustLiquidityPositionMarginCancelledEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type AdjustLiquidityPositionMarginCancelledEvent = TypedEvent<
  [BigNumber, string],
  AdjustLiquidityPositionMarginCancelledEventObject
>;

export type AdjustLiquidityPositionMarginCancelledEventFilter =
  TypedEventFilter<AdjustLiquidityPositionMarginCancelledEvent>;

export interface AdjustLiquidityPositionMarginCreatedEventObject {
  account: string;
  pool: string;
  positionID: BigNumber;
  marginDelta: BigNumber;
  receiver: string;
  executionFee: BigNumber;
  index: BigNumber;
}
export type AdjustLiquidityPositionMarginCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber, BigNumber],
  AdjustLiquidityPositionMarginCreatedEventObject
>;

export type AdjustLiquidityPositionMarginCreatedEventFilter =
  TypedEventFilter<AdjustLiquidityPositionMarginCreatedEvent>;

export interface AdjustLiquidityPositionMarginExecutedEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type AdjustLiquidityPositionMarginExecutedEvent = TypedEvent<
  [BigNumber, string],
  AdjustLiquidityPositionMarginExecutedEventObject
>;

export type AdjustLiquidityPositionMarginExecutedEventFilter =
  TypedEventFilter<AdjustLiquidityPositionMarginExecutedEvent>;

export interface CloseLiquidityPositionCancelledEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type CloseLiquidityPositionCancelledEvent = TypedEvent<
  [BigNumber, string],
  CloseLiquidityPositionCancelledEventObject
>;

export type CloseLiquidityPositionCancelledEventFilter =
  TypedEventFilter<CloseLiquidityPositionCancelledEvent>;

export interface CloseLiquidityPositionCreatedEventObject {
  account: string;
  pool: string;
  positionID: BigNumber;
  receiver: string;
  executionFee: BigNumber;
  index: BigNumber;
}
export type CloseLiquidityPositionCreatedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber],
  CloseLiquidityPositionCreatedEventObject
>;

export type CloseLiquidityPositionCreatedEventFilter =
  TypedEventFilter<CloseLiquidityPositionCreatedEvent>;

export interface CloseLiquidityPositionExecutedEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type CloseLiquidityPositionExecutedEvent = TypedEvent<
  [BigNumber, string],
  CloseLiquidityPositionExecutedEventObject
>;

export type CloseLiquidityPositionExecutedEventFilter =
  TypedEventFilter<CloseLiquidityPositionExecutedEvent>;

export interface DecreasePositionCancelledEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type DecreasePositionCancelledEvent = TypedEvent<
  [BigNumber, string],
  DecreasePositionCancelledEventObject
>;

export type DecreasePositionCancelledEventFilter =
  TypedEventFilter<DecreasePositionCancelledEvent>;

export interface DecreasePositionCreatedEventObject {
  account: string;
  pool: string;
  side: number;
  marginDelta: BigNumber;
  sizeDelta: BigNumber;
  acceptableTradePriceX96: BigNumber;
  receiver: string;
  executionFee: BigNumber;
  index: BigNumber;
}
export type DecreasePositionCreatedEvent = TypedEvent<
  [
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ],
  DecreasePositionCreatedEventObject
>;

export type DecreasePositionCreatedEventFilter =
  TypedEventFilter<DecreasePositionCreatedEvent>;

export interface DecreasePositionExecutedEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type DecreasePositionExecutedEvent = TypedEvent<
  [BigNumber, string],
  DecreasePositionExecutedEventObject
>;

export type DecreasePositionExecutedEventFilter =
  TypedEventFilter<DecreasePositionExecutedEvent>;

export interface DecreaseRiskBufferFundPositionCancelledEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type DecreaseRiskBufferFundPositionCancelledEvent = TypedEvent<
  [BigNumber, string],
  DecreaseRiskBufferFundPositionCancelledEventObject
>;

export type DecreaseRiskBufferFundPositionCancelledEventFilter =
  TypedEventFilter<DecreaseRiskBufferFundPositionCancelledEvent>;

export interface DecreaseRiskBufferFundPositionCreatedEventObject {
  account: string;
  pool: string;
  liquidityDelta: BigNumber;
  receiver: string;
  executionFee: BigNumber;
  index: BigNumber;
}
export type DecreaseRiskBufferFundPositionCreatedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber],
  DecreaseRiskBufferFundPositionCreatedEventObject
>;

export type DecreaseRiskBufferFundPositionCreatedEventFilter =
  TypedEventFilter<DecreaseRiskBufferFundPositionCreatedEvent>;

export interface DecreaseRiskBufferFundPositionExecutedEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type DecreaseRiskBufferFundPositionExecutedEvent = TypedEvent<
  [BigNumber, string],
  DecreaseRiskBufferFundPositionExecutedEventObject
>;

export type DecreaseRiskBufferFundPositionExecutedEventFilter =
  TypedEventFilter<DecreaseRiskBufferFundPositionExecutedEvent>;

export interface DelayValuesUpdatedEventObject {
  minBlockDelayExecutor: number;
  minTimeDelayPublic: number;
  maxTimeDelay: number;
}
export type DelayValuesUpdatedEvent = TypedEvent<
  [number, number, number],
  DelayValuesUpdatedEventObject
>;

export type DelayValuesUpdatedEventFilter =
  TypedEventFilter<DelayValuesUpdatedEvent>;

export interface IncreasePositionCancelledEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type IncreasePositionCancelledEvent = TypedEvent<
  [BigNumber, string],
  IncreasePositionCancelledEventObject
>;

export type IncreasePositionCancelledEventFilter =
  TypedEventFilter<IncreasePositionCancelledEvent>;

export interface IncreasePositionCreatedEventObject {
  account: string;
  pool: string;
  side: number;
  marginDelta: BigNumber;
  sizeDelta: BigNumber;
  acceptableTradePriceX96: BigNumber;
  executionFee: BigNumber;
  index: BigNumber;
}
export type IncreasePositionCreatedEvent = TypedEvent<
  [
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  IncreasePositionCreatedEventObject
>;

export type IncreasePositionCreatedEventFilter =
  TypedEventFilter<IncreasePositionCreatedEvent>;

export interface IncreasePositionExecutedEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type IncreasePositionExecutedEvent = TypedEvent<
  [BigNumber, string],
  IncreasePositionExecutedEventObject
>;

export type IncreasePositionExecutedEventFilter =
  TypedEventFilter<IncreasePositionExecutedEvent>;

export interface IncreaseRiskBufferFundPositionCancelledEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type IncreaseRiskBufferFundPositionCancelledEvent = TypedEvent<
  [BigNumber, string],
  IncreaseRiskBufferFundPositionCancelledEventObject
>;

export type IncreaseRiskBufferFundPositionCancelledEventFilter =
  TypedEventFilter<IncreaseRiskBufferFundPositionCancelledEvent>;

export interface IncreaseRiskBufferFundPositionCreatedEventObject {
  account: string;
  pool: string;
  liquidityDelta: BigNumber;
  executionFee: BigNumber;
  index: BigNumber;
}
export type IncreaseRiskBufferFundPositionCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  IncreaseRiskBufferFundPositionCreatedEventObject
>;

export type IncreaseRiskBufferFundPositionCreatedEventFilter =
  TypedEventFilter<IncreaseRiskBufferFundPositionCreatedEvent>;

export interface IncreaseRiskBufferFundPositionExecutedEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type IncreaseRiskBufferFundPositionExecutedEvent = TypedEvent<
  [BigNumber, string],
  IncreaseRiskBufferFundPositionExecutedEventObject
>;

export type IncreaseRiskBufferFundPositionExecutedEventFilter =
  TypedEventFilter<IncreaseRiskBufferFundPositionExecutedEvent>;

export interface MinExecutionFeeUpdatedEventObject {
  minExecutionFee: BigNumber;
}
export type MinExecutionFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  MinExecutionFeeUpdatedEventObject
>;

export type MinExecutionFeeUpdatedEventFilter =
  TypedEventFilter<MinExecutionFeeUpdatedEvent>;

export interface OpenLiquidityPositionCancelledEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type OpenLiquidityPositionCancelledEvent = TypedEvent<
  [BigNumber, string],
  OpenLiquidityPositionCancelledEventObject
>;

export type OpenLiquidityPositionCancelledEventFilter =
  TypedEventFilter<OpenLiquidityPositionCancelledEvent>;

export interface OpenLiquidityPositionCreatedEventObject {
  account: string;
  pool: string;
  margin: BigNumber;
  liquidity: BigNumber;
  executionFee: BigNumber;
  index: BigNumber;
}
export type OpenLiquidityPositionCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  OpenLiquidityPositionCreatedEventObject
>;

export type OpenLiquidityPositionCreatedEventFilter =
  TypedEventFilter<OpenLiquidityPositionCreatedEvent>;

export interface OpenLiquidityPositionExecutedEventObject {
  index: BigNumber;
  executionFeeReceiver: string;
}
export type OpenLiquidityPositionExecutedEvent = TypedEvent<
  [BigNumber, string],
  OpenLiquidityPositionExecutedEventObject
>;

export type OpenLiquidityPositionExecutedEventFilter =
  TypedEventFilter<OpenLiquidityPositionExecutedEvent>;

export interface PositionExecutorUpdatedEventObject {
  account: string;
  active: boolean;
}
export type PositionExecutorUpdatedEvent = TypedEvent<
  [string, boolean],
  PositionExecutorUpdatedEventObject
>;

export type PositionExecutorUpdatedEventFilter =
  TypedEventFilter<PositionExecutorUpdatedEvent>;

export interface IPositionRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPositionRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelAdjustLiquidityPositionMargin(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelCloseLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelDecreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelDecreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelIncreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelIncreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOpenLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAdjustLiquidityPositionMargin(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCloseLiquidityPosition(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createDecreasePosition(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createDecreaseRiskBufferFundPosition(
      pool: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createIncreasePosition(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createIncreaseRiskBufferFundPosition(
      pool: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOpenLiquidityPosition(
      pool: PromiseOrValue<string>,
      margin: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeAdjustLiquidityPositionMargin(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeAdjustLiquidityPositionMargins(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeCloseLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeCloseLiquidityPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeDecreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeDecreasePositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeDecreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeDecreaseRiskBufferFundPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeIncreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeIncreasePositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeIncreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeIncreaseRiskBufferFundPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeOpenLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeOpenLiquidityPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDelayValues(
      minBlockDelayExecutor: PromiseOrValue<BigNumberish>,
      minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      maxTimeDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExecutionGasLimit(
      executionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMinExecutionFee(
      minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePositionExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelAdjustLiquidityPositionMargin(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelCloseLiquidityPosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelDecreasePosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelDecreaseRiskBufferFundPosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelIncreasePosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelIncreaseRiskBufferFundPosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOpenLiquidityPosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAdjustLiquidityPositionMargin(
    pool: PromiseOrValue<string>,
    positionID: PromiseOrValue<BigNumberish>,
    marginDelta: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCloseLiquidityPosition(
    pool: PromiseOrValue<string>,
    positionID: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createDecreasePosition(
    pool: PromiseOrValue<string>,
    side: PromiseOrValue<BigNumberish>,
    marginDelta: PromiseOrValue<BigNumberish>,
    sizeDelta: PromiseOrValue<BigNumberish>,
    acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createDecreaseRiskBufferFundPosition(
    pool: PromiseOrValue<string>,
    liquidityDelta: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createIncreasePosition(
    pool: PromiseOrValue<string>,
    side: PromiseOrValue<BigNumberish>,
    marginDelta: PromiseOrValue<BigNumberish>,
    sizeDelta: PromiseOrValue<BigNumberish>,
    acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createIncreaseRiskBufferFundPosition(
    pool: PromiseOrValue<string>,
    liquidityDelta: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOpenLiquidityPosition(
    pool: PromiseOrValue<string>,
    margin: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeAdjustLiquidityPositionMargin(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeAdjustLiquidityPositionMargins(
    endIndex: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeCloseLiquidityPosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeCloseLiquidityPositions(
    endIndex: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeDecreasePosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeDecreasePositions(
    endIndex: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeDecreaseRiskBufferFundPosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeDecreaseRiskBufferFundPositions(
    endIndex: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeIncreasePosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeIncreasePositions(
    endIndex: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeIncreaseRiskBufferFundPosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeIncreaseRiskBufferFundPositions(
    endIndex: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeOpenLiquidityPosition(
    index: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeOpenLiquidityPositions(
    endIndex: PromiseOrValue<BigNumberish>,
    executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDelayValues(
    minBlockDelayExecutor: PromiseOrValue<BigNumberish>,
    minTimeDelayPublic: PromiseOrValue<BigNumberish>,
    maxTimeDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExecutionGasLimit(
    executionGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMinExecutionFee(
    minExecutionFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePositionExecutor(
    account: PromiseOrValue<string>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelAdjustLiquidityPositionMargin(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelCloseLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelDecreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelDecreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelIncreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelIncreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelOpenLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createAdjustLiquidityPositionMargin(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCloseLiquidityPosition(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDecreasePosition(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDecreaseRiskBufferFundPosition(
      pool: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createIncreasePosition(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createIncreaseRiskBufferFundPosition(
      pool: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createOpenLiquidityPosition(
      pool: PromiseOrValue<string>,
      margin: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeAdjustLiquidityPositionMargin(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeAdjustLiquidityPositionMargins(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeCloseLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeCloseLiquidityPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeDecreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeDecreasePositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeDecreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeDecreaseRiskBufferFundPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeIncreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeIncreasePositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeIncreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeIncreaseRiskBufferFundPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeOpenLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeOpenLiquidityPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDelayValues(
      minBlockDelayExecutor: PromiseOrValue<BigNumberish>,
      minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      maxTimeDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExecutionGasLimit(
      executionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinExecutionFee(
      minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePositionExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdjustLiquidityPositionMarginCancelled(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): AdjustLiquidityPositionMarginCancelledEventFilter;
    AdjustLiquidityPositionMarginCancelled(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): AdjustLiquidityPositionMarginCancelledEventFilter;

    "AdjustLiquidityPositionMarginCreated(address,address,uint96,int128,address,uint256,uint128)"(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      positionID?: null,
      marginDelta?: null,
      receiver?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): AdjustLiquidityPositionMarginCreatedEventFilter;
    AdjustLiquidityPositionMarginCreated(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      positionID?: null,
      marginDelta?: null,
      receiver?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): AdjustLiquidityPositionMarginCreatedEventFilter;

    "AdjustLiquidityPositionMarginExecuted(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): AdjustLiquidityPositionMarginExecutedEventFilter;
    AdjustLiquidityPositionMarginExecuted(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): AdjustLiquidityPositionMarginExecutedEventFilter;

    "CloseLiquidityPositionCancelled(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): CloseLiquidityPositionCancelledEventFilter;
    CloseLiquidityPositionCancelled(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): CloseLiquidityPositionCancelledEventFilter;

    "CloseLiquidityPositionCreated(address,address,uint96,address,uint256,uint128)"(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      positionID?: null,
      receiver?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): CloseLiquidityPositionCreatedEventFilter;
    CloseLiquidityPositionCreated(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      positionID?: null,
      receiver?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): CloseLiquidityPositionCreatedEventFilter;

    "CloseLiquidityPositionExecuted(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): CloseLiquidityPositionExecutedEventFilter;
    CloseLiquidityPositionExecuted(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): CloseLiquidityPositionExecutedEventFilter;

    "DecreasePositionCancelled(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): DecreasePositionCancelledEventFilter;
    DecreasePositionCancelled(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): DecreasePositionCancelledEventFilter;

    "DecreasePositionCreated(address,address,uint8,uint128,uint128,uint160,address,uint256,uint128)"(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      sizeDelta?: null,
      acceptableTradePriceX96?: null,
      receiver?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): DecreasePositionCreatedEventFilter;
    DecreasePositionCreated(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      sizeDelta?: null,
      acceptableTradePriceX96?: null,
      receiver?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): DecreasePositionCreatedEventFilter;

    "DecreasePositionExecuted(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): DecreasePositionExecutedEventFilter;
    DecreasePositionExecuted(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): DecreasePositionExecutedEventFilter;

    "DecreaseRiskBufferFundPositionCancelled(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): DecreaseRiskBufferFundPositionCancelledEventFilter;
    DecreaseRiskBufferFundPositionCancelled(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): DecreaseRiskBufferFundPositionCancelledEventFilter;

    "DecreaseRiskBufferFundPositionCreated(address,address,uint128,address,uint256,uint128)"(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      liquidityDelta?: null,
      receiver?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): DecreaseRiskBufferFundPositionCreatedEventFilter;
    DecreaseRiskBufferFundPositionCreated(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      liquidityDelta?: null,
      receiver?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): DecreaseRiskBufferFundPositionCreatedEventFilter;

    "DecreaseRiskBufferFundPositionExecuted(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): DecreaseRiskBufferFundPositionExecutedEventFilter;
    DecreaseRiskBufferFundPositionExecuted(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): DecreaseRiskBufferFundPositionExecutedEventFilter;

    "DelayValuesUpdated(uint32,uint32,uint32)"(
      minBlockDelayExecutor?: null,
      minTimeDelayPublic?: null,
      maxTimeDelay?: null
    ): DelayValuesUpdatedEventFilter;
    DelayValuesUpdated(
      minBlockDelayExecutor?: null,
      minTimeDelayPublic?: null,
      maxTimeDelay?: null
    ): DelayValuesUpdatedEventFilter;

    "IncreasePositionCancelled(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): IncreasePositionCancelledEventFilter;
    IncreasePositionCancelled(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): IncreasePositionCancelledEventFilter;

    "IncreasePositionCreated(address,address,uint8,uint128,uint128,uint160,uint256,uint128)"(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      sizeDelta?: null,
      acceptableTradePriceX96?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): IncreasePositionCreatedEventFilter;
    IncreasePositionCreated(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      sizeDelta?: null,
      acceptableTradePriceX96?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): IncreasePositionCreatedEventFilter;

    "IncreasePositionExecuted(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): IncreasePositionExecutedEventFilter;
    IncreasePositionExecuted(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): IncreasePositionExecutedEventFilter;

    "IncreaseRiskBufferFundPositionCancelled(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): IncreaseRiskBufferFundPositionCancelledEventFilter;
    IncreaseRiskBufferFundPositionCancelled(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): IncreaseRiskBufferFundPositionCancelledEventFilter;

    "IncreaseRiskBufferFundPositionCreated(address,address,uint128,uint256,uint128)"(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      liquidityDelta?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): IncreaseRiskBufferFundPositionCreatedEventFilter;
    IncreaseRiskBufferFundPositionCreated(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      liquidityDelta?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): IncreaseRiskBufferFundPositionCreatedEventFilter;

    "IncreaseRiskBufferFundPositionExecuted(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): IncreaseRiskBufferFundPositionExecutedEventFilter;
    IncreaseRiskBufferFundPositionExecuted(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): IncreaseRiskBufferFundPositionExecutedEventFilter;

    "MinExecutionFeeUpdated(uint256)"(
      minExecutionFee?: null
    ): MinExecutionFeeUpdatedEventFilter;
    MinExecutionFeeUpdated(
      minExecutionFee?: null
    ): MinExecutionFeeUpdatedEventFilter;

    "OpenLiquidityPositionCancelled(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): OpenLiquidityPositionCancelledEventFilter;
    OpenLiquidityPositionCancelled(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): OpenLiquidityPositionCancelledEventFilter;

    "OpenLiquidityPositionCreated(address,address,uint128,uint256,uint256,uint128)"(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      margin?: null,
      liquidity?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): OpenLiquidityPositionCreatedEventFilter;
    OpenLiquidityPositionCreated(
      account?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      margin?: null,
      liquidity?: null,
      executionFee?: null,
      index?: PromiseOrValue<BigNumberish> | null
    ): OpenLiquidityPositionCreatedEventFilter;

    "OpenLiquidityPositionExecuted(uint128,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): OpenLiquidityPositionExecutedEventFilter;
    OpenLiquidityPositionExecuted(
      index?: PromiseOrValue<BigNumberish> | null,
      executionFeeReceiver?: null
    ): OpenLiquidityPositionExecutedEventFilter;

    "PositionExecutorUpdated(address,bool)"(
      account?: PromiseOrValue<string> | null,
      active?: null
    ): PositionExecutorUpdatedEventFilter;
    PositionExecutorUpdated(
      account?: PromiseOrValue<string> | null,
      active?: null
    ): PositionExecutorUpdatedEventFilter;
  };

  estimateGas: {
    cancelAdjustLiquidityPositionMargin(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelCloseLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelDecreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelDecreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelIncreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelIncreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOpenLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAdjustLiquidityPositionMargin(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCloseLiquidityPosition(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createDecreasePosition(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createDecreaseRiskBufferFundPosition(
      pool: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createIncreasePosition(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createIncreaseRiskBufferFundPosition(
      pool: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOpenLiquidityPosition(
      pool: PromiseOrValue<string>,
      margin: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeAdjustLiquidityPositionMargin(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeAdjustLiquidityPositionMargins(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeCloseLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeCloseLiquidityPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeDecreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeDecreasePositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeDecreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeDecreaseRiskBufferFundPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeIncreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeIncreasePositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeIncreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeIncreaseRiskBufferFundPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeOpenLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeOpenLiquidityPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDelayValues(
      minBlockDelayExecutor: PromiseOrValue<BigNumberish>,
      minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      maxTimeDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExecutionGasLimit(
      executionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMinExecutionFee(
      minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePositionExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelAdjustLiquidityPositionMargin(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelCloseLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelDecreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelDecreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelIncreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelIncreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOpenLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAdjustLiquidityPositionMargin(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCloseLiquidityPosition(
      pool: PromiseOrValue<string>,
      positionID: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createDecreasePosition(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createDecreaseRiskBufferFundPosition(
      pool: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createIncreasePosition(
      pool: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      acceptableTradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createIncreaseRiskBufferFundPosition(
      pool: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOpenLiquidityPosition(
      pool: PromiseOrValue<string>,
      margin: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeAdjustLiquidityPositionMargin(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeAdjustLiquidityPositionMargins(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeCloseLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeCloseLiquidityPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeDecreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeDecreasePositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeDecreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeDecreaseRiskBufferFundPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreasePosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreasePositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreaseRiskBufferFundPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreaseRiskBufferFundPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeOpenLiquidityPosition(
      index: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeOpenLiquidityPositions(
      endIndex: PromiseOrValue<BigNumberish>,
      executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDelayValues(
      minBlockDelayExecutor: PromiseOrValue<BigNumberish>,
      minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      maxTimeDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExecutionGasLimit(
      executionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMinExecutionFee(
      minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePositionExecutor(
      account: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
