/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MultiMinterInterface extends utils.Interface {
  functions: {
    "acceptGov()": FunctionFragment;
    "changeGov(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "minters(address)": FunctionFragment;
    "pendingGov()": FunctionFragment;
    "setMinter(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptGov"
      | "changeGov"
      | "gov"
      | "minters"
      | "pendingGov"
      | "setMinter"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "acceptGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "acceptGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;

  events: {
    "ChangeGovStarted(address,address)": EventFragment;
    "GovChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeGovStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovChanged"): EventFragment;
}

export interface ChangeGovStartedEventObject {
  previousGov: string;
  newGov: string;
}
export type ChangeGovStartedEvent = TypedEvent<
  [string, string],
  ChangeGovStartedEventObject
>;

export type ChangeGovStartedEventFilter =
  TypedEventFilter<ChangeGovStartedEvent>;

export interface GovChangedEventObject {
  previousGov: string;
  newGov: string;
}
export type GovChangedEvent = TypedEvent<
  [string, string],
  GovChangedEventObject
>;

export type GovChangedEventFilter = TypedEventFilter<GovChangedEvent>;

export interface MultiMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    minters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pendingGov(overrides?: CallOverrides): Promise<[string]>;

    setMinter(
      _minter: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptGov(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeGov(
    _newGov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gov(overrides?: CallOverrides): Promise<string>;

  minters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pendingGov(overrides?: CallOverrides): Promise<string>;

  setMinter(
    _minter: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGov(overrides?: CallOverrides): Promise<void>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    gov(overrides?: CallOverrides): Promise<string>;

    minters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pendingGov(overrides?: CallOverrides): Promise<string>;

    setMinter(
      _minter: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeGovStarted(address,address)"(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): ChangeGovStartedEventFilter;
    ChangeGovStarted(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): ChangeGovStartedEventFilter;

    "GovChanged(address,address)"(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): GovChangedEventFilter;
    GovChanged(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): GovChangedEventFilter;
  };

  estimateGas: {
    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    minters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingGov(overrides?: CallOverrides): Promise<BigNumber>;

    setMinter(
      _minter: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinter(
      _minter: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
