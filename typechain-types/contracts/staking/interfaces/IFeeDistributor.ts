/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IFeeDistributor {
  export type LockupRewardMultiplierParameterStruct = {
    period: PromiseOrValue<BigNumberish>;
    multiplier: PromiseOrValue<BigNumberish>;
  };

  export type LockupRewardMultiplierParameterStructOutput = [number, number] & {
    period: number;
    multiplier: number;
  };
}

export interface IFeeDistributorInterface extends utils.Interface {
  functions: {
    "architectPerShareGrowthX64()": FunctionFragment;
    "architectPerShareGrowthX64s(uint256)": FunctionFragment;
    "collectArchitectBatch(address,uint256[])": FunctionFragment;
    "collectArchitectBatchByRouter(address,uint256[])": FunctionFragment;
    "collectBatch(address,uint256[])": FunctionFragment;
    "collectBatchByRouter(address,address,uint256[])": FunctionFragment;
    "collectV3PosBatch(address,uint256[])": FunctionFragment;
    "collectV3PosBatchByRouter(address,address,uint256[])": FunctionFragment;
    "depositFee(uint256)": FunctionFragment;
    "feeBalance()": FunctionFragment;
    "feeToken()": FunctionFragment;
    "lockupRewardMultipliers(uint16)": FunctionFragment;
    "mintedArchitects()": FunctionFragment;
    "perShareGrowthX64()": FunctionFragment;
    "setLockupRewardMultipliers((uint16,uint16)[])": FunctionFragment;
    "stake(uint256,address,uint16)": FunctionFragment;
    "stakeInfos(address,uint256)": FunctionFragment;
    "stakeV3Pos(uint256,address,uint16)": FunctionFragment;
    "totalStakedWithMultiplier()": FunctionFragment;
    "unstake(uint256[],address)": FunctionFragment;
    "unstakeV3Pos(uint256[],address)": FunctionFragment;
    "v3PosStakeInfos(address,uint256)": FunctionFragment;
    "withdrawalPeriod()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "architectPerShareGrowthX64"
      | "architectPerShareGrowthX64s"
      | "collectArchitectBatch"
      | "collectArchitectBatchByRouter"
      | "collectBatch"
      | "collectBatchByRouter"
      | "collectV3PosBatch"
      | "collectV3PosBatchByRouter"
      | "depositFee"
      | "feeBalance"
      | "feeToken"
      | "lockupRewardMultipliers"
      | "mintedArchitects"
      | "perShareGrowthX64"
      | "setLockupRewardMultipliers"
      | "stake"
      | "stakeInfos"
      | "stakeV3Pos"
      | "totalStakedWithMultiplier"
      | "unstake"
      | "unstakeV3Pos"
      | "v3PosStakeInfos"
      | "withdrawalPeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "architectPerShareGrowthX64",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "architectPerShareGrowthX64s",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectArchitectBatch",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectArchitectBatchByRouter",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectBatch",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectBatchByRouter",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectV3PosBatch",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectV3PosBatchByRouter",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockupRewardMultipliers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedArchitects",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "perShareGrowthX64",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLockupRewardMultipliers",
    values: [IFeeDistributor.LockupRewardMultiplierParameterStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeInfos",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeV3Pos",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedWithMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeV3Pos",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "v3PosStakeInfos",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "architectPerShareGrowthX64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "architectPerShareGrowthX64s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectArchitectBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectArchitectBatchByRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectBatchByRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectV3PosBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectV3PosBatchByRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockupRewardMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedArchitects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perShareGrowthX64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockupRewardMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeV3Pos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedWithMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeV3Pos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "v3PosStakeInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalPeriod",
    data: BytesLike
  ): Result;

  events: {
    "ArchitectCollected(address,uint256,uint256)": EventFragment;
    "Collected(address,address,uint256,uint256)": EventFragment;
    "FeeDeposited(uint256,uint256,uint256,uint160,uint160)": EventFragment;
    "LockupRewardMultipliersSet(tuple[])": EventFragment;
    "Staked(address,address,uint256,uint256,uint16)": EventFragment;
    "Unstaked(address,address,uint256,uint256,uint256)": EventFragment;
    "V3PosCollected(address,address,uint256,uint256)": EventFragment;
    "V3PosStaked(address,address,uint256,uint256,uint16)": EventFragment;
    "V3PosUnstaked(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArchitectCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockupRewardMultipliersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "V3PosCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "V3PosStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "V3PosUnstaked"): EventFragment;
}

export interface ArchitectCollectedEventObject {
  receiver: string;
  tokenID: BigNumber;
  amount: BigNumber;
}
export type ArchitectCollectedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ArchitectCollectedEventObject
>;

export type ArchitectCollectedEventFilter =
  TypedEventFilter<ArchitectCollectedEvent>;

export interface CollectedEventObject {
  owner: string;
  receiver: string;
  id: BigNumber;
  amount: BigNumber;
}
export type CollectedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  CollectedEventObject
>;

export type CollectedEventFilter = TypedEventFilter<CollectedEvent>;

export interface FeeDepositedEventObject {
  amount: BigNumber;
  equFeeAmount: BigNumber;
  architectFeeAmount: BigNumber;
  perShareGrowthAfterX64: BigNumber;
  architectPerShareGrowthAfterX64: BigNumber;
}
export type FeeDepositedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  FeeDepositedEventObject
>;

export type FeeDepositedEventFilter = TypedEventFilter<FeeDepositedEvent>;

export interface LockupRewardMultipliersSetEventObject {
  lockupRewardMultiplierParameters: IFeeDistributor.LockupRewardMultiplierParameterStructOutput[];
}
export type LockupRewardMultipliersSetEvent = TypedEvent<
  [IFeeDistributor.LockupRewardMultiplierParameterStructOutput[]],
  LockupRewardMultipliersSetEventObject
>;

export type LockupRewardMultipliersSetEventFilter =
  TypedEventFilter<LockupRewardMultipliersSetEvent>;

export interface StakedEventObject {
  sender: string;
  account: string;
  id: BigNumber;
  amount: BigNumber;
  period: number;
}
export type StakedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, number],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface UnstakedEventObject {
  owner: string;
  receiver: string;
  id: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type UnstakedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface V3PosCollectedEventObject {
  owner: string;
  receiver: string;
  id: BigNumber;
  amount: BigNumber;
}
export type V3PosCollectedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  V3PosCollectedEventObject
>;

export type V3PosCollectedEventFilter = TypedEventFilter<V3PosCollectedEvent>;

export interface V3PosStakedEventObject {
  sender: string;
  account: string;
  id: BigNumber;
  amount: BigNumber;
  period: number;
}
export type V3PosStakedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, number],
  V3PosStakedEventObject
>;

export type V3PosStakedEventFilter = TypedEventFilter<V3PosStakedEvent>;

export interface V3PosUnstakedEventObject {
  owner: string;
  receiver: string;
  id: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type V3PosUnstakedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  V3PosUnstakedEventObject
>;

export type V3PosUnstakedEventFilter = TypedEventFilter<V3PosUnstakedEvent>;

export interface IFeeDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFeeDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    architectPerShareGrowthX64(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { perShareGrowthX64: BigNumber }>;

    architectPerShareGrowthX64s(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { perShareGrowthX64: BigNumber }>;

    collectArchitectBatch(
      receiver: PromiseOrValue<string>,
      tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectArchitectBatchByRouter(
      receiver: PromiseOrValue<string>,
      tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectBatch(
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectBatchByRouter(
      owner: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectV3PosBatch(
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectV3PosBatchByRouter(
      owner: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    feeToken(overrides?: CallOverrides): Promise<[string] & { token: string }>;

    lockupRewardMultipliers(
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { multiplier: number }>;

    mintedArchitects(
      overrides?: CallOverrides
    ): Promise<[number] & { quantity: number }>;

    perShareGrowthX64(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { perShareGrowthX64: BigNumber }>;

    setLockupRewardMultipliers(
      lockupRewardMultiplierParameters: IFeeDistributor.LockupRewardMultiplierParameterStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeInfos(
      account: PromiseOrValue<string>,
      stakeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, BigNumber] & {
        amount: BigNumber;
        lockupStartTime: BigNumber;
        multiplier: number;
        period: number;
        perShareGrowthX64: BigNumber;
      }
    >;

    stakeV3Pos(
      id: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalStakedWithMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    unstake(
      ids: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeV3Pos(
      ids: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    v3PosStakeInfos(
      account: PromiseOrValue<string>,
      stakeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, BigNumber] & {
        amount: BigNumber;
        lockupStartTime: BigNumber;
        multiplier: number;
        period: number;
        perShareGrowthX64: BigNumber;
      }
    >;

    withdrawalPeriod(
      overrides?: CallOverrides
    ): Promise<[number] & { period: number }>;
  };

  architectPerShareGrowthX64(overrides?: CallOverrides): Promise<BigNumber>;

  architectPerShareGrowthX64s(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collectArchitectBatch(
    receiver: PromiseOrValue<string>,
    tokenIDs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectArchitectBatchByRouter(
    receiver: PromiseOrValue<string>,
    tokenIDs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectBatch(
    receiver: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectBatchByRouter(
    owner: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectV3PosBatch(
    receiver: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectV3PosBatchByRouter(
    owner: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  lockupRewardMultipliers(
    period: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  mintedArchitects(overrides?: CallOverrides): Promise<number>;

  perShareGrowthX64(overrides?: CallOverrides): Promise<BigNumber>;

  setLockupRewardMultipliers(
    lockupRewardMultiplierParameters: IFeeDistributor.LockupRewardMultiplierParameterStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    period: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeInfos(
    account: PromiseOrValue<string>,
    stakeID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number, BigNumber] & {
      amount: BigNumber;
      lockupStartTime: BigNumber;
      multiplier: number;
      period: number;
      perShareGrowthX64: BigNumber;
    }
  >;

  stakeV3Pos(
    id: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    period: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalStakedWithMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    ids: PromiseOrValue<BigNumberish>[],
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeV3Pos(
    ids: PromiseOrValue<BigNumberish>[],
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  v3PosStakeInfos(
    account: PromiseOrValue<string>,
    stakeID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number, BigNumber] & {
      amount: BigNumber;
      lockupStartTime: BigNumber;
      multiplier: number;
      period: number;
      perShareGrowthX64: BigNumber;
    }
  >;

  withdrawalPeriod(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    architectPerShareGrowthX64(overrides?: CallOverrides): Promise<BigNumber>;

    architectPerShareGrowthX64s(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectArchitectBatch(
      receiver: PromiseOrValue<string>,
      tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectArchitectBatchByRouter(
      receiver: PromiseOrValue<string>,
      tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectBatch(
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectBatchByRouter(
      owner: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectV3PosBatch(
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectV3PosBatchByRouter(
      owner: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    lockupRewardMultipliers(
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    mintedArchitects(overrides?: CallOverrides): Promise<number>;

    perShareGrowthX64(overrides?: CallOverrides): Promise<BigNumber>;

    setLockupRewardMultipliers(
      lockupRewardMultiplierParameters: IFeeDistributor.LockupRewardMultiplierParameterStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeInfos(
      account: PromiseOrValue<string>,
      stakeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, BigNumber] & {
        amount: BigNumber;
        lockupStartTime: BigNumber;
        multiplier: number;
        period: number;
        perShareGrowthX64: BigNumber;
      }
    >;

    stakeV3Pos(
      id: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalStakedWithMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      ids: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeV3Pos(
      ids: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    v3PosStakeInfos(
      account: PromiseOrValue<string>,
      stakeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, BigNumber] & {
        amount: BigNumber;
        lockupStartTime: BigNumber;
        multiplier: number;
        period: number;
        perShareGrowthX64: BigNumber;
      }
    >;

    withdrawalPeriod(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "ArchitectCollected(address,uint256,uint256)"(
      receiver?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ArchitectCollectedEventFilter;
    ArchitectCollected(
      receiver?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ArchitectCollectedEventFilter;

    "Collected(address,address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): CollectedEventFilter;
    Collected(
      owner?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): CollectedEventFilter;

    "FeeDeposited(uint256,uint256,uint256,uint160,uint160)"(
      amount?: null,
      equFeeAmount?: null,
      architectFeeAmount?: null,
      perShareGrowthAfterX64?: null,
      architectPerShareGrowthAfterX64?: null
    ): FeeDepositedEventFilter;
    FeeDeposited(
      amount?: null,
      equFeeAmount?: null,
      architectFeeAmount?: null,
      perShareGrowthAfterX64?: null,
      architectPerShareGrowthAfterX64?: null
    ): FeeDepositedEventFilter;

    "LockupRewardMultipliersSet(tuple[])"(
      lockupRewardMultiplierParameters?: null
    ): LockupRewardMultipliersSetEventFilter;
    LockupRewardMultipliersSet(
      lockupRewardMultiplierParameters?: null
    ): LockupRewardMultipliersSetEventFilter;

    "Staked(address,address,uint256,uint256,uint16)"(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      period?: null
    ): StakedEventFilter;
    Staked(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      period?: null
    ): StakedEventFilter;

    "Unstaked(address,address,uint256,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount0?: null,
      amount1?: null
    ): UnstakedEventFilter;
    Unstaked(
      owner?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount0?: null,
      amount1?: null
    ): UnstakedEventFilter;

    "V3PosCollected(address,address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): V3PosCollectedEventFilter;
    V3PosCollected(
      owner?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): V3PosCollectedEventFilter;

    "V3PosStaked(address,address,uint256,uint256,uint16)"(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      period?: null
    ): V3PosStakedEventFilter;
    V3PosStaked(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      period?: null
    ): V3PosStakedEventFilter;

    "V3PosUnstaked(address,address,uint256,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount0?: null,
      amount1?: null
    ): V3PosUnstakedEventFilter;
    V3PosUnstaked(
      owner?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount0?: null,
      amount1?: null
    ): V3PosUnstakedEventFilter;
  };

  estimateGas: {
    architectPerShareGrowthX64(overrides?: CallOverrides): Promise<BigNumber>;

    architectPerShareGrowthX64s(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectArchitectBatch(
      receiver: PromiseOrValue<string>,
      tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectArchitectBatchByRouter(
      receiver: PromiseOrValue<string>,
      tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectBatch(
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectBatchByRouter(
      owner: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectV3PosBatch(
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectV3PosBatchByRouter(
      owner: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    lockupRewardMultipliers(
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintedArchitects(overrides?: CallOverrides): Promise<BigNumber>;

    perShareGrowthX64(overrides?: CallOverrides): Promise<BigNumber>;

    setLockupRewardMultipliers(
      lockupRewardMultiplierParameters: IFeeDistributor.LockupRewardMultiplierParameterStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeInfos(
      account: PromiseOrValue<string>,
      stakeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeV3Pos(
      id: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalStakedWithMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      ids: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeV3Pos(
      ids: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    v3PosStakeInfos(
      account: PromiseOrValue<string>,
      stakeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    architectPerShareGrowthX64(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    architectPerShareGrowthX64s(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectArchitectBatch(
      receiver: PromiseOrValue<string>,
      tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectArchitectBatchByRouter(
      receiver: PromiseOrValue<string>,
      tokenIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectBatch(
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectBatchByRouter(
      owner: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectV3PosBatch(
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectV3PosBatchByRouter(
      owner: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockupRewardMultipliers(
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintedArchitects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perShareGrowthX64(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLockupRewardMultipliers(
      lockupRewardMultiplierParameters: IFeeDistributor.LockupRewardMultiplierParameterStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeInfos(
      account: PromiseOrValue<string>,
      stakeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeV3Pos(
      id: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalStakedWithMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      ids: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeV3Pos(
      ids: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    v3PosStakeInfos(
      account: PromiseOrValue<string>,
      stakeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
