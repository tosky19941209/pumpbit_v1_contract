/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPoolLiquidityPosition {
  export type LiquidityPositionStruct = {
    margin: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    entryUnrealizedLoss: PromiseOrValue<BigNumberish>;
    entryRealizedProfitGrowthX64: PromiseOrValue<BigNumberish>;
    entryTime: PromiseOrValue<BigNumberish>;
    account: PromiseOrValue<string>;
  };

  export type LiquidityPositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    margin: BigNumber;
    liquidity: BigNumber;
    entryUnrealizedLoss: BigNumber;
    entryRealizedProfitGrowthX64: BigNumber;
    entryTime: BigNumber;
    account: string;
  };

  export type GlobalUnrealizedLossMetricsStruct = {
    lastZeroLossTime: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    liquidityTimesUnrealizedLoss: PromiseOrValue<BigNumberish>;
  };

  export type GlobalUnrealizedLossMetricsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    lastZeroLossTime: BigNumber;
    liquidity: BigNumber;
    liquidityTimesUnrealizedLoss: BigNumber;
  };

  export type GlobalLiquidityPositionStruct = {
    netSize: PromiseOrValue<BigNumberish>;
    liquidationBufferNetSize: PromiseOrValue<BigNumberish>;
    entryPriceX96: PromiseOrValue<BigNumberish>;
    side: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    realizedProfitGrowthX64: PromiseOrValue<BigNumberish>;
  };

  export type GlobalLiquidityPositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber
  ] & {
    netSize: BigNumber;
    liquidationBufferNetSize: BigNumber;
    entryPriceX96: BigNumber;
    side: number;
    liquidity: BigNumber;
    realizedProfitGrowthX64: BigNumber;
  };
}

export interface LiquidityPositionUtilTestInterface extends utils.Interface {
  functions: {
    "calculatePositionUnrealizedLoss((uint128,uint128,uint256,uint256,uint64,address),(uint64,uint128,uint256),uint128,uint256)": FunctionFragment;
    "calculateRealizedPnLAndNextEntryPriceX96((uint128,uint128,uint160,uint8,uint128,uint256),uint8,uint160,uint128)": FunctionFragment;
    "calculateRealizedProfit((uint128,uint128,uint256,uint256,uint64,address),(uint128,uint128,uint160,uint8,uint128,uint256))": FunctionFragment;
    "calculateUnrealizedLoss(uint8,uint128,uint128,uint160,int256)": FunctionFragment;
    "calculateWAMUnrealizedLoss((uint64,uint128,uint256))": FunctionFragment;
    "decreaseRiskBufferFundPosition(uint160,address,uint128)": FunctionFragment;
    "deleteMetrics()": FunctionFragment;
    "getGasCostCalculatePositionUnrealizedLoss((uint128,uint128,uint256,uint256,uint64,address),(uint64,uint128,uint256),uint128,uint256)": FunctionFragment;
    "getGasCostCalculateRealizedPnLAndNextEntryPriceX96((uint128,uint128,uint160,uint8,uint128,uint256),uint8,uint160,uint128)": FunctionFragment;
    "getGasCostDecreaseRiskBufferFundPosition(uint160,address,uint128)": FunctionFragment;
    "getGasCostIncreaseRiskBufferFundPosition(address,uint128)": FunctionFragment;
    "globalLiquidityPosition()": FunctionFragment;
    "globalRiskBufferFund()": FunctionFragment;
    "govUseRiskBufferFund(uint160,uint128)": FunctionFragment;
    "increaseRiskBufferFundPosition(address,uint128)": FunctionFragment;
    "metrics()": FunctionFragment;
    "positionLiquidityAfter()": FunctionFragment;
    "riskBufferFundAfter()": FunctionFragment;
    "riskBufferFundPositions(address)": FunctionFragment;
    "setGlobalLiquidityPosition(uint128,uint128,uint160,uint8,uint256)": FunctionFragment;
    "setGlobalRiskBufferFund(int256,uint256)": FunctionFragment;
    "setRiskBufferFundPosition(address,uint128,uint64)": FunctionFragment;
    "unlockTimeAfter()": FunctionFragment;
    "updateUnrealizedLossMetrics(uint256,uint64,int256,uint64,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculatePositionUnrealizedLoss"
      | "calculateRealizedPnLAndNextEntryPriceX96"
      | "calculateRealizedProfit"
      | "calculateUnrealizedLoss"
      | "calculateWAMUnrealizedLoss"
      | "decreaseRiskBufferFundPosition"
      | "deleteMetrics"
      | "getGasCostCalculatePositionUnrealizedLoss"
      | "getGasCostCalculateRealizedPnLAndNextEntryPriceX96"
      | "getGasCostDecreaseRiskBufferFundPosition"
      | "getGasCostIncreaseRiskBufferFundPosition"
      | "globalLiquidityPosition"
      | "globalRiskBufferFund"
      | "govUseRiskBufferFund"
      | "increaseRiskBufferFundPosition"
      | "metrics"
      | "positionLiquidityAfter"
      | "riskBufferFundAfter"
      | "riskBufferFundPositions"
      | "setGlobalLiquidityPosition"
      | "setGlobalRiskBufferFund"
      | "setRiskBufferFundPosition"
      | "unlockTimeAfter"
      | "updateUnrealizedLossMetrics"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculatePositionUnrealizedLoss",
    values: [
      IPoolLiquidityPosition.LiquidityPositionStruct,
      IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRealizedPnLAndNextEntryPriceX96",
    values: [
      IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRealizedProfit",
    values: [
      IPoolLiquidityPosition.LiquidityPositionStruct,
      IPoolLiquidityPosition.GlobalLiquidityPositionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUnrealizedLoss",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWAMUnrealizedLoss",
    values: [IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseRiskBufferFundPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostCalculatePositionUnrealizedLoss",
    values: [
      IPoolLiquidityPosition.LiquidityPositionStruct,
      IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostCalculateRealizedPnLAndNextEntryPriceX96",
    values: [
      IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostDecreaseRiskBufferFundPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostIncreaseRiskBufferFundPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalLiquidityPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalRiskBufferFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govUseRiskBufferFund",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseRiskBufferFundPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "metrics", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionLiquidityAfter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "riskBufferFundAfter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "riskBufferFundPositions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalLiquidityPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalRiskBufferFund",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRiskBufferFundPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTimeAfter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnrealizedLossMetrics",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculatePositionUnrealizedLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRealizedPnLAndNextEntryPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRealizedProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUnrealizedLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWAMUnrealizedLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostCalculatePositionUnrealizedLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostCalculateRealizedPnLAndNextEntryPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostDecreaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostIncreaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalRiskBufferFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govUseRiskBufferFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metrics", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionLiquidityAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riskBufferFundAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riskBufferFundPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalRiskBufferFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTimeAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnrealizedLossMetrics",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LiquidityPositionUtilTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityPositionUtilTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculatePositionUnrealizedLoss(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      _globalLiquidity: PromiseOrValue<BigNumberish>,
      _unrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { positionUnrealizedLoss: BigNumber }>;

    calculateRealizedPnLAndNextEntryPriceX96(
      _positionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realizedPnL: BigNumber;
        entryPriceAfterX96: BigNumber;
      }
    >;

    calculateRealizedProfit(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _globalPositionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateUnrealizedLoss(
      _side: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _netLiquidity: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateWAMUnrealizedLoss(
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { wamUnrealizedLoss: BigNumber }>;

    decreaseRiskBufferFundPosition(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteMetrics(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getGasCostCalculatePositionUnrealizedLoss(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      _globalLiquidity: PromiseOrValue<BigNumberish>,
      _unrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { gasCost: BigNumber }>;

    getGasCostCalculateRealizedPnLAndNextEntryPriceX96(
      _positionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { gasCost: BigNumber }>;

    getGasCostDecreaseRiskBufferFundPosition(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getGasCostIncreaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        riskBufferFund: BigNumber;
        liquidity: BigNumber;
      }
    >;

    govUseRiskBufferFund(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    metrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastZeroLossTime: BigNumber;
        liquidity: BigNumber;
        liquidityTimesUnrealizedLoss: BigNumber;
      }
    >;

    positionLiquidityAfter(overrides?: CallOverrides): Promise<[BigNumber]>;

    riskBufferFundAfter(overrides?: CallOverrides): Promise<[BigNumber]>;

    riskBufferFundPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { liquidity: BigNumber; unlockTime: BigNumber }
    >;

    setGlobalLiquidityPosition(
      _liquidity: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _realizedProfitGrowthX64: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlobalRiskBufferFund(
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRiskBufferFundPosition(
      _owner: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockTimeAfter(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateUnrealizedLossMetrics(
      _currentUnrealizedLoss: PromiseOrValue<BigNumberish>,
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      _liquidityDeltaEntryTime: PromiseOrValue<BigNumberish>,
      _liquidityDeltaEntryUnrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculatePositionUnrealizedLoss(
    _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
    _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
    _globalLiquidity: PromiseOrValue<BigNumberish>,
    _unrealizedLoss: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRealizedPnLAndNextEntryPriceX96(
    _positionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
    _side: PromiseOrValue<BigNumberish>,
    _tradePriceX96: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      realizedPnL: BigNumber;
      entryPriceAfterX96: BigNumber;
    }
  >;

  calculateRealizedProfit(
    _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
    _globalPositionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateUnrealizedLoss(
    _side: PromiseOrValue<BigNumberish>,
    _netSize: PromiseOrValue<BigNumberish>,
    _netLiquidity: PromiseOrValue<BigNumberish>,
    _indexPriceX96: PromiseOrValue<BigNumberish>,
    _riskBufferFund: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateWAMUnrealizedLoss(
    _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreaseRiskBufferFundPosition(
    _indexPriceX96: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    _liquidityDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteMetrics(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getGasCostCalculatePositionUnrealizedLoss(
    _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
    _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
    _globalLiquidity: PromiseOrValue<BigNumberish>,
    _unrealizedLoss: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGasCostCalculateRealizedPnLAndNextEntryPriceX96(
    _positionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
    _side: PromiseOrValue<BigNumberish>,
    _tradePriceX96: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGasCostDecreaseRiskBufferFundPosition(
    _indexPriceX96: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    _liquidityDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getGasCostIncreaseRiskBufferFundPosition(
    _account: PromiseOrValue<string>,
    _liquidityDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalLiquidityPosition(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      netSize: BigNumber;
      liquidationBufferNetSize: BigNumber;
      entryPriceX96: BigNumber;
      side: number;
      liquidity: BigNumber;
      realizedProfitGrowthX64: BigNumber;
    }
  >;

  globalRiskBufferFund(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { riskBufferFund: BigNumber; liquidity: BigNumber }
  >;

  govUseRiskBufferFund(
    _indexPriceX96: PromiseOrValue<BigNumberish>,
    _riskBufferFundDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseRiskBufferFundPosition(
    _account: PromiseOrValue<string>,
    _liquidityDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  metrics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      lastZeroLossTime: BigNumber;
      liquidity: BigNumber;
      liquidityTimesUnrealizedLoss: BigNumber;
    }
  >;

  positionLiquidityAfter(overrides?: CallOverrides): Promise<BigNumber>;

  riskBufferFundAfter(overrides?: CallOverrides): Promise<BigNumber>;

  riskBufferFundPositions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { liquidity: BigNumber; unlockTime: BigNumber }
  >;

  setGlobalLiquidityPosition(
    _liquidity: PromiseOrValue<BigNumberish>,
    _netSize: PromiseOrValue<BigNumberish>,
    _entryPriceX96: PromiseOrValue<BigNumberish>,
    _side: PromiseOrValue<BigNumberish>,
    _realizedProfitGrowthX64: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlobalRiskBufferFund(
    _riskBufferFund: PromiseOrValue<BigNumberish>,
    _liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRiskBufferFundPosition(
    _owner: PromiseOrValue<string>,
    _liquidity: PromiseOrValue<BigNumberish>,
    _unlockTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockTimeAfter(overrides?: CallOverrides): Promise<BigNumber>;

  updateUnrealizedLossMetrics(
    _currentUnrealizedLoss: PromiseOrValue<BigNumberish>,
    _currentTimestamp: PromiseOrValue<BigNumberish>,
    _liquidityDelta: PromiseOrValue<BigNumberish>,
    _liquidityDeltaEntryTime: PromiseOrValue<BigNumberish>,
    _liquidityDeltaEntryUnrealizedLoss: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculatePositionUnrealizedLoss(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      _globalLiquidity: PromiseOrValue<BigNumberish>,
      _unrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRealizedPnLAndNextEntryPriceX96(
      _positionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realizedPnL: BigNumber;
        entryPriceAfterX96: BigNumber;
      }
    >;

    calculateRealizedProfit(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _globalPositionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnrealizedLoss(
      _side: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _netLiquidity: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWAMUnrealizedLoss(
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseRiskBufferFundPosition(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteMetrics(overrides?: CallOverrides): Promise<void>;

    getGasCostCalculatePositionUnrealizedLoss(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      _globalLiquidity: PromiseOrValue<BigNumberish>,
      _unrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostCalculateRealizedPnLAndNextEntryPriceX96(
      _positionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostDecreaseRiskBufferFundPosition(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostIncreaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        riskBufferFund: BigNumber;
        liquidity: BigNumber;
      }
    >;

    govUseRiskBufferFund(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    metrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastZeroLossTime: BigNumber;
        liquidity: BigNumber;
        liquidityTimesUnrealizedLoss: BigNumber;
      }
    >;

    positionLiquidityAfter(overrides?: CallOverrides): Promise<BigNumber>;

    riskBufferFundAfter(overrides?: CallOverrides): Promise<BigNumber>;

    riskBufferFundPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { liquidity: BigNumber; unlockTime: BigNumber }
    >;

    setGlobalLiquidityPosition(
      _liquidity: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _realizedProfitGrowthX64: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalRiskBufferFund(
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRiskBufferFundPosition(
      _owner: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockTimeAfter(overrides?: CallOverrides): Promise<BigNumber>;

    updateUnrealizedLossMetrics(
      _currentUnrealizedLoss: PromiseOrValue<BigNumberish>,
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      _liquidityDeltaEntryTime: PromiseOrValue<BigNumberish>,
      _liquidityDeltaEntryUnrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calculatePositionUnrealizedLoss(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      _globalLiquidity: PromiseOrValue<BigNumberish>,
      _unrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRealizedPnLAndNextEntryPriceX96(
      _positionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRealizedProfit(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _globalPositionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnrealizedLoss(
      _side: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _netLiquidity: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWAMUnrealizedLoss(
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseRiskBufferFundPosition(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteMetrics(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getGasCostCalculatePositionUnrealizedLoss(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      _globalLiquidity: PromiseOrValue<BigNumberish>,
      _unrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostCalculateRealizedPnLAndNextEntryPriceX96(
      _positionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostDecreaseRiskBufferFundPosition(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getGasCostIncreaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalLiquidityPosition(overrides?: CallOverrides): Promise<BigNumber>;

    globalRiskBufferFund(overrides?: CallOverrides): Promise<BigNumber>;

    govUseRiskBufferFund(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    metrics(overrides?: CallOverrides): Promise<BigNumber>;

    positionLiquidityAfter(overrides?: CallOverrides): Promise<BigNumber>;

    riskBufferFundAfter(overrides?: CallOverrides): Promise<BigNumber>;

    riskBufferFundPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGlobalLiquidityPosition(
      _liquidity: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _realizedProfitGrowthX64: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlobalRiskBufferFund(
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRiskBufferFundPosition(
      _owner: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockTimeAfter(overrides?: CallOverrides): Promise<BigNumber>;

    updateUnrealizedLossMetrics(
      _currentUnrealizedLoss: PromiseOrValue<BigNumberish>,
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      _liquidityDeltaEntryTime: PromiseOrValue<BigNumberish>,
      _liquidityDeltaEntryUnrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculatePositionUnrealizedLoss(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      _globalLiquidity: PromiseOrValue<BigNumberish>,
      _unrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRealizedPnLAndNextEntryPriceX96(
      _positionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRealizedProfit(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _globalPositionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateUnrealizedLoss(
      _side: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _netLiquidity: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateWAMUnrealizedLoss(
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseRiskBufferFundPosition(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteMetrics(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getGasCostCalculatePositionUnrealizedLoss(
      _positionCache: IPoolLiquidityPosition.LiquidityPositionStruct,
      _metricsCache: IPoolLiquidityPosition.GlobalUnrealizedLossMetricsStruct,
      _globalLiquidity: PromiseOrValue<BigNumberish>,
      _unrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostCalculateRealizedPnLAndNextEntryPriceX96(
      _positionCache: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostDecreaseRiskBufferFundPosition(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getGasCostIncreaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    govUseRiskBufferFund(
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    metrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionLiquidityAfter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    riskBufferFundAfter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    riskBufferFundPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGlobalLiquidityPosition(
      _liquidity: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _realizedProfitGrowthX64: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalRiskBufferFund(
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRiskBufferFundPosition(
      _owner: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockTimeAfter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateUnrealizedLossMetrics(
      _currentUnrealizedLoss: PromiseOrValue<BigNumberish>,
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      _liquidityDeltaEntryTime: PromiseOrValue<BigNumberish>,
      _liquidityDeltaEntryUnrealizedLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
