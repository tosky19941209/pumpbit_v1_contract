/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPoolPosition {
  export type GlobalPositionStruct = {
    longSize: PromiseOrValue<BigNumberish>;
    shortSize: PromiseOrValue<BigNumberish>;
    longFundingRateGrowthX96: PromiseOrValue<BigNumberish>;
    shortFundingRateGrowthX96: PromiseOrValue<BigNumberish>;
  };

  export type GlobalPositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    longSize: BigNumber;
    shortSize: BigNumber;
    longFundingRateGrowthX96: BigNumber;
    shortFundingRateGrowthX96: BigNumber;
  };
}

export interface FundingRateUtilTestInterface extends utils.Interface {
  functions: {
    "_samplePremiumRate(uint8,uint128,uint32,uint64,uint16)": FunctionFragment;
    "calculateFundingRateGrowthX96((uint128,uint128,int192,int192),int256,uint32,uint160)": FunctionFragment;
    "clampedFundingRateDeltaX96()": FunctionFragment;
    "fundingRateDeltaX96()": FunctionFragment;
    "gasUsed()": FunctionFragment;
    "globalRiskBufferFund()": FunctionFragment;
    "longFundingRateGrowthAfterX96()": FunctionFragment;
    "position()": FunctionFragment;
    "priceState()": FunctionFragment;
    "sample()": FunctionFragment;
    "samplePremiumRate(uint32,uint64)": FunctionFragment;
    "shortFundingRateGrowthAfterX96()": FunctionFragment;
    "shouldAdjustFundingRate()": FunctionFragment;
    "updateGlobalRiskBufferFund(int256,uint256)": FunctionFragment;
    "updatePosition(uint8,uint128,uint160,uint128)": FunctionFragment;
    "updatePriceState(uint128,uint128)": FunctionFragment;
    "updateSample(uint64,uint16,int176)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_samplePremiumRate"
      | "calculateFundingRateGrowthX96"
      | "clampedFundingRateDeltaX96"
      | "fundingRateDeltaX96"
      | "gasUsed"
      | "globalRiskBufferFund"
      | "longFundingRateGrowthAfterX96"
      | "position"
      | "priceState"
      | "sample"
      | "samplePremiumRate"
      | "shortFundingRateGrowthAfterX96"
      | "shouldAdjustFundingRate"
      | "updateGlobalRiskBufferFund"
      | "updatePosition"
      | "updatePriceState"
      | "updateSample"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_samplePremiumRate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFundingRateGrowthX96",
    values: [
      IPoolPosition.GlobalPositionStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "clampedFundingRateDeltaX96",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingRateDeltaX96",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasUsed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "globalRiskBufferFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "longFundingRateGrowthAfterX96",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "position", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sample", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "samplePremiumRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "shortFundingRateGrowthAfterX96",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldAdjustFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateGlobalRiskBufferFund",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceState",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSample",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_samplePremiumRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFundingRateGrowthX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clampedFundingRateDeltaX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingRateDeltaX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasUsed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalRiskBufferFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "longFundingRateGrowthAfterX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "position", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sample", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "samplePremiumRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortFundingRateGrowthAfterX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldAdjustFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGlobalRiskBufferFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSample",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FundingRateUtilTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FundingRateUtilTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _samplePremiumRate(
      _side: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _maxSamplingTime: PromiseOrValue<BigNumberish>,
      _timeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateFundingRateGrowthX96(
      _globalPositionCache: IPoolPosition.GlobalPositionStruct,
      _fundingRateDeltaX96: PromiseOrValue<BigNumberish>,
      _maxFundingRate: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clampedFundingRateDeltaX96(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingRateDeltaX96(overrides?: CallOverrides): Promise<[BigNumber]>;

    gasUsed(overrides?: CallOverrides): Promise<[BigNumber]>;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        riskBufferFund: BigNumber;
        liquidity: BigNumber;
      }
    >;

    longFundingRateGrowthAfterX96(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    position(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    priceState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, number] & {
        maxPriceImpactLiquidity: BigNumber;
        premiumRateX96: BigNumber;
        pendingVertexIndex: number;
        liquidationVertexIndex: number;
        currentVertexIndex: number;
      }
    >;

    sample(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        lastAdjustFundingRateTime: BigNumber;
        sampleCount: number;
        cumulativePremiumRateX96: BigNumber;
      }
    >;

    samplePremiumRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shortFundingRateGrowthAfterX96(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shouldAdjustFundingRate(overrides?: CallOverrides): Promise<[boolean]>;

    updateGlobalRiskBufferFund(
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePosition(
      _side: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePriceState(
      _maxPriceImpactLiquidity: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSample(
      _lastAdjustFundingRateTime: PromiseOrValue<BigNumberish>,
      _sampleCount: PromiseOrValue<BigNumberish>,
      _cumulativePremiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _samplePremiumRate(
    _side: PromiseOrValue<BigNumberish>,
    _premiumRateX96: PromiseOrValue<BigNumberish>,
    _interestRate: PromiseOrValue<BigNumberish>,
    _maxSamplingTime: PromiseOrValue<BigNumberish>,
    _timeDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateFundingRateGrowthX96(
    _globalPositionCache: IPoolPosition.GlobalPositionStruct,
    _fundingRateDeltaX96: PromiseOrValue<BigNumberish>,
    _maxFundingRate: PromiseOrValue<BigNumberish>,
    _indexPriceX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clampedFundingRateDeltaX96(overrides?: CallOverrides): Promise<BigNumber>;

  fundingRateDeltaX96(overrides?: CallOverrides): Promise<BigNumber>;

  gasUsed(overrides?: CallOverrides): Promise<BigNumber>;

  globalRiskBufferFund(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { riskBufferFund: BigNumber; liquidity: BigNumber }
  >;

  longFundingRateGrowthAfterX96(overrides?: CallOverrides): Promise<BigNumber>;

  position(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      netSize: BigNumber;
      liquidationBufferNetSize: BigNumber;
      entryPriceX96: BigNumber;
      side: number;
      liquidity: BigNumber;
      realizedProfitGrowthX64: BigNumber;
    }
  >;

  priceState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number, number] & {
      maxPriceImpactLiquidity: BigNumber;
      premiumRateX96: BigNumber;
      pendingVertexIndex: number;
      liquidationVertexIndex: number;
      currentVertexIndex: number;
    }
  >;

  sample(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber] & {
      lastAdjustFundingRateTime: BigNumber;
      sampleCount: number;
      cumulativePremiumRateX96: BigNumber;
    }
  >;

  samplePremiumRate(
    _interestRate: PromiseOrValue<BigNumberish>,
    _currentTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shortFundingRateGrowthAfterX96(overrides?: CallOverrides): Promise<BigNumber>;

  shouldAdjustFundingRate(overrides?: CallOverrides): Promise<boolean>;

  updateGlobalRiskBufferFund(
    _riskBufferFund: PromiseOrValue<BigNumberish>,
    _liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePosition(
    _side: PromiseOrValue<BigNumberish>,
    _netSize: PromiseOrValue<BigNumberish>,
    _entryPriceX96: PromiseOrValue<BigNumberish>,
    _liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePriceState(
    _maxPriceImpactLiquidity: PromiseOrValue<BigNumberish>,
    _premiumRateX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSample(
    _lastAdjustFundingRateTime: PromiseOrValue<BigNumberish>,
    _sampleCount: PromiseOrValue<BigNumberish>,
    _cumulativePremiumRateX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _samplePremiumRate(
      _side: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _maxSamplingTime: PromiseOrValue<BigNumberish>,
      _timeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateFundingRateGrowthX96(
      _globalPositionCache: IPoolPosition.GlobalPositionStruct,
      _fundingRateDeltaX96: PromiseOrValue<BigNumberish>,
      _maxFundingRate: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    clampedFundingRateDeltaX96(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateDeltaX96(overrides?: CallOverrides): Promise<BigNumber>;

    gasUsed(overrides?: CallOverrides): Promise<BigNumber>;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        riskBufferFund: BigNumber;
        liquidity: BigNumber;
      }
    >;

    longFundingRateGrowthAfterX96(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    position(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    priceState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, number] & {
        maxPriceImpactLiquidity: BigNumber;
        premiumRateX96: BigNumber;
        pendingVertexIndex: number;
        liquidationVertexIndex: number;
        currentVertexIndex: number;
      }
    >;

    sample(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        lastAdjustFundingRateTime: BigNumber;
        sampleCount: number;
        cumulativePremiumRateX96: BigNumber;
      }
    >;

    samplePremiumRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    shortFundingRateGrowthAfterX96(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shouldAdjustFundingRate(overrides?: CallOverrides): Promise<boolean>;

    updateGlobalRiskBufferFund(
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePosition(
      _side: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceState(
      _maxPriceImpactLiquidity: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSample(
      _lastAdjustFundingRateTime: PromiseOrValue<BigNumberish>,
      _sampleCount: PromiseOrValue<BigNumberish>,
      _cumulativePremiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _samplePremiumRate(
      _side: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _maxSamplingTime: PromiseOrValue<BigNumberish>,
      _timeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateFundingRateGrowthX96(
      _globalPositionCache: IPoolPosition.GlobalPositionStruct,
      _fundingRateDeltaX96: PromiseOrValue<BigNumberish>,
      _maxFundingRate: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clampedFundingRateDeltaX96(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateDeltaX96(overrides?: CallOverrides): Promise<BigNumber>;

    gasUsed(overrides?: CallOverrides): Promise<BigNumber>;

    globalRiskBufferFund(overrides?: CallOverrides): Promise<BigNumber>;

    longFundingRateGrowthAfterX96(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    position(overrides?: CallOverrides): Promise<BigNumber>;

    priceState(overrides?: CallOverrides): Promise<BigNumber>;

    sample(overrides?: CallOverrides): Promise<BigNumber>;

    samplePremiumRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shortFundingRateGrowthAfterX96(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shouldAdjustFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    updateGlobalRiskBufferFund(
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePosition(
      _side: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePriceState(
      _maxPriceImpactLiquidity: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSample(
      _lastAdjustFundingRateTime: PromiseOrValue<BigNumberish>,
      _sampleCount: PromiseOrValue<BigNumberish>,
      _cumulativePremiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _samplePremiumRate(
      _side: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _maxSamplingTime: PromiseOrValue<BigNumberish>,
      _timeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateFundingRateGrowthX96(
      _globalPositionCache: IPoolPosition.GlobalPositionStruct,
      _fundingRateDeltaX96: PromiseOrValue<BigNumberish>,
      _maxFundingRate: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clampedFundingRateDeltaX96(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingRateDeltaX96(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gasUsed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    longFundingRateGrowthAfterX96(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    position(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sample(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    samplePremiumRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shortFundingRateGrowthAfterX96(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shouldAdjustFundingRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateGlobalRiskBufferFund(
      _riskBufferFund: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePosition(
      _side: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceState(
      _maxPriceImpactLiquidity: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSample(
      _lastAdjustFundingRateTime: PromiseOrValue<BigNumberish>,
      _sampleCount: PromiseOrValue<BigNumberish>,
      _cumulativePremiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
