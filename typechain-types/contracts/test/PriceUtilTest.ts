/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPoolLiquidityPosition {
  export type GlobalLiquidityPositionStruct = {
    netSize: PromiseOrValue<BigNumberish>;
    liquidationBufferNetSize: PromiseOrValue<BigNumberish>;
    entryPriceX96: PromiseOrValue<BigNumberish>;
    side: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    realizedProfitGrowthX64: PromiseOrValue<BigNumberish>;
  };

  export type GlobalLiquidityPositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber
  ] & {
    netSize: BigNumber;
    liquidationBufferNetSize: BigNumber;
    entryPriceX96: BigNumber;
    side: number;
    liquidity: BigNumber;
    realizedProfitGrowthX64: BigNumber;
  };
}

export declare namespace IPool {
  export type PriceVertexStruct = {
    size: PromiseOrValue<BigNumberish>;
    premiumRateX96: PromiseOrValue<BigNumberish>;
  };

  export type PriceVertexStructOutput = [BigNumber, BigNumber] & {
    size: BigNumber;
    premiumRateX96: BigNumber;
  };

  export type PriceStateStruct = {
    maxPriceImpactLiquidity: PromiseOrValue<BigNumberish>;
    premiumRateX96: PromiseOrValue<BigNumberish>;
    priceVertices: IPool.PriceVertexStruct[];
    pendingVertexIndex: PromiseOrValue<BigNumberish>;
    liquidationVertexIndex: PromiseOrValue<BigNumberish>;
    currentVertexIndex: PromiseOrValue<BigNumberish>;
    liquidationBufferNetSizes: PromiseOrValue<BigNumberish>[];
  };

  export type PriceStateStructOutput = [
    BigNumber,
    BigNumber,
    IPool.PriceVertexStructOutput[],
    number,
    number,
    number,
    BigNumber[]
  ] & {
    maxPriceImpactLiquidity: BigNumber;
    premiumRateX96: BigNumber;
    priceVertices: IPool.PriceVertexStructOutput[];
    pendingVertexIndex: number;
    liquidationVertexIndex: number;
    currentVertexIndex: number;
    liquidationBufferNetSizes: BigNumber[];
  };
}

export interface PriceUtilTestInterface extends utils.Interface {
  functions: {
    "calculateMarketPriceX96(uint8,uint8,uint160,uint128)": FunctionFragment;
    "changePriceVertex(uint8,uint8)": FunctionFragment;
    "globalLiquidityPosition()": FunctionFragment;
    "priceState()": FunctionFragment;
    "setGlobalLiquidityPosition((uint128,uint128,uint160,uint8,uint128,uint256))": FunctionFragment;
    "setPoolFactory(address)": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "setPriceState((uint128,uint128,tuple[7],uint8,uint8,uint8,uint128[7]))": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "token()": FunctionFragment;
    "tradePriceX96()": FunctionFragment;
    "updatePriceState(uint8,uint128,uint160,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateMarketPriceX96"
      | "changePriceVertex"
      | "globalLiquidityPosition"
      | "priceState"
      | "setGlobalLiquidityPosition"
      | "setPoolFactory"
      | "setPriceFeed"
      | "setPriceState"
      | "setToken"
      | "token"
      | "tradePriceX96"
      | "updatePriceState"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateMarketPriceX96",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changePriceVertex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalLiquidityPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalLiquidityPosition",
    values: [IPoolLiquidityPosition.GlobalLiquidityPositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceState",
    values: [IPool.PriceStateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tradePriceX96",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceState",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateMarketPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePriceVertex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradePriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceState",
    data: BytesLike
  ): Result;

  events: {
    "PriceVertexChanged(uint8,uint128,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceVertexChanged"): EventFragment;
}

export interface PriceVertexChangedEventObject {
  index: number;
  sizeAfter: BigNumber;
  premiumRateAfterX96: BigNumber;
}
export type PriceVertexChangedEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  PriceVertexChangedEventObject
>;

export type PriceVertexChangedEventFilter =
  TypedEventFilter<PriceVertexChangedEvent>;

export interface PriceUtilTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceUtilTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateMarketPriceX96(
      _globalSide: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marketPriceX96: BigNumber }>;

    changePriceVertex(
      startExclusive: PromiseOrValue<BigNumberish>,
      endInclusive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    priceState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, number] & {
        maxPriceImpactLiquidity: BigNumber;
        premiumRateX96: BigNumber;
        pendingVertexIndex: number;
        liquidationVertexIndex: number;
        currentVertexIndex: number;
      }
    >;

    setGlobalLiquidityPosition(
      _globalLiquidityPosition: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolFactory(
      _poolFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceState(
      _priceState: IPool.PriceStateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tradePriceX96(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePriceState(
      _side: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      liquidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculateMarketPriceX96(
    _globalSide: PromiseOrValue<BigNumberish>,
    _side: PromiseOrValue<BigNumberish>,
    _indexPriceX96: PromiseOrValue<BigNumberish>,
    _premiumRateX96: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changePriceVertex(
    startExclusive: PromiseOrValue<BigNumberish>,
    endInclusive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalLiquidityPosition(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      netSize: BigNumber;
      liquidationBufferNetSize: BigNumber;
      entryPriceX96: BigNumber;
      side: number;
      liquidity: BigNumber;
      realizedProfitGrowthX64: BigNumber;
    }
  >;

  priceState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number, number] & {
      maxPriceImpactLiquidity: BigNumber;
      premiumRateX96: BigNumber;
      pendingVertexIndex: number;
      liquidationVertexIndex: number;
      currentVertexIndex: number;
    }
  >;

  setGlobalLiquidityPosition(
    _globalLiquidityPosition: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolFactory(
    _poolFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceState(
    _priceState: IPool.PriceStateStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tradePriceX96(overrides?: CallOverrides): Promise<BigNumber>;

  updatePriceState(
    _side: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _indexPriceX96: PromiseOrValue<BigNumberish>,
    liquidation: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateMarketPriceX96(
      _globalSide: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changePriceVertex(
      startExclusive: PromiseOrValue<BigNumberish>,
      endInclusive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    priceState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, number] & {
        maxPriceImpactLiquidity: BigNumber;
        premiumRateX96: BigNumber;
        pendingVertexIndex: number;
        liquidationVertexIndex: number;
        currentVertexIndex: number;
      }
    >;

    setGlobalLiquidityPosition(
      _globalLiquidityPosition: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFactory(
      _poolFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceState(
      _priceState: IPool.PriceStateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tradePriceX96(overrides?: CallOverrides): Promise<BigNumber>;

    updatePriceState(
      _side: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      liquidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PriceVertexChanged(uint8,uint128,uint128)"(
      index?: null,
      sizeAfter?: null,
      premiumRateAfterX96?: null
    ): PriceVertexChangedEventFilter;
    PriceVertexChanged(
      index?: null,
      sizeAfter?: null,
      premiumRateAfterX96?: null
    ): PriceVertexChangedEventFilter;
  };

  estimateGas: {
    calculateMarketPriceX96(
      _globalSide: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changePriceVertex(
      startExclusive: PromiseOrValue<BigNumberish>,
      endInclusive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalLiquidityPosition(overrides?: CallOverrides): Promise<BigNumber>;

    priceState(overrides?: CallOverrides): Promise<BigNumber>;

    setGlobalLiquidityPosition(
      _globalLiquidityPosition: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolFactory(
      _poolFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceState(
      _priceState: IPool.PriceStateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tradePriceX96(overrides?: CallOverrides): Promise<BigNumber>;

    updatePriceState(
      _side: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      liquidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateMarketPriceX96(
      _globalSide: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _premiumRateX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changePriceVertex(
      startExclusive: PromiseOrValue<BigNumberish>,
      endInclusive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGlobalLiquidityPosition(
      _globalLiquidityPosition: IPoolLiquidityPosition.GlobalLiquidityPositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolFactory(
      _poolFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceState(
      _priceState: IPool.PriceStateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradePriceX96(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePriceState(
      _side: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      liquidation: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
