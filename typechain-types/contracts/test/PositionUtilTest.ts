/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPoolPosition {
  export type PositionStruct = {
    margin: PromiseOrValue<BigNumberish>;
    size: PromiseOrValue<BigNumberish>;
    entryPriceX96: PromiseOrValue<BigNumberish>;
    entryFundingRateGrowthX96: PromiseOrValue<BigNumberish>;
  };

  export type PositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    margin: BigNumber;
    size: BigNumber;
    entryPriceX96: BigNumber;
    entryFundingRateGrowthX96: BigNumber;
  };
}

export interface PositionUtilTestInterface extends utils.Interface {
  functions: {
    "calculateFundingFee(int192,int192,uint128)": FunctionFragment;
    "calculateLiquidationFee(uint128,uint160,uint32)": FunctionFragment;
    "calculateLiquidationPriceX96((uint128,uint128,uint160,int192),uint8,int256,uint32,uint32,uint64)": FunctionFragment;
    "calculateLiquidity(uint128,uint128)": FunctionFragment;
    "calculateMaintenanceMargin(uint128,uint160,uint160,uint32,uint32,uint64)": FunctionFragment;
    "calculateNextEntryPriceX96(uint8,uint128,uint160,uint128,uint160)": FunctionFragment;
    "calculateTradingFee(uint128,uint160,uint32)": FunctionFragment;
    "calculateUnrealizedPnL(uint8,uint128,uint160,uint160)": FunctionFragment;
    "chooseFundingRateGrowthX96(uint8)": FunctionFragment;
    "getGasCostCalculateLiquidationPriceX96((uint128,uint128,uint160,int192),uint8,int256,uint32,uint32,uint64)": FunctionFragment;
    "getGasCostCalculateMaintenanceMargin(uint128,uint128,uint160,uint32,uint32,uint64)": FunctionFragment;
    "getGasCostCalculateUnrealizedPnL(uint8,uint128,uint160,uint160)": FunctionFragment;
    "globalLiquidityPosition()": FunctionFragment;
    "globalPosition()": FunctionFragment;
    "previousGlobalFundingRate()": FunctionFragment;
    "setGlobalLiquidityPosition(uint128,uint128,uint128,uint8,uint256)": FunctionFragment;
    "setGlobalPosition(uint128,uint128,int192,int192)": FunctionFragment;
    "setPreviousGlobalFundingRate(int192,int192)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateFundingFee"
      | "calculateLiquidationFee"
      | "calculateLiquidationPriceX96"
      | "calculateLiquidity"
      | "calculateMaintenanceMargin"
      | "calculateNextEntryPriceX96"
      | "calculateTradingFee"
      | "calculateUnrealizedPnL"
      | "chooseFundingRateGrowthX96"
      | "getGasCostCalculateLiquidationPriceX96"
      | "getGasCostCalculateMaintenanceMargin"
      | "getGasCostCalculateUnrealizedPnL"
      | "globalLiquidityPosition"
      | "globalPosition"
      | "previousGlobalFundingRate"
      | "setGlobalLiquidityPosition"
      | "setGlobalPosition"
      | "setPreviousGlobalFundingRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateFundingFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLiquidationFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLiquidationPriceX96",
    values: [
      IPoolPosition.PositionStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMaintenanceMargin",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNextEntryPriceX96",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTradingFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUnrealizedPnL",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "chooseFundingRateGrowthX96",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostCalculateLiquidationPriceX96",
    values: [
      IPoolPosition.PositionStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostCalculateMaintenanceMargin",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostCalculateUnrealizedPnL",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "globalLiquidityPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousGlobalFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalLiquidityPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPreviousGlobalFundingRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLiquidationPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMaintenanceMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNextEntryPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTradingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUnrealizedPnL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chooseFundingRateGrowthX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostCalculateLiquidationPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostCalculateMaintenanceMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostCalculateUnrealizedPnL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousGlobalFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPreviousGlobalFundingRate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PositionUtilTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionUtilTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateFundingFee(
      _globalFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _positionFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _positionSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fundingFee: BigNumber }>;

    calculateLiquidationFee(
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidationFee: BigNumber }>;

    calculateLiquidationPriceX96(
      _positionCache: IPoolPosition.PositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _fundingFee: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidationPriceX96: BigNumber;
        adjustedFundingFee: BigNumber;
      }
    >;

    calculateLiquidity(
      _size: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateMaintenanceMargin(
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maintenanceMargin: BigNumber }>;

    calculateNextEntryPriceX96(
      _side: PromiseOrValue<BigNumberish>,
      _sizeBefore: PromiseOrValue<BigNumberish>,
      _entryPriceBeforeX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nextEntryPriceX96: BigNumber }>;

    calculateTradingFee(
      _size: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tradingFee: BigNumber }>;

    calculateUnrealizedPnL(
      _side: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { unrealizedPnL: BigNumber }>;

    chooseFundingRateGrowthX96(
      _side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGasCostCalculateLiquidationPriceX96(
      _positionCache: IPoolPosition.PositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _fundingFee: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { gasCost: BigNumber }>;

    getGasCostCalculateMaintenanceMargin(
      _liquidity: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { gasCost: BigNumber }>;

    getGasCostCalculateUnrealizedPnL(
      _side: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { gasCost: BigNumber }>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    globalPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longSize: BigNumber;
        shortSize: BigNumber;
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;

    previousGlobalFundingRate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;

    setGlobalLiquidityPosition(
      _liquidity: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _realizedProfitGrowthX64: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlobalPosition(
      _longSize: PromiseOrValue<BigNumberish>,
      _shortSize: PromiseOrValue<BigNumberish>,
      _longFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _shortFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPreviousGlobalFundingRate(
      _longFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _shortFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculateFundingFee(
    _globalFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
    _positionFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
    _positionSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateLiquidationFee(
    _size: PromiseOrValue<BigNumberish>,
    _entryPriceX96: PromiseOrValue<BigNumberish>,
    _liquidationFeeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateLiquidationPriceX96(
    _positionCache: IPoolPosition.PositionStruct,
    _side: PromiseOrValue<BigNumberish>,
    _fundingFee: PromiseOrValue<BigNumberish>,
    _liquidationFeeRate: PromiseOrValue<BigNumberish>,
    _tradingFeeRate: PromiseOrValue<BigNumberish>,
    _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      liquidationPriceX96: BigNumber;
      adjustedFundingFee: BigNumber;
    }
  >;

  calculateLiquidity(
    _size: PromiseOrValue<BigNumberish>,
    _priceX96: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateMaintenanceMargin(
    _size: PromiseOrValue<BigNumberish>,
    _entryPriceX96: PromiseOrValue<BigNumberish>,
    _indexPriceX96: PromiseOrValue<BigNumberish>,
    _liquidationFeeRate: PromiseOrValue<BigNumberish>,
    _tradingFeeRate: PromiseOrValue<BigNumberish>,
    _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateNextEntryPriceX96(
    _side: PromiseOrValue<BigNumberish>,
    _sizeBefore: PromiseOrValue<BigNumberish>,
    _entryPriceBeforeX96: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _tradePriceX96: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTradingFee(
    _size: PromiseOrValue<BigNumberish>,
    _tradePriceX96: PromiseOrValue<BigNumberish>,
    _tradingFeeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateUnrealizedPnL(
    _side: PromiseOrValue<BigNumberish>,
    _size: PromiseOrValue<BigNumberish>,
    _entryPriceX96: PromiseOrValue<BigNumberish>,
    _priceX96: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  chooseFundingRateGrowthX96(
    _side: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGasCostCalculateLiquidationPriceX96(
    _positionCache: IPoolPosition.PositionStruct,
    _side: PromiseOrValue<BigNumberish>,
    _fundingFee: PromiseOrValue<BigNumberish>,
    _liquidationFeeRate: PromiseOrValue<BigNumberish>,
    _tradingFeeRate: PromiseOrValue<BigNumberish>,
    _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGasCostCalculateMaintenanceMargin(
    _liquidity: PromiseOrValue<BigNumberish>,
    _size: PromiseOrValue<BigNumberish>,
    _indexPriceX96: PromiseOrValue<BigNumberish>,
    _liquidationFeeRate: PromiseOrValue<BigNumberish>,
    _tradingFeeRate: PromiseOrValue<BigNumberish>,
    _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGasCostCalculateUnrealizedPnL(
    _side: PromiseOrValue<BigNumberish>,
    _size: PromiseOrValue<BigNumberish>,
    _entryPriceX96: PromiseOrValue<BigNumberish>,
    _priceX96: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalLiquidityPosition(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      netSize: BigNumber;
      liquidationBufferNetSize: BigNumber;
      entryPriceX96: BigNumber;
      side: number;
      liquidity: BigNumber;
      realizedProfitGrowthX64: BigNumber;
    }
  >;

  globalPosition(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      longSize: BigNumber;
      shortSize: BigNumber;
      longFundingRateGrowthX96: BigNumber;
      shortFundingRateGrowthX96: BigNumber;
    }
  >;

  previousGlobalFundingRate(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      longFundingRateGrowthX96: BigNumber;
      shortFundingRateGrowthX96: BigNumber;
    }
  >;

  setGlobalLiquidityPosition(
    _liquidity: PromiseOrValue<BigNumberish>,
    _netSize: PromiseOrValue<BigNumberish>,
    _entryPriceX96: PromiseOrValue<BigNumberish>,
    _side: PromiseOrValue<BigNumberish>,
    _realizedProfitGrowthX64: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlobalPosition(
    _longSize: PromiseOrValue<BigNumberish>,
    _shortSize: PromiseOrValue<BigNumberish>,
    _longFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
    _shortFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPreviousGlobalFundingRate(
    _longFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
    _shortFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateFundingFee(
      _globalFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _positionFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _positionSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLiquidationFee(
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLiquidationPriceX96(
      _positionCache: IPoolPosition.PositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _fundingFee: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidationPriceX96: BigNumber;
        adjustedFundingFee: BigNumber;
      }
    >;

    calculateLiquidity(
      _size: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateMaintenanceMargin(
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateNextEntryPriceX96(
      _side: PromiseOrValue<BigNumberish>,
      _sizeBefore: PromiseOrValue<BigNumberish>,
      _entryPriceBeforeX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTradingFee(
      _size: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnrealizedPnL(
      _side: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chooseFundingRateGrowthX96(
      _side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostCalculateLiquidationPriceX96(
      _positionCache: IPoolPosition.PositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _fundingFee: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostCalculateMaintenanceMargin(
      _liquidity: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostCalculateUnrealizedPnL(
      _side: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    globalPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longSize: BigNumber;
        shortSize: BigNumber;
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;

    previousGlobalFundingRate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;

    setGlobalLiquidityPosition(
      _liquidity: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _realizedProfitGrowthX64: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalPosition(
      _longSize: PromiseOrValue<BigNumberish>,
      _shortSize: PromiseOrValue<BigNumberish>,
      _longFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _shortFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPreviousGlobalFundingRate(
      _longFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _shortFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calculateFundingFee(
      _globalFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _positionFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _positionSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLiquidationFee(
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLiquidationPriceX96(
      _positionCache: IPoolPosition.PositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _fundingFee: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLiquidity(
      _size: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateMaintenanceMargin(
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateNextEntryPriceX96(
      _side: PromiseOrValue<BigNumberish>,
      _sizeBefore: PromiseOrValue<BigNumberish>,
      _entryPriceBeforeX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTradingFee(
      _size: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnrealizedPnL(
      _side: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chooseFundingRateGrowthX96(
      _side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostCalculateLiquidationPriceX96(
      _positionCache: IPoolPosition.PositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _fundingFee: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostCalculateMaintenanceMargin(
      _liquidity: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostCalculateUnrealizedPnL(
      _side: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalLiquidityPosition(overrides?: CallOverrides): Promise<BigNumber>;

    globalPosition(overrides?: CallOverrides): Promise<BigNumber>;

    previousGlobalFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    setGlobalLiquidityPosition(
      _liquidity: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _realizedProfitGrowthX64: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlobalPosition(
      _longSize: PromiseOrValue<BigNumberish>,
      _shortSize: PromiseOrValue<BigNumberish>,
      _longFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _shortFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPreviousGlobalFundingRate(
      _longFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _shortFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateFundingFee(
      _globalFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _positionFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _positionSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLiquidationFee(
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLiquidationPriceX96(
      _positionCache: IPoolPosition.PositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _fundingFee: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLiquidity(
      _size: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateMaintenanceMargin(
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateNextEntryPriceX96(
      _side: PromiseOrValue<BigNumberish>,
      _sizeBefore: PromiseOrValue<BigNumberish>,
      _entryPriceBeforeX96: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTradingFee(
      _size: PromiseOrValue<BigNumberish>,
      _tradePriceX96: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateUnrealizedPnL(
      _side: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chooseFundingRateGrowthX96(
      _side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostCalculateLiquidationPriceX96(
      _positionCache: IPoolPosition.PositionStruct,
      _side: PromiseOrValue<BigNumberish>,
      _fundingFee: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostCalculateMaintenanceMargin(
      _liquidity: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _indexPriceX96: PromiseOrValue<BigNumberish>,
      _liquidationFeeRate: PromiseOrValue<BigNumberish>,
      _tradingFeeRate: PromiseOrValue<BigNumberish>,
      _liquidationExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostCalculateUnrealizedPnL(
      _side: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _priceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousGlobalFundingRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGlobalLiquidityPosition(
      _liquidity: PromiseOrValue<BigNumberish>,
      _netSize: PromiseOrValue<BigNumberish>,
      _entryPriceX96: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      _realizedProfitGrowthX64: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalPosition(
      _longSize: PromiseOrValue<BigNumberish>,
      _shortSize: PromiseOrValue<BigNumberish>,
      _longFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _shortFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPreviousGlobalFundingRate(
      _longFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      _shortFundingRateGrowthX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
