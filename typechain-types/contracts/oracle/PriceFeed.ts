/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPriceFeed {
  export type TokenPriceStruct = {
    token: PromiseOrValue<string>;
    priceX96: PromiseOrValue<BigNumberish>;
  };

  export type TokenPriceStructOutput = [string, BigNumber] & {
    token: string;
    priceX96: BigNumber;
  };
}

export interface PriceFeedInterface extends utils.Interface {
  functions: {
    "DELTA_PRECISION()": FunctionFragment;
    "GRACE_PERIOD_TIME()": FunctionFragment;
    "TOKEN_DECIMALS()": FunctionFragment;
    "USD_DECIMALS()": FunctionFragment;
    "acceptGov()": FunctionFragment;
    "calculatePriceX96s((address,uint160)[])": FunctionFragment;
    "changeGov(address)": FunctionFragment;
    "getMaxPriceX96(address)": FunctionFragment;
    "getMinPriceX96(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "isUpdater(address)": FunctionFragment;
    "latestPrices(address)": FunctionFragment;
    "pendingGov()": FunctionFragment;
    "sequencerUptimeFeed()": FunctionFragment;
    "setCumulativeRoundDuration(uint32)": FunctionFragment;
    "setMaxCumulativeDeltaDiffs(address,uint64)": FunctionFragment;
    "setMaxDeviationRatio(uint32)": FunctionFragment;
    "setPriceX96s((address,uint160)[],uint64)": FunctionFragment;
    "setRefHeartbeatDuration(address,uint32)": FunctionFragment;
    "setRefPriceExtraSample(uint32)": FunctionFragment;
    "setRefPriceFeed(address,address)": FunctionFragment;
    "setSequencerUptimeFeed(address)": FunctionFragment;
    "setStableTokenPriceFeed(address,uint32)": FunctionFragment;
    "setUpdateTxTimeout(uint32)": FunctionFragment;
    "setUpdater(address,bool)": FunctionFragment;
    "slot()": FunctionFragment;
    "stableTokenPriceFeed()": FunctionFragment;
    "stableTokenPriceFeedHeartBeatDuration()": FunctionFragment;
    "tokenConfigs(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DELTA_PRECISION"
      | "GRACE_PERIOD_TIME"
      | "TOKEN_DECIMALS"
      | "USD_DECIMALS"
      | "acceptGov"
      | "calculatePriceX96s"
      | "changeGov"
      | "getMaxPriceX96"
      | "getMinPriceX96"
      | "gov"
      | "isUpdater"
      | "latestPrices"
      | "pendingGov"
      | "sequencerUptimeFeed"
      | "setCumulativeRoundDuration"
      | "setMaxCumulativeDeltaDiffs"
      | "setMaxDeviationRatio"
      | "setPriceX96s"
      | "setRefHeartbeatDuration"
      | "setRefPriceExtraSample"
      | "setRefPriceFeed"
      | "setSequencerUptimeFeed"
      | "setStableTokenPriceFeed"
      | "setUpdateTxTimeout"
      | "setUpdater"
      | "slot"
      | "stableTokenPriceFeed"
      | "stableTokenPriceFeedHeartBeatDuration"
      | "tokenConfigs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DELTA_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USD_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "acceptGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculatePriceX96s",
    values: [IPriceFeed.TokenPriceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPriceX96",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinPriceX96",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isUpdater",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPrices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sequencerUptimeFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCumulativeRoundDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDeviationRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceX96s",
    values: [IPriceFeed.TokenPriceStruct[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefHeartbeatDuration",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefPriceExtraSample",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefPriceFeed",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSequencerUptimeFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableTokenPriceFeed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateTxTimeout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdater",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "slot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stableTokenPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableTokenPriceFeedHeartBeatDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenConfigs",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELTA_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USD_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePriceX96s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sequencerUptimeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCumulativeRoundDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDeviationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceX96s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefHeartbeatDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefPriceExtraSample",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSequencerUptimeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableTokenPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateTxTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUpdater", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stableTokenPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableTokenPriceFeedHeartBeatDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenConfigs",
    data: BytesLike
  ): Result;

  events: {
    "ChangeGovStarted(address,address)": EventFragment;
    "GovChanged(address,address)": EventFragment;
    "MaxCumulativeDeltaDiffExceeded(address,uint160,uint160,uint64,uint64)": EventFragment;
    "PriceUpdated(address,uint160,uint160,uint160)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeGovStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxCumulativeDeltaDiffExceeded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
}

export interface ChangeGovStartedEventObject {
  previousGov: string;
  newGov: string;
}
export type ChangeGovStartedEvent = TypedEvent<
  [string, string],
  ChangeGovStartedEventObject
>;

export type ChangeGovStartedEventFilter =
  TypedEventFilter<ChangeGovStartedEvent>;

export interface GovChangedEventObject {
  previousGov: string;
  newGov: string;
}
export type GovChangedEvent = TypedEvent<
  [string, string],
  GovChangedEventObject
>;

export type GovChangedEventFilter = TypedEventFilter<GovChangedEvent>;

export interface MaxCumulativeDeltaDiffExceededEventObject {
  token: string;
  priceX96: BigNumber;
  refPriceX96: BigNumber;
  cumulativeDelta: BigNumber;
  cumulativeRefDelta: BigNumber;
}
export type MaxCumulativeDeltaDiffExceededEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  MaxCumulativeDeltaDiffExceededEventObject
>;

export type MaxCumulativeDeltaDiffExceededEventFilter =
  TypedEventFilter<MaxCumulativeDeltaDiffExceededEvent>;

export interface PriceUpdatedEventObject {
  token: string;
  priceX96: BigNumber;
  minPriceX96: BigNumber;
  maxPriceX96: BigNumber;
}
export type PriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PriceUpdatedEventObject
>;

export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;

export interface PriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELTA_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    GRACE_PERIOD_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKEN_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    USD_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculatePriceX96s(
      _tokenPrices: IPriceFeed.TokenPriceStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        minPriceX96s: BigNumber[];
        maxPriceX96s: BigNumber[];
      }
    >;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMaxPriceX96(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceX96: BigNumber }>;

    getMinPriceX96(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceX96: BigNumber }>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    isUpdater(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { active: boolean }>;

    latestPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        updateTimestamp: BigNumber;
        maxPriceX96: BigNumber;
        minPriceX96: BigNumber;
        updateBlockTimestamp: BigNumber;
      }
    >;

    pendingGov(overrides?: CallOverrides): Promise<[string]>;

    sequencerUptimeFeed(overrides?: CallOverrides): Promise<[string]>;

    setCumulativeRoundDuration(
      _cumulativeRoundDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxCumulativeDeltaDiffs(
      _token: PromiseOrValue<string>,
      _maxCumulativeDeltaDiff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxDeviationRatio(
      _maxDeviationRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceX96s(
      _tokenPrices: IPriceFeed.TokenPriceStruct[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRefHeartbeatDuration(
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRefPriceExtraSample(
      _refPriceExtraSample: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRefPriceFeed(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSequencerUptimeFeed(
      _sequencerUptimeFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStableTokenPriceFeed(
      _stableTokenPriceFeed: PromiseOrValue<string>,
      _stableTokenPriceFeedHeartBeatDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpdateTxTimeout(
      _updateTxTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slot(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        maxDeviationRatio: number;
        cumulativeRoundDuration: number;
        refPriceExtraSample: number;
        updateTxTimeout: number;
      }
    >;

    stableTokenPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    stableTokenPriceFeedHeartBeatDuration(
      overrides?: CallOverrides
    ): Promise<[number]>;

    tokenConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        refPriceFeed: string;
        refHeartbeatDuration: number;
        maxCumulativeDeltaDiff: BigNumber;
      }
    >;
  };

  DELTA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  GRACE_PERIOD_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  TOKEN_DECIMALS(overrides?: CallOverrides): Promise<number>;

  USD_DECIMALS(overrides?: CallOverrides): Promise<number>;

  acceptGov(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculatePriceX96s(
    _tokenPrices: IPriceFeed.TokenPriceStruct[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      minPriceX96s: BigNumber[];
      maxPriceX96s: BigNumber[];
    }
  >;

  changeGov(
    _newGov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMaxPriceX96(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinPriceX96(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  isUpdater(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestPrices(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      updateTimestamp: BigNumber;
      maxPriceX96: BigNumber;
      minPriceX96: BigNumber;
      updateBlockTimestamp: BigNumber;
    }
  >;

  pendingGov(overrides?: CallOverrides): Promise<string>;

  sequencerUptimeFeed(overrides?: CallOverrides): Promise<string>;

  setCumulativeRoundDuration(
    _cumulativeRoundDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxCumulativeDeltaDiffs(
    _token: PromiseOrValue<string>,
    _maxCumulativeDeltaDiff: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxDeviationRatio(
    _maxDeviationRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceX96s(
    _tokenPrices: IPriceFeed.TokenPriceStruct[],
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRefHeartbeatDuration(
    _token: PromiseOrValue<string>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRefPriceExtraSample(
    _refPriceExtraSample: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRefPriceFeed(
    _token: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSequencerUptimeFeed(
    _sequencerUptimeFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStableTokenPriceFeed(
    _stableTokenPriceFeed: PromiseOrValue<string>,
    _stableTokenPriceFeedHeartBeatDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpdateTxTimeout(
    _updateTxTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpdater(
    _account: PromiseOrValue<string>,
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slot(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      maxDeviationRatio: number;
      cumulativeRoundDuration: number;
      refPriceExtraSample: number;
      updateTxTimeout: number;
    }
  >;

  stableTokenPriceFeed(overrides?: CallOverrides): Promise<string>;

  stableTokenPriceFeedHeartBeatDuration(
    overrides?: CallOverrides
  ): Promise<number>;

  tokenConfigs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber] & {
      refPriceFeed: string;
      refHeartbeatDuration: number;
      maxCumulativeDeltaDiff: BigNumber;
    }
  >;

  callStatic: {
    DELTA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_DECIMALS(overrides?: CallOverrides): Promise<number>;

    USD_DECIMALS(overrides?: CallOverrides): Promise<number>;

    acceptGov(overrides?: CallOverrides): Promise<void>;

    calculatePriceX96s(
      _tokenPrices: IPriceFeed.TokenPriceStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        minPriceX96s: BigNumber[];
        maxPriceX96s: BigNumber[];
      }
    >;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMaxPriceX96(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinPriceX96(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    isUpdater(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        updateTimestamp: BigNumber;
        maxPriceX96: BigNumber;
        minPriceX96: BigNumber;
        updateBlockTimestamp: BigNumber;
      }
    >;

    pendingGov(overrides?: CallOverrides): Promise<string>;

    sequencerUptimeFeed(overrides?: CallOverrides): Promise<string>;

    setCumulativeRoundDuration(
      _cumulativeRoundDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCumulativeDeltaDiffs(
      _token: PromiseOrValue<string>,
      _maxCumulativeDeltaDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDeviationRatio(
      _maxDeviationRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceX96s(
      _tokenPrices: IPriceFeed.TokenPriceStruct[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRefHeartbeatDuration(
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRefPriceExtraSample(
      _refPriceExtraSample: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRefPriceFeed(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSequencerUptimeFeed(
      _sequencerUptimeFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStableTokenPriceFeed(
      _stableTokenPriceFeed: PromiseOrValue<string>,
      _stableTokenPriceFeedHeartBeatDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdateTxTimeout(
      _updateTxTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    slot(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        maxDeviationRatio: number;
        cumulativeRoundDuration: number;
        refPriceExtraSample: number;
        updateTxTimeout: number;
      }
    >;

    stableTokenPriceFeed(overrides?: CallOverrides): Promise<string>;

    stableTokenPriceFeedHeartBeatDuration(
      overrides?: CallOverrides
    ): Promise<number>;

    tokenConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        refPriceFeed: string;
        refHeartbeatDuration: number;
        maxCumulativeDeltaDiff: BigNumber;
      }
    >;
  };

  filters: {
    "ChangeGovStarted(address,address)"(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): ChangeGovStartedEventFilter;
    ChangeGovStarted(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): ChangeGovStartedEventFilter;

    "GovChanged(address,address)"(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): GovChangedEventFilter;
    GovChanged(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): GovChangedEventFilter;

    "MaxCumulativeDeltaDiffExceeded(address,uint160,uint160,uint64,uint64)"(
      token?: null,
      priceX96?: null,
      refPriceX96?: null,
      cumulativeDelta?: null,
      cumulativeRefDelta?: null
    ): MaxCumulativeDeltaDiffExceededEventFilter;
    MaxCumulativeDeltaDiffExceeded(
      token?: null,
      priceX96?: null,
      refPriceX96?: null,
      cumulativeDelta?: null,
      cumulativeRefDelta?: null
    ): MaxCumulativeDeltaDiffExceededEventFilter;

    "PriceUpdated(address,uint160,uint160,uint160)"(
      token?: PromiseOrValue<string> | null,
      priceX96?: null,
      minPriceX96?: null,
      maxPriceX96?: null
    ): PriceUpdatedEventFilter;
    PriceUpdated(
      token?: PromiseOrValue<string> | null,
      priceX96?: null,
      minPriceX96?: null,
      maxPriceX96?: null
    ): PriceUpdatedEventFilter;
  };

  estimateGas: {
    DELTA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    USD_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculatePriceX96s(
      _tokenPrices: IPriceFeed.TokenPriceStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMaxPriceX96(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinPriceX96(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    isUpdater(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingGov(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerUptimeFeed(overrides?: CallOverrides): Promise<BigNumber>;

    setCumulativeRoundDuration(
      _cumulativeRoundDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxCumulativeDeltaDiffs(
      _token: PromiseOrValue<string>,
      _maxCumulativeDeltaDiff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxDeviationRatio(
      _maxDeviationRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceX96s(
      _tokenPrices: IPriceFeed.TokenPriceStruct[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRefHeartbeatDuration(
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRefPriceExtraSample(
      _refPriceExtraSample: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRefPriceFeed(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSequencerUptimeFeed(
      _sequencerUptimeFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStableTokenPriceFeed(
      _stableTokenPriceFeed: PromiseOrValue<string>,
      _stableTokenPriceFeedHeartBeatDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpdateTxTimeout(
      _updateTxTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slot(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokenPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokenPriceFeedHeartBeatDuration(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELTA_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GRACE_PERIOD_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USD_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculatePriceX96s(
      _tokenPrices: IPriceFeed.TokenPriceStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMaxPriceX96(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinPriceX96(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUpdater(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequencerUptimeFeed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCumulativeRoundDuration(
      _cumulativeRoundDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCumulativeDeltaDiffs(
      _token: PromiseOrValue<string>,
      _maxCumulativeDeltaDiff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDeviationRatio(
      _maxDeviationRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceX96s(
      _tokenPrices: IPriceFeed.TokenPriceStruct[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRefHeartbeatDuration(
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRefPriceExtraSample(
      _refPriceExtraSample: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRefPriceFeed(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSequencerUptimeFeed(
      _sequencerUptimeFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStableTokenPriceFeed(
      _stableTokenPriceFeed: PromiseOrValue<string>,
      _stableTokenPriceFeedHeartBeatDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpdateTxTimeout(
      _updateTxTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableTokenPriceFeed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableTokenPriceFeedHeartBeatDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
