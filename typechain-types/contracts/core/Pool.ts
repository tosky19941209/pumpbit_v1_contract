/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPool {
  export type PriceVertexStruct = {
    size: PromiseOrValue<BigNumberish>;
    premiumRateX96: PromiseOrValue<BigNumberish>;
  };

  export type PriceVertexStructOutput = [BigNumber, BigNumber] & {
    size: BigNumber;
    premiumRateX96: BigNumber;
  };
}

export interface PoolInterface extends utils.Interface {
  functions: {
    "adjustLiquidityPositionMargin(uint96,int128,address)": FunctionFragment;
    "changePriceVertex(uint8,uint8)": FunctionFragment;
    "closeLiquidityPosition(uint96,address)": FunctionFragment;
    "collectProtocolFee()": FunctionFragment;
    "collectReferralFee(uint256,address)": FunctionFragment;
    "decreasePosition(address,uint8,uint128,uint128,address)": FunctionFragment;
    "decreaseRiskBufferFundPosition(address,uint128,address)": FunctionFragment;
    "globalFundingRateSample()": FunctionFragment;
    "globalLiquidityPosition()": FunctionFragment;
    "globalPosition()": FunctionFragment;
    "globalRiskBufferFund()": FunctionFragment;
    "globalUnrealizedLossMetrics()": FunctionFragment;
    "govUseRiskBufferFund(address,uint128)": FunctionFragment;
    "increasePosition(address,uint8,uint128,uint128)": FunctionFragment;
    "increaseRiskBufferFundPosition(address,uint128)": FunctionFragment;
    "liquidateLiquidityPosition(uint96,address)": FunctionFragment;
    "liquidatePosition(address,uint8,address)": FunctionFragment;
    "liquidityPositionAccount(uint96)": FunctionFragment;
    "liquidityPositions(uint96)": FunctionFragment;
    "marketPriceX96(uint8)": FunctionFragment;
    "onChangeTokenConfig()": FunctionFragment;
    "openLiquidityPosition(address,uint128,uint128)": FunctionFragment;
    "positions(address,uint8)": FunctionFragment;
    "previousGlobalFundingRate()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "priceState()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "referralFees(uint256)": FunctionFragment;
    "riskBufferFundPositions(address)": FunctionFragment;
    "sampleAndAdjustFundingRate()": FunctionFragment;
    "token()": FunctionFragment;
    "usdBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustLiquidityPositionMargin"
      | "changePriceVertex"
      | "closeLiquidityPosition"
      | "collectProtocolFee"
      | "collectReferralFee"
      | "decreasePosition"
      | "decreaseRiskBufferFundPosition"
      | "globalFundingRateSample"
      | "globalLiquidityPosition"
      | "globalPosition"
      | "globalRiskBufferFund"
      | "globalUnrealizedLossMetrics"
      | "govUseRiskBufferFund"
      | "increasePosition"
      | "increaseRiskBufferFundPosition"
      | "liquidateLiquidityPosition"
      | "liquidatePosition"
      | "liquidityPositionAccount"
      | "liquidityPositions"
      | "marketPriceX96"
      | "onChangeTokenConfig"
      | "openLiquidityPosition"
      | "positions"
      | "previousGlobalFundingRate"
      | "priceFeed"
      | "priceState"
      | "protocolFee"
      | "referralFees"
      | "riskBufferFundPositions"
      | "sampleAndAdjustFundingRate"
      | "token"
      | "usdBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjustLiquidityPositionMargin",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changePriceVertex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLiquidityPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectReferralFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseRiskBufferFundPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "globalFundingRateSample",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalLiquidityPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalRiskBufferFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalUnrealizedLossMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govUseRiskBufferFund",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseRiskBufferFundPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLiquidityPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPositionAccount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPositions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPriceX96",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onChangeTokenConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openLiquidityPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previousGlobalFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "riskBufferFundPositions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sampleAndAdjustFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustLiquidityPositionMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePriceVertex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectReferralFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalFundingRateSample",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalRiskBufferFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUnrealizedLossMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govUseRiskBufferFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPositionAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onChangeTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousGlobalFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riskBufferFundPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sampleAndAdjustFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdBalance", data: BytesLike): Result;

  events: {
    "FundingRateGrowthAdjusted(int256,int192,int192,uint64)": EventFragment;
    "GlobalLiquidityPositionNetPositionAdjusted(uint128,uint128,uint160,uint8)": EventFragment;
    "GlobalLiquidityPositionRealizedProfitGrowthChanged(uint256)": EventFragment;
    "GlobalRiskBufferFundChanged(int256)": EventFragment;
    "GlobalRiskBufferFundGovUsed(address,uint128)": EventFragment;
    "GlobalUnrealizedLossMetricsChanged(uint64,uint128,uint256)": EventFragment;
    "LiquidityPositionClosed(uint96,uint128,uint128,uint256,address)": EventFragment;
    "LiquidityPositionLiquidated(address,uint96,uint256,uint256,uint64,address)": EventFragment;
    "LiquidityPositionMarginAdjusted(uint96,int128,uint128,uint256,address)": EventFragment;
    "LiquidityPositionOpened(address,uint96,uint128,uint128,uint256,uint256)": EventFragment;
    "PositionDecreased(address,uint8,uint128,uint128,uint128,uint160,int256,int256,uint128,address)": EventFragment;
    "PositionIncreased(address,uint8,uint128,uint128,uint128,uint160,uint160,int256,uint128)": EventFragment;
    "PositionLiquidated(address,address,uint8,uint160,uint160,int256,uint128,uint128,uint64,address)": EventFragment;
    "PriceVertexChanged(uint8,uint128,uint128)": EventFragment;
    "ProtocolFeeCollected(uint128)": EventFragment;
    "ProtocolFeeIncreased(uint128)": EventFragment;
    "ReferralFeeCollected(uint256,address,uint256)": EventFragment;
    "ReferralFeeIncreased(address,uint256,uint128,uint256,uint128)": EventFragment;
    "RiskBufferFundPositionDecreased(address,uint128,address)": EventFragment;
    "RiskBufferFundPositionIncreased(address,uint128,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundingRateGrowthAdjusted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalLiquidityPositionNetPositionAdjusted"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalLiquidityPositionRealizedProfitGrowthChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalRiskBufferFundChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalRiskBufferFundGovUsed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalUnrealizedLossMetricsChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionClosed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPositionLiquidated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPositionMarginAdjusted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceVertexChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralFeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralFeeIncreased"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RiskBufferFundPositionDecreased"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RiskBufferFundPositionIncreased"
  ): EventFragment;
}

export interface FundingRateGrowthAdjustedEventObject {
  fundingRateDeltaX96: BigNumber;
  longFundingRateGrowthAfterX96: BigNumber;
  shortFundingRateGrowthAfterX96: BigNumber;
  lastAdjustFundingRateTime: BigNumber;
}
export type FundingRateGrowthAdjustedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  FundingRateGrowthAdjustedEventObject
>;

export type FundingRateGrowthAdjustedEventFilter =
  TypedEventFilter<FundingRateGrowthAdjustedEvent>;

export interface GlobalLiquidityPositionNetPositionAdjustedEventObject {
  netSizeAfter: BigNumber;
  liquidationBufferNetSizeAfter: BigNumber;
  entryPriceAfterX96: BigNumber;
  sideAfter: number;
}
export type GlobalLiquidityPositionNetPositionAdjustedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number],
  GlobalLiquidityPositionNetPositionAdjustedEventObject
>;

export type GlobalLiquidityPositionNetPositionAdjustedEventFilter =
  TypedEventFilter<GlobalLiquidityPositionNetPositionAdjustedEvent>;

export interface GlobalLiquidityPositionRealizedProfitGrowthChangedEventObject {
  realizedProfitGrowthAfterX64: BigNumber;
}
export type GlobalLiquidityPositionRealizedProfitGrowthChangedEvent =
  TypedEvent<
    [BigNumber],
    GlobalLiquidityPositionRealizedProfitGrowthChangedEventObject
  >;

export type GlobalLiquidityPositionRealizedProfitGrowthChangedEventFilter =
  TypedEventFilter<GlobalLiquidityPositionRealizedProfitGrowthChangedEvent>;

export interface GlobalRiskBufferFundChangedEventObject {
  riskBufferFundAfter: BigNumber;
}
export type GlobalRiskBufferFundChangedEvent = TypedEvent<
  [BigNumber],
  GlobalRiskBufferFundChangedEventObject
>;

export type GlobalRiskBufferFundChangedEventFilter =
  TypedEventFilter<GlobalRiskBufferFundChangedEvent>;

export interface GlobalRiskBufferFundGovUsedEventObject {
  receiver: string;
  riskBufferFundDelta: BigNumber;
}
export type GlobalRiskBufferFundGovUsedEvent = TypedEvent<
  [string, BigNumber],
  GlobalRiskBufferFundGovUsedEventObject
>;

export type GlobalRiskBufferFundGovUsedEventFilter =
  TypedEventFilter<GlobalRiskBufferFundGovUsedEvent>;

export interface GlobalUnrealizedLossMetricsChangedEventObject {
  lastZeroLossTimeAfter: BigNumber;
  liquidityAfter: BigNumber;
  liquidityTimesUnrealizedLossAfter: BigNumber;
}
export type GlobalUnrealizedLossMetricsChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  GlobalUnrealizedLossMetricsChangedEventObject
>;

export type GlobalUnrealizedLossMetricsChangedEventFilter =
  TypedEventFilter<GlobalUnrealizedLossMetricsChangedEvent>;

export interface LiquidityPositionClosedEventObject {
  positionID: BigNumber;
  margin: BigNumber;
  unrealizedLoss: BigNumber;
  realizedProfit: BigNumber;
  receiver: string;
}
export type LiquidityPositionClosedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  LiquidityPositionClosedEventObject
>;

export type LiquidityPositionClosedEventFilter =
  TypedEventFilter<LiquidityPositionClosedEvent>;

export interface LiquidityPositionLiquidatedEventObject {
  liquidator: string;
  positionID: BigNumber;
  realizedProfit: BigNumber;
  riskBufferFundDelta: BigNumber;
  liquidationExecutionFee: BigNumber;
  feeReceiver: string;
}
export type LiquidityPositionLiquidatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
  LiquidityPositionLiquidatedEventObject
>;

export type LiquidityPositionLiquidatedEventFilter =
  TypedEventFilter<LiquidityPositionLiquidatedEvent>;

export interface LiquidityPositionMarginAdjustedEventObject {
  positionID: BigNumber;
  marginDelta: BigNumber;
  marginAfter: BigNumber;
  entryRealizedProfitGrowthAfterX64: BigNumber;
  receiver: string;
}
export type LiquidityPositionMarginAdjustedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  LiquidityPositionMarginAdjustedEventObject
>;

export type LiquidityPositionMarginAdjustedEventFilter =
  TypedEventFilter<LiquidityPositionMarginAdjustedEvent>;

export interface LiquidityPositionOpenedEventObject {
  account: string;
  positionID: BigNumber;
  margin: BigNumber;
  liquidity: BigNumber;
  entryUnrealizedLoss: BigNumber;
  realizedProfitGrowthX64: BigNumber;
}
export type LiquidityPositionOpenedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidityPositionOpenedEventObject
>;

export type LiquidityPositionOpenedEventFilter =
  TypedEventFilter<LiquidityPositionOpenedEvent>;

export interface PositionDecreasedEventObject {
  account: string;
  side: number;
  marginDelta: BigNumber;
  marginAfter: BigNumber;
  sizeAfter: BigNumber;
  tradePriceX96: BigNumber;
  realizedPnLDelta: BigNumber;
  fundingFee: BigNumber;
  tradingFee: BigNumber;
  receiver: string;
}
export type PositionDecreasedEvent = TypedEvent<
  [
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  PositionDecreasedEventObject
>;

export type PositionDecreasedEventFilter =
  TypedEventFilter<PositionDecreasedEvent>;

export interface PositionIncreasedEventObject {
  account: string;
  side: number;
  marginDelta: BigNumber;
  marginAfter: BigNumber;
  sizeAfter: BigNumber;
  tradePriceX96: BigNumber;
  entryPriceAfterX96: BigNumber;
  fundingFee: BigNumber;
  tradingFee: BigNumber;
}
export type PositionIncreasedEvent = TypedEvent<
  [
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PositionIncreasedEventObject
>;

export type PositionIncreasedEventFilter =
  TypedEventFilter<PositionIncreasedEvent>;

export interface PositionLiquidatedEventObject {
  liquidator: string;
  account: string;
  side: number;
  indexPriceX96: BigNumber;
  liquidationPriceX96: BigNumber;
  fundingFee: BigNumber;
  tradingFee: BigNumber;
  liquidationFee: BigNumber;
  liquidationExecutionFee: BigNumber;
  feeReceiver: string;
}
export type PositionLiquidatedEvent = TypedEvent<
  [
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  PositionLiquidatedEventObject
>;

export type PositionLiquidatedEventFilter =
  TypedEventFilter<PositionLiquidatedEvent>;

export interface PriceVertexChangedEventObject {
  index: number;
  sizeAfter: BigNumber;
  premiumRateAfterX96: BigNumber;
}
export type PriceVertexChangedEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  PriceVertexChangedEventObject
>;

export type PriceVertexChangedEventFilter =
  TypedEventFilter<PriceVertexChangedEvent>;

export interface ProtocolFeeCollectedEventObject {
  amount: BigNumber;
}
export type ProtocolFeeCollectedEvent = TypedEvent<
  [BigNumber],
  ProtocolFeeCollectedEventObject
>;

export type ProtocolFeeCollectedEventFilter =
  TypedEventFilter<ProtocolFeeCollectedEvent>;

export interface ProtocolFeeIncreasedEventObject {
  amount: BigNumber;
}
export type ProtocolFeeIncreasedEvent = TypedEvent<
  [BigNumber],
  ProtocolFeeIncreasedEventObject
>;

export type ProtocolFeeIncreasedEventFilter =
  TypedEventFilter<ProtocolFeeIncreasedEvent>;

export interface ReferralFeeCollectedEventObject {
  referralToken: BigNumber;
  receiver: string;
  amount: BigNumber;
}
export type ReferralFeeCollectedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ReferralFeeCollectedEventObject
>;

export type ReferralFeeCollectedEventFilter =
  TypedEventFilter<ReferralFeeCollectedEvent>;

export interface ReferralFeeIncreasedEventObject {
  referee: string;
  referralToken: BigNumber;
  referralFee: BigNumber;
  referralParentToken: BigNumber;
  referralParentFee: BigNumber;
}
export type ReferralFeeIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ReferralFeeIncreasedEventObject
>;

export type ReferralFeeIncreasedEventFilter =
  TypedEventFilter<ReferralFeeIncreasedEvent>;

export interface RiskBufferFundPositionDecreasedEventObject {
  account: string;
  liquidityAfter: BigNumber;
  receiver: string;
}
export type RiskBufferFundPositionDecreasedEvent = TypedEvent<
  [string, BigNumber, string],
  RiskBufferFundPositionDecreasedEventObject
>;

export type RiskBufferFundPositionDecreasedEventFilter =
  TypedEventFilter<RiskBufferFundPositionDecreasedEvent>;

export interface RiskBufferFundPositionIncreasedEventObject {
  account: string;
  liquidityAfter: BigNumber;
  unlockTimeAfter: BigNumber;
}
export type RiskBufferFundPositionIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RiskBufferFundPositionIncreasedEventObject
>;

export type RiskBufferFundPositionIncreasedEventFilter =
  TypedEventFilter<RiskBufferFundPositionIncreasedEvent>;

export interface Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustLiquidityPositionMargin(
      _positionID: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changePriceVertex(
      _startExclusive: PromiseOrValue<BigNumberish>,
      _endInclusive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeLiquidityPosition(
      _positionID: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectProtocolFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectReferralFee(
      _referralToken: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalFundingRateSample(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        lastAdjustFundingRateTime: BigNumber;
        sampleCount: number;
        cumulativePremiumRateX96: BigNumber;
      }
    >;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    globalPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longSize: BigNumber;
        shortSize: BigNumber;
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        riskBufferFund: BigNumber;
        liquidity: BigNumber;
      }
    >;

    globalUnrealizedLossMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastZeroLossTime: BigNumber;
        liquidity: BigNumber;
        liquidityTimesUnrealizedLoss: BigNumber;
      }
    >;

    govUseRiskBufferFund(
      _receiver: PromiseOrValue<string>,
      _riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidateLiquidityPosition(
      _positionID: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidityPositionAccount(
      _positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { account: string }>;

    liquidityPositions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        margin: BigNumber;
        liquidity: BigNumber;
        entryUnrealizedLoss: BigNumber;
        entryRealizedProfitGrowthX64: BigNumber;
        entryTime: BigNumber;
        account: string;
      }
    >;

    marketPriceX96(
      _side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _marketPriceX96: BigNumber }>;

    onChangeTokenConfig(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openLiquidityPosition(
      _account: PromiseOrValue<string>,
      _margin: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    positions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        size: BigNumber;
        entryPriceX96: BigNumber;
        entryFundingRateGrowthX96: BigNumber;
      }
    >;

    previousGlobalFundingRate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    priceState(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        IPool.PriceVertexStructOutput[],
        number,
        number,
        number,
        BigNumber[]
      ] & {
        maxPriceImpactLiquidity: BigNumber;
        premiumRateX96: BigNumber;
        priceVertices: IPool.PriceVertexStructOutput[];
        pendingVertexIndex: number;
        liquidationVertexIndex: number;
        currentVertexIndex: number;
        liquidationBufferNetSizes: BigNumber[];
      }
    >;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    referralFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    riskBufferFundPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { liquidity: BigNumber; unlockTime: BigNumber }
    >;

    sampleAndAdjustFundingRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    usdBalance(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  adjustLiquidityPositionMargin(
    _positionID: PromiseOrValue<BigNumberish>,
    _marginDelta: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changePriceVertex(
    _startExclusive: PromiseOrValue<BigNumberish>,
    _endInclusive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeLiquidityPosition(
    _positionID: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectProtocolFee(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectReferralFee(
    _referralToken: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreasePosition(
    _account: PromiseOrValue<string>,
    _side: PromiseOrValue<BigNumberish>,
    _marginDelta: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseRiskBufferFundPosition(
    _account: PromiseOrValue<string>,
    _liquidityDelta: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalFundingRateSample(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber] & {
      lastAdjustFundingRateTime: BigNumber;
      sampleCount: number;
      cumulativePremiumRateX96: BigNumber;
    }
  >;

  globalLiquidityPosition(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      netSize: BigNumber;
      liquidationBufferNetSize: BigNumber;
      entryPriceX96: BigNumber;
      side: number;
      liquidity: BigNumber;
      realizedProfitGrowthX64: BigNumber;
    }
  >;

  globalPosition(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      longSize: BigNumber;
      shortSize: BigNumber;
      longFundingRateGrowthX96: BigNumber;
      shortFundingRateGrowthX96: BigNumber;
    }
  >;

  globalRiskBufferFund(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { riskBufferFund: BigNumber; liquidity: BigNumber }
  >;

  globalUnrealizedLossMetrics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      lastZeroLossTime: BigNumber;
      liquidity: BigNumber;
      liquidityTimesUnrealizedLoss: BigNumber;
    }
  >;

  govUseRiskBufferFund(
    _receiver: PromiseOrValue<string>,
    _riskBufferFundDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increasePosition(
    _account: PromiseOrValue<string>,
    _side: PromiseOrValue<BigNumberish>,
    _marginDelta: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseRiskBufferFundPosition(
    _account: PromiseOrValue<string>,
    _liquidityDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidateLiquidityPosition(
    _positionID: PromiseOrValue<BigNumberish>,
    _feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidatePosition(
    _account: PromiseOrValue<string>,
    _side: PromiseOrValue<BigNumberish>,
    _feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidityPositionAccount(
    _positionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  liquidityPositions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      margin: BigNumber;
      liquidity: BigNumber;
      entryUnrealizedLoss: BigNumber;
      entryRealizedProfitGrowthX64: BigNumber;
      entryTime: BigNumber;
      account: string;
    }
  >;

  marketPriceX96(
    _side: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onChangeTokenConfig(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openLiquidityPosition(
    _account: PromiseOrValue<string>,
    _margin: PromiseOrValue<BigNumberish>,
    _liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  positions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      margin: BigNumber;
      size: BigNumber;
      entryPriceX96: BigNumber;
      entryFundingRateGrowthX96: BigNumber;
    }
  >;

  previousGlobalFundingRate(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      longFundingRateGrowthX96: BigNumber;
      shortFundingRateGrowthX96: BigNumber;
    }
  >;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  priceState(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      IPool.PriceVertexStructOutput[],
      number,
      number,
      number,
      BigNumber[]
    ] & {
      maxPriceImpactLiquidity: BigNumber;
      premiumRateX96: BigNumber;
      priceVertices: IPool.PriceVertexStructOutput[];
      pendingVertexIndex: number;
      liquidationVertexIndex: number;
      currentVertexIndex: number;
      liquidationBufferNetSizes: BigNumber[];
    }
  >;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  referralFees(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  riskBufferFundPositions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { liquidity: BigNumber; unlockTime: BigNumber }
  >;

  sampleAndAdjustFundingRate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  usdBalance(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    adjustLiquidityPositionMargin(
      _positionID: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changePriceVertex(
      _startExclusive: PromiseOrValue<BigNumberish>,
      _endInclusive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeLiquidityPosition(
      _positionID: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectProtocolFee(overrides?: CallOverrides): Promise<void>;

    collectReferralFee(
      _referralToken: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    globalFundingRateSample(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        lastAdjustFundingRateTime: BigNumber;
        sampleCount: number;
        cumulativePremiumRateX96: BigNumber;
      }
    >;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    globalPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longSize: BigNumber;
        shortSize: BigNumber;
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        riskBufferFund: BigNumber;
        liquidity: BigNumber;
      }
    >;

    globalUnrealizedLossMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastZeroLossTime: BigNumber;
        liquidity: BigNumber;
        liquidityTimesUnrealizedLoss: BigNumber;
      }
    >;

    govUseRiskBufferFund(
      _receiver: PromiseOrValue<string>,
      _riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateLiquidityPosition(
      _positionID: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityPositionAccount(
      _positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    liquidityPositions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        margin: BigNumber;
        liquidity: BigNumber;
        entryUnrealizedLoss: BigNumber;
        entryRealizedProfitGrowthX64: BigNumber;
        entryTime: BigNumber;
        account: string;
      }
    >;

    marketPriceX96(
      _side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onChangeTokenConfig(overrides?: CallOverrides): Promise<void>;

    openLiquidityPosition(
      _account: PromiseOrValue<string>,
      _margin: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        size: BigNumber;
        entryPriceX96: BigNumber;
        entryFundingRateGrowthX96: BigNumber;
      }
    >;

    previousGlobalFundingRate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    priceState(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        IPool.PriceVertexStructOutput[],
        number,
        number,
        number,
        BigNumber[]
      ] & {
        maxPriceImpactLiquidity: BigNumber;
        premiumRateX96: BigNumber;
        priceVertices: IPool.PriceVertexStructOutput[];
        pendingVertexIndex: number;
        liquidationVertexIndex: number;
        currentVertexIndex: number;
        liquidationBufferNetSizes: BigNumber[];
      }
    >;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    referralFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    riskBufferFundPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { liquidity: BigNumber; unlockTime: BigNumber }
    >;

    sampleAndAdjustFundingRate(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    usdBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "FundingRateGrowthAdjusted(int256,int192,int192,uint64)"(
      fundingRateDeltaX96?: null,
      longFundingRateGrowthAfterX96?: null,
      shortFundingRateGrowthAfterX96?: null,
      lastAdjustFundingRateTime?: null
    ): FundingRateGrowthAdjustedEventFilter;
    FundingRateGrowthAdjusted(
      fundingRateDeltaX96?: null,
      longFundingRateGrowthAfterX96?: null,
      shortFundingRateGrowthAfterX96?: null,
      lastAdjustFundingRateTime?: null
    ): FundingRateGrowthAdjustedEventFilter;

    "GlobalLiquidityPositionNetPositionAdjusted(uint128,uint128,uint160,uint8)"(
      netSizeAfter?: null,
      liquidationBufferNetSizeAfter?: null,
      entryPriceAfterX96?: null,
      sideAfter?: null
    ): GlobalLiquidityPositionNetPositionAdjustedEventFilter;
    GlobalLiquidityPositionNetPositionAdjusted(
      netSizeAfter?: null,
      liquidationBufferNetSizeAfter?: null,
      entryPriceAfterX96?: null,
      sideAfter?: null
    ): GlobalLiquidityPositionNetPositionAdjustedEventFilter;

    "GlobalLiquidityPositionRealizedProfitGrowthChanged(uint256)"(
      realizedProfitGrowthAfterX64?: null
    ): GlobalLiquidityPositionRealizedProfitGrowthChangedEventFilter;
    GlobalLiquidityPositionRealizedProfitGrowthChanged(
      realizedProfitGrowthAfterX64?: null
    ): GlobalLiquidityPositionRealizedProfitGrowthChangedEventFilter;

    "GlobalRiskBufferFundChanged(int256)"(
      riskBufferFundAfter?: null
    ): GlobalRiskBufferFundChangedEventFilter;
    GlobalRiskBufferFundChanged(
      riskBufferFundAfter?: null
    ): GlobalRiskBufferFundChangedEventFilter;

    "GlobalRiskBufferFundGovUsed(address,uint128)"(
      receiver?: PromiseOrValue<string> | null,
      riskBufferFundDelta?: null
    ): GlobalRiskBufferFundGovUsedEventFilter;
    GlobalRiskBufferFundGovUsed(
      receiver?: PromiseOrValue<string> | null,
      riskBufferFundDelta?: null
    ): GlobalRiskBufferFundGovUsedEventFilter;

    "GlobalUnrealizedLossMetricsChanged(uint64,uint128,uint256)"(
      lastZeroLossTimeAfter?: null,
      liquidityAfter?: null,
      liquidityTimesUnrealizedLossAfter?: null
    ): GlobalUnrealizedLossMetricsChangedEventFilter;
    GlobalUnrealizedLossMetricsChanged(
      lastZeroLossTimeAfter?: null,
      liquidityAfter?: null,
      liquidityTimesUnrealizedLossAfter?: null
    ): GlobalUnrealizedLossMetricsChangedEventFilter;

    "LiquidityPositionClosed(uint96,uint128,uint128,uint256,address)"(
      positionID?: PromiseOrValue<BigNumberish> | null,
      margin?: null,
      unrealizedLoss?: null,
      realizedProfit?: null,
      receiver?: null
    ): LiquidityPositionClosedEventFilter;
    LiquidityPositionClosed(
      positionID?: PromiseOrValue<BigNumberish> | null,
      margin?: null,
      unrealizedLoss?: null,
      realizedProfit?: null,
      receiver?: null
    ): LiquidityPositionClosedEventFilter;

    "LiquidityPositionLiquidated(address,uint96,uint256,uint256,uint64,address)"(
      liquidator?: PromiseOrValue<string> | null,
      positionID?: PromiseOrValue<BigNumberish> | null,
      realizedProfit?: null,
      riskBufferFundDelta?: null,
      liquidationExecutionFee?: null,
      feeReceiver?: null
    ): LiquidityPositionLiquidatedEventFilter;
    LiquidityPositionLiquidated(
      liquidator?: PromiseOrValue<string> | null,
      positionID?: PromiseOrValue<BigNumberish> | null,
      realizedProfit?: null,
      riskBufferFundDelta?: null,
      liquidationExecutionFee?: null,
      feeReceiver?: null
    ): LiquidityPositionLiquidatedEventFilter;

    "LiquidityPositionMarginAdjusted(uint96,int128,uint128,uint256,address)"(
      positionID?: PromiseOrValue<BigNumberish> | null,
      marginDelta?: null,
      marginAfter?: null,
      entryRealizedProfitGrowthAfterX64?: null,
      receiver?: null
    ): LiquidityPositionMarginAdjustedEventFilter;
    LiquidityPositionMarginAdjusted(
      positionID?: PromiseOrValue<BigNumberish> | null,
      marginDelta?: null,
      marginAfter?: null,
      entryRealizedProfitGrowthAfterX64?: null,
      receiver?: null
    ): LiquidityPositionMarginAdjustedEventFilter;

    "LiquidityPositionOpened(address,uint96,uint128,uint128,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      positionID?: null,
      margin?: null,
      liquidity?: null,
      entryUnrealizedLoss?: null,
      realizedProfitGrowthX64?: null
    ): LiquidityPositionOpenedEventFilter;
    LiquidityPositionOpened(
      account?: PromiseOrValue<string> | null,
      positionID?: null,
      margin?: null,
      liquidity?: null,
      entryUnrealizedLoss?: null,
      realizedProfitGrowthX64?: null
    ): LiquidityPositionOpenedEventFilter;

    "PositionDecreased(address,uint8,uint128,uint128,uint128,uint160,int256,int256,uint128,address)"(
      account?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      marginAfter?: null,
      sizeAfter?: null,
      tradePriceX96?: null,
      realizedPnLDelta?: null,
      fundingFee?: null,
      tradingFee?: null,
      receiver?: null
    ): PositionDecreasedEventFilter;
    PositionDecreased(
      account?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      marginAfter?: null,
      sizeAfter?: null,
      tradePriceX96?: null,
      realizedPnLDelta?: null,
      fundingFee?: null,
      tradingFee?: null,
      receiver?: null
    ): PositionDecreasedEventFilter;

    "PositionIncreased(address,uint8,uint128,uint128,uint128,uint160,uint160,int256,uint128)"(
      account?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      marginAfter?: null,
      sizeAfter?: null,
      tradePriceX96?: null,
      entryPriceAfterX96?: null,
      fundingFee?: null,
      tradingFee?: null
    ): PositionIncreasedEventFilter;
    PositionIncreased(
      account?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      marginAfter?: null,
      sizeAfter?: null,
      tradePriceX96?: null,
      entryPriceAfterX96?: null,
      fundingFee?: null,
      tradingFee?: null
    ): PositionIncreasedEventFilter;

    "PositionLiquidated(address,address,uint8,uint160,uint160,int256,uint128,uint128,uint64,address)"(
      liquidator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      side?: null,
      indexPriceX96?: null,
      liquidationPriceX96?: null,
      fundingFee?: null,
      tradingFee?: null,
      liquidationFee?: null,
      liquidationExecutionFee?: null,
      feeReceiver?: null
    ): PositionLiquidatedEventFilter;
    PositionLiquidated(
      liquidator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      side?: null,
      indexPriceX96?: null,
      liquidationPriceX96?: null,
      fundingFee?: null,
      tradingFee?: null,
      liquidationFee?: null,
      liquidationExecutionFee?: null,
      feeReceiver?: null
    ): PositionLiquidatedEventFilter;

    "PriceVertexChanged(uint8,uint128,uint128)"(
      index?: null,
      sizeAfter?: null,
      premiumRateAfterX96?: null
    ): PriceVertexChangedEventFilter;
    PriceVertexChanged(
      index?: null,
      sizeAfter?: null,
      premiumRateAfterX96?: null
    ): PriceVertexChangedEventFilter;

    "ProtocolFeeCollected(uint128)"(
      amount?: null
    ): ProtocolFeeCollectedEventFilter;
    ProtocolFeeCollected(amount?: null): ProtocolFeeCollectedEventFilter;

    "ProtocolFeeIncreased(uint128)"(
      amount?: null
    ): ProtocolFeeIncreasedEventFilter;
    ProtocolFeeIncreased(amount?: null): ProtocolFeeIncreasedEventFilter;

    "ReferralFeeCollected(uint256,address,uint256)"(
      referralToken?: PromiseOrValue<BigNumberish> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): ReferralFeeCollectedEventFilter;
    ReferralFeeCollected(
      referralToken?: PromiseOrValue<BigNumberish> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): ReferralFeeCollectedEventFilter;

    "ReferralFeeIncreased(address,uint256,uint128,uint256,uint128)"(
      referee?: PromiseOrValue<string> | null,
      referralToken?: PromiseOrValue<BigNumberish> | null,
      referralFee?: null,
      referralParentToken?: PromiseOrValue<BigNumberish> | null,
      referralParentFee?: null
    ): ReferralFeeIncreasedEventFilter;
    ReferralFeeIncreased(
      referee?: PromiseOrValue<string> | null,
      referralToken?: PromiseOrValue<BigNumberish> | null,
      referralFee?: null,
      referralParentToken?: PromiseOrValue<BigNumberish> | null,
      referralParentFee?: null
    ): ReferralFeeIncreasedEventFilter;

    "RiskBufferFundPositionDecreased(address,uint128,address)"(
      account?: PromiseOrValue<string> | null,
      liquidityAfter?: null,
      receiver?: null
    ): RiskBufferFundPositionDecreasedEventFilter;
    RiskBufferFundPositionDecreased(
      account?: PromiseOrValue<string> | null,
      liquidityAfter?: null,
      receiver?: null
    ): RiskBufferFundPositionDecreasedEventFilter;

    "RiskBufferFundPositionIncreased(address,uint128,uint64)"(
      account?: PromiseOrValue<string> | null,
      liquidityAfter?: null,
      unlockTimeAfter?: null
    ): RiskBufferFundPositionIncreasedEventFilter;
    RiskBufferFundPositionIncreased(
      account?: PromiseOrValue<string> | null,
      liquidityAfter?: null,
      unlockTimeAfter?: null
    ): RiskBufferFundPositionIncreasedEventFilter;
  };

  estimateGas: {
    adjustLiquidityPositionMargin(
      _positionID: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changePriceVertex(
      _startExclusive: PromiseOrValue<BigNumberish>,
      _endInclusive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeLiquidityPosition(
      _positionID: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectProtocolFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectReferralFee(
      _referralToken: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalFundingRateSample(overrides?: CallOverrides): Promise<BigNumber>;

    globalLiquidityPosition(overrides?: CallOverrides): Promise<BigNumber>;

    globalPosition(overrides?: CallOverrides): Promise<BigNumber>;

    globalRiskBufferFund(overrides?: CallOverrides): Promise<BigNumber>;

    globalUnrealizedLossMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    govUseRiskBufferFund(
      _receiver: PromiseOrValue<string>,
      _riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidateLiquidityPosition(
      _positionID: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidityPositionAccount(
      _positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityPositions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketPriceX96(
      _side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onChangeTokenConfig(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openLiquidityPosition(
      _account: PromiseOrValue<string>,
      _margin: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousGlobalFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    priceState(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    referralFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    riskBufferFundPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sampleAndAdjustFundingRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    usdBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustLiquidityPositionMargin(
      _positionID: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changePriceVertex(
      _startExclusive: PromiseOrValue<BigNumberish>,
      _endInclusive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeLiquidityPosition(
      _positionID: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectProtocolFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectReferralFee(
      _referralToken: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalFundingRateSample(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalUnrealizedLossMetrics(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    govUseRiskBufferFund(
      _receiver: PromiseOrValue<string>,
      _riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _marginDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseRiskBufferFundPosition(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPosition(
      _positionID: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidityPositionAccount(
      _positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityPositions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketPriceX96(
      _side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onChangeTokenConfig(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openLiquidityPosition(
      _account: PromiseOrValue<string>,
      _margin: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previousGlobalFundingRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    riskBufferFundPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sampleAndAdjustFundingRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
