/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IPoolPositionInterface extends utils.Interface {
  functions: {
    "decreasePosition(address,uint8,uint128,uint128,address)": FunctionFragment;
    "globalFundingRateSample()": FunctionFragment;
    "globalPosition()": FunctionFragment;
    "increasePosition(address,uint8,uint128,uint128)": FunctionFragment;
    "liquidatePosition(address,uint8,address)": FunctionFragment;
    "positions(address,uint8)": FunctionFragment;
    "previousGlobalFundingRate()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decreasePosition"
      | "globalFundingRateSample"
      | "globalPosition"
      | "increasePosition"
      | "liquidatePosition"
      | "positions"
      | "previousGlobalFundingRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "globalFundingRateSample",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previousGlobalFundingRate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalFundingRateSample",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousGlobalFundingRate",
    data: BytesLike
  ): Result;

  events: {
    "FundingRateGrowthAdjusted(int256,int192,int192,uint64)": EventFragment;
    "PositionDecreased(address,uint8,uint128,uint128,uint128,uint160,int256,int256,uint128,address)": EventFragment;
    "PositionIncreased(address,uint8,uint128,uint128,uint128,uint160,uint160,int256,uint128)": EventFragment;
    "PositionLiquidated(address,address,uint8,uint160,uint160,int256,uint128,uint128,uint64,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundingRateGrowthAdjusted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
}

export interface FundingRateGrowthAdjustedEventObject {
  fundingRateDeltaX96: BigNumber;
  longFundingRateGrowthAfterX96: BigNumber;
  shortFundingRateGrowthAfterX96: BigNumber;
  lastAdjustFundingRateTime: BigNumber;
}
export type FundingRateGrowthAdjustedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  FundingRateGrowthAdjustedEventObject
>;

export type FundingRateGrowthAdjustedEventFilter =
  TypedEventFilter<FundingRateGrowthAdjustedEvent>;

export interface PositionDecreasedEventObject {
  account: string;
  side: number;
  marginDelta: BigNumber;
  marginAfter: BigNumber;
  sizeAfter: BigNumber;
  tradePriceX96: BigNumber;
  realizedPnLDelta: BigNumber;
  fundingFee: BigNumber;
  tradingFee: BigNumber;
  receiver: string;
}
export type PositionDecreasedEvent = TypedEvent<
  [
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  PositionDecreasedEventObject
>;

export type PositionDecreasedEventFilter =
  TypedEventFilter<PositionDecreasedEvent>;

export interface PositionIncreasedEventObject {
  account: string;
  side: number;
  marginDelta: BigNumber;
  marginAfter: BigNumber;
  sizeAfter: BigNumber;
  tradePriceX96: BigNumber;
  entryPriceAfterX96: BigNumber;
  fundingFee: BigNumber;
  tradingFee: BigNumber;
}
export type PositionIncreasedEvent = TypedEvent<
  [
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PositionIncreasedEventObject
>;

export type PositionIncreasedEventFilter =
  TypedEventFilter<PositionIncreasedEvent>;

export interface PositionLiquidatedEventObject {
  liquidator: string;
  account: string;
  side: number;
  indexPriceX96: BigNumber;
  liquidationPriceX96: BigNumber;
  fundingFee: BigNumber;
  tradingFee: BigNumber;
  liquidationFee: BigNumber;
  liquidationExecutionFee: BigNumber;
  feeReceiver: string;
}
export type PositionLiquidatedEvent = TypedEvent<
  [
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  PositionLiquidatedEventObject
>;

export type PositionLiquidatedEventFilter =
  TypedEventFilter<PositionLiquidatedEvent>;

export interface IPoolPosition extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolPositionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decreasePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalFundingRateSample(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        lastAdjustFundingRateTime: BigNumber;
        sampleCount: number;
        cumulativePremiumRateX96: BigNumber;
      }
    >;

    globalPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longSize: BigNumber;
        shortSize: BigNumber;
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;

    increasePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidatePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    positions(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        size: BigNumber;
        entryPriceX96: BigNumber;
        entryFundingRateGrowthX96: BigNumber;
      }
    >;

    previousGlobalFundingRate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;
  };

  decreasePosition(
    account: PromiseOrValue<string>,
    side: PromiseOrValue<BigNumberish>,
    marginDelta: PromiseOrValue<BigNumberish>,
    sizeDelta: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalFundingRateSample(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber] & {
      lastAdjustFundingRateTime: BigNumber;
      sampleCount: number;
      cumulativePremiumRateX96: BigNumber;
    }
  >;

  globalPosition(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      longSize: BigNumber;
      shortSize: BigNumber;
      longFundingRateGrowthX96: BigNumber;
      shortFundingRateGrowthX96: BigNumber;
    }
  >;

  increasePosition(
    account: PromiseOrValue<string>,
    side: PromiseOrValue<BigNumberish>,
    marginDelta: PromiseOrValue<BigNumberish>,
    sizeDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidatePosition(
    account: PromiseOrValue<string>,
    side: PromiseOrValue<BigNumberish>,
    feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  positions(
    account: PromiseOrValue<string>,
    side: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      margin: BigNumber;
      size: BigNumber;
      entryPriceX96: BigNumber;
      entryFundingRateGrowthX96: BigNumber;
    }
  >;

  previousGlobalFundingRate(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      longFundingRateGrowthX96: BigNumber;
      shortFundingRateGrowthX96: BigNumber;
    }
  >;

  callStatic: {
    decreasePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalFundingRateSample(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        lastAdjustFundingRateTime: BigNumber;
        sampleCount: number;
        cumulativePremiumRateX96: BigNumber;
      }
    >;

    globalPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longSize: BigNumber;
        shortSize: BigNumber;
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;

    increasePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    positions(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        size: BigNumber;
        entryPriceX96: BigNumber;
        entryFundingRateGrowthX96: BigNumber;
      }
    >;

    previousGlobalFundingRate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        longFundingRateGrowthX96: BigNumber;
        shortFundingRateGrowthX96: BigNumber;
      }
    >;
  };

  filters: {
    "FundingRateGrowthAdjusted(int256,int192,int192,uint64)"(
      fundingRateDeltaX96?: null,
      longFundingRateGrowthAfterX96?: null,
      shortFundingRateGrowthAfterX96?: null,
      lastAdjustFundingRateTime?: null
    ): FundingRateGrowthAdjustedEventFilter;
    FundingRateGrowthAdjusted(
      fundingRateDeltaX96?: null,
      longFundingRateGrowthAfterX96?: null,
      shortFundingRateGrowthAfterX96?: null,
      lastAdjustFundingRateTime?: null
    ): FundingRateGrowthAdjustedEventFilter;

    "PositionDecreased(address,uint8,uint128,uint128,uint128,uint160,int256,int256,uint128,address)"(
      account?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      marginAfter?: null,
      sizeAfter?: null,
      tradePriceX96?: null,
      realizedPnLDelta?: null,
      fundingFee?: null,
      tradingFee?: null,
      receiver?: null
    ): PositionDecreasedEventFilter;
    PositionDecreased(
      account?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      marginAfter?: null,
      sizeAfter?: null,
      tradePriceX96?: null,
      realizedPnLDelta?: null,
      fundingFee?: null,
      tradingFee?: null,
      receiver?: null
    ): PositionDecreasedEventFilter;

    "PositionIncreased(address,uint8,uint128,uint128,uint128,uint160,uint160,int256,uint128)"(
      account?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      marginAfter?: null,
      sizeAfter?: null,
      tradePriceX96?: null,
      entryPriceAfterX96?: null,
      fundingFee?: null,
      tradingFee?: null
    ): PositionIncreasedEventFilter;
    PositionIncreased(
      account?: PromiseOrValue<string> | null,
      side?: null,
      marginDelta?: null,
      marginAfter?: null,
      sizeAfter?: null,
      tradePriceX96?: null,
      entryPriceAfterX96?: null,
      fundingFee?: null,
      tradingFee?: null
    ): PositionIncreasedEventFilter;

    "PositionLiquidated(address,address,uint8,uint160,uint160,int256,uint128,uint128,uint64,address)"(
      liquidator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      side?: null,
      indexPriceX96?: null,
      liquidationPriceX96?: null,
      fundingFee?: null,
      tradingFee?: null,
      liquidationFee?: null,
      liquidationExecutionFee?: null,
      feeReceiver?: null
    ): PositionLiquidatedEventFilter;
    PositionLiquidated(
      liquidator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      side?: null,
      indexPriceX96?: null,
      liquidationPriceX96?: null,
      fundingFee?: null,
      tradingFee?: null,
      liquidationFee?: null,
      liquidationExecutionFee?: null,
      feeReceiver?: null
    ): PositionLiquidatedEventFilter;
  };

  estimateGas: {
    decreasePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalFundingRateSample(overrides?: CallOverrides): Promise<BigNumber>;

    globalPosition(overrides?: CallOverrides): Promise<BigNumber>;

    increasePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidatePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    positions(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousGlobalFundingRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decreasePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalFundingRateSample(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    positions(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previousGlobalFundingRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
