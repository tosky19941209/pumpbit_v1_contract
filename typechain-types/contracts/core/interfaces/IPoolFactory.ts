/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IConfigurable {
  export type TokenConfigStruct = {
    minMarginPerLiquidityPosition: PromiseOrValue<BigNumberish>;
    maxRiskRatePerLiquidityPosition: PromiseOrValue<BigNumberish>;
    maxLeveragePerLiquidityPosition: PromiseOrValue<BigNumberish>;
    minMarginPerPosition: PromiseOrValue<BigNumberish>;
    maxLeveragePerPosition: PromiseOrValue<BigNumberish>;
    liquidationFeeRatePerPosition: PromiseOrValue<BigNumberish>;
    liquidationExecutionFee: PromiseOrValue<BigNumberish>;
    interestRate: PromiseOrValue<BigNumberish>;
    maxFundingRate: PromiseOrValue<BigNumberish>;
  };

  export type TokenConfigStructOutput = [
    BigNumber,
    number,
    number,
    BigNumber,
    number,
    number,
    BigNumber,
    number,
    number
  ] & {
    minMarginPerLiquidityPosition: BigNumber;
    maxRiskRatePerLiquidityPosition: number;
    maxLeveragePerLiquidityPosition: number;
    minMarginPerPosition: BigNumber;
    maxLeveragePerPosition: number;
    liquidationFeeRatePerPosition: number;
    liquidationExecutionFee: BigNumber;
    interestRate: number;
    maxFundingRate: number;
  };

  export type TokenFeeRateConfigStruct = {
    tradingFeeRate: PromiseOrValue<BigNumberish>;
    liquidityFeeRate: PromiseOrValue<BigNumberish>;
    protocolFeeRate: PromiseOrValue<BigNumberish>;
    referralReturnFeeRate: PromiseOrValue<BigNumberish>;
    referralParentReturnFeeRate: PromiseOrValue<BigNumberish>;
    referralDiscountRate: PromiseOrValue<BigNumberish>;
  };

  export type TokenFeeRateConfigStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number
  ] & {
    tradingFeeRate: number;
    liquidityFeeRate: number;
    protocolFeeRate: number;
    referralReturnFeeRate: number;
    referralParentReturnFeeRate: number;
    referralDiscountRate: number;
  };

  export type VertexConfigStruct = {
    balanceRate: PromiseOrValue<BigNumberish>;
    premiumRate: PromiseOrValue<BigNumberish>;
  };

  export type VertexConfigStructOutput = [number, number] & {
    balanceRate: number;
    premiumRate: number;
  };

  export type TokenPriceConfigStruct = {
    maxPriceImpactLiquidity: PromiseOrValue<BigNumberish>;
    liquidationVertexIndex: PromiseOrValue<BigNumberish>;
    vertices: IConfigurable.VertexConfigStruct[];
  };

  export type TokenPriceConfigStructOutput = [
    BigNumber,
    number,
    IConfigurable.VertexConfigStructOutput[]
  ] & {
    maxPriceImpactLiquidity: BigNumber;
    liquidationVertexIndex: number;
    vertices: IConfigurable.VertexConfigStructOutput[];
  };
}

export interface IPoolFactoryInterface extends utils.Interface {
  functions: {
    "USD()": FunctionFragment;
    "createPool(address)": FunctionFragment;
    "deployParameters()": FunctionFragment;
    "enableToken(address,(uint64,uint32,uint32,uint64,uint32,uint32,uint64,uint32,uint32),(uint32,uint32,uint32,uint32,uint32,uint32),(uint128,uint8,(uint32,uint32)[]))": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "gov()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isEnabledToken(address)": FunctionFragment;
    "isPool(address)": FunctionFragment;
    "pools(address)": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "tokenConfigs(address)": FunctionFragment;
    "tokenFeeRateConfigs(address)": FunctionFragment;
    "tokenPriceConfigs(address)": FunctionFragment;
    "tokenPriceVertexConfigs(address,uint8)": FunctionFragment;
    "updateTokenConfig(address,(uint64,uint32,uint32,uint64,uint32,uint32,uint64,uint32,uint32),(uint32,uint32,uint32,uint32,uint32,uint32),(uint128,uint8,(uint32,uint32)[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "USD"
      | "createPool"
      | "deployParameters"
      | "enableToken"
      | "getRoleAdmin"
      | "gov"
      | "grantRole"
      | "hasRole"
      | "isEnabledToken"
      | "isPool"
      | "pools"
      | "priceFeed"
      | "renounceRole"
      | "revokeRole"
      | "tokenConfigs"
      | "tokenFeeRateConfigs"
      | "tokenPriceConfigs"
      | "tokenPriceVertexConfigs"
      | "updateTokenConfig"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "USD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableToken",
    values: [
      PromiseOrValue<string>,
      IConfigurable.TokenConfigStruct,
      IConfigurable.TokenFeeRateConfigStruct,
      IConfigurable.TokenPriceConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isEnabledToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenConfigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFeeRateConfigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPriceConfigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPriceVertexConfigs",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenConfig",
    values: [
      PromiseOrValue<string>,
      IConfigurable.TokenConfigStruct,
      IConfigurable.TokenFeeRateConfigStruct,
      IConfigurable.TokenPriceConfigStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "USD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEnabledToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFeeRateConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPriceConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPriceVertexConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenConfig",
    data: BytesLike
  ): Result;

  events: {
    "PoolCreated(address,address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokenConfigChanged(address,tuple,tuple,tuple)": EventFragment;
    "USDEnabled(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDEnabled"): EventFragment;
}

export interface PoolCreatedEventObject {
  pool: string;
  token: string;
  usd: string;
}
export type PoolCreatedEvent = TypedEvent<
  [string, string, string],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TokenConfigChangedEventObject {
  token: string;
  newCfg: IConfigurable.TokenConfigStructOutput;
  newFeeRateCfg: IConfigurable.TokenFeeRateConfigStructOutput;
  newPriceCfg: IConfigurable.TokenPriceConfigStructOutput;
}
export type TokenConfigChangedEvent = TypedEvent<
  [
    string,
    IConfigurable.TokenConfigStructOutput,
    IConfigurable.TokenFeeRateConfigStructOutput,
    IConfigurable.TokenPriceConfigStructOutput
  ],
  TokenConfigChangedEventObject
>;

export type TokenConfigChangedEventFilter =
  TypedEventFilter<TokenConfigChangedEvent>;

export interface USDEnabledEventObject {
  usd: string;
}
export type USDEnabledEvent = TypedEvent<[string], USDEnabledEventObject>;

export type USDEnabledEventFilter = TypedEventFilter<USDEnabledEvent>;

export interface IPoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    USD(overrides?: CallOverrides): Promise<[string]>;

    createPool(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployParameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        token: string;
        usd: string;
        router: string;
        feeDistributor: string;
        EFC: string;
        callback: string;
      }
    >;

    enableToken(
      token: PromiseOrValue<string>,
      cfg: IConfigurable.TokenConfigStruct,
      feeRateCfg: IConfigurable.TokenFeeRateConfigStruct,
      priceCfg: IConfigurable.TokenPriceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isEnabledToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pools(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { pool: string }>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        BigNumber,
        number,
        number,
        BigNumber,
        number,
        number
      ] & {
        minMarginPerLiquidityPosition: BigNumber;
        maxRiskRatePerLiquidityPosition: number;
        maxLeveragePerLiquidityPosition: number;
        minMarginPerPosition: BigNumber;
        maxLeveragePerPosition: number;
        liquidationFeeRatePerPosition: number;
        liquidationExecutionFee: BigNumber;
        interestRate: number;
        maxFundingRate: number;
      }
    >;

    tokenFeeRateConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, number] & {
        tradingFeeRate: number;
        liquidityFeeRate: number;
        protocolFeeRate: number;
        referralReturnFeeRate: number;
        referralParentReturnFeeRate: number;
        referralDiscountRate: number;
      }
    >;

    tokenPriceConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        maxPriceImpactLiquidity: BigNumber;
        liquidationVertexIndex: number;
      }
    >;

    tokenPriceVertexConfigs(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { balanceRate: number; premiumRate: number }>;

    updateTokenConfig(
      token: PromiseOrValue<string>,
      newCfg: IConfigurable.TokenConfigStruct,
      newFeeRateCfg: IConfigurable.TokenFeeRateConfigStruct,
      newPriceCfg: IConfigurable.TokenPriceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  USD(overrides?: CallOverrides): Promise<string>;

  createPool(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployParameters(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string] & {
      token: string;
      usd: string;
      router: string;
      feeDistributor: string;
      EFC: string;
      callback: string;
    }
  >;

  enableToken(
    token: PromiseOrValue<string>,
    cfg: IConfigurable.TokenConfigStruct,
    feeRateCfg: IConfigurable.TokenFeeRateConfigStruct,
    priceCfg: IConfigurable.TokenPriceConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEnabledToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPool(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pools(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenConfigs(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      number,
      BigNumber,
      number,
      number,
      BigNumber,
      number,
      number
    ] & {
      minMarginPerLiquidityPosition: BigNumber;
      maxRiskRatePerLiquidityPosition: number;
      maxLeveragePerLiquidityPosition: number;
      minMarginPerPosition: BigNumber;
      maxLeveragePerPosition: number;
      liquidationFeeRatePerPosition: number;
      liquidationExecutionFee: BigNumber;
      interestRate: number;
      maxFundingRate: number;
    }
  >;

  tokenFeeRateConfigs(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, number] & {
      tradingFeeRate: number;
      liquidityFeeRate: number;
      protocolFeeRate: number;
      referralReturnFeeRate: number;
      referralParentReturnFeeRate: number;
      referralDiscountRate: number;
    }
  >;

  tokenPriceConfigs(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      maxPriceImpactLiquidity: BigNumber;
      liquidationVertexIndex: number;
    }
  >;

  tokenPriceVertexConfigs(
    token: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number] & { balanceRate: number; premiumRate: number }>;

  updateTokenConfig(
    token: PromiseOrValue<string>,
    newCfg: IConfigurable.TokenConfigStruct,
    newFeeRateCfg: IConfigurable.TokenFeeRateConfigStruct,
    newPriceCfg: IConfigurable.TokenPriceConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    USD(overrides?: CallOverrides): Promise<string>;

    createPool(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployParameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        token: string;
        usd: string;
        router: string;
        feeDistributor: string;
        EFC: string;
        callback: string;
      }
    >;

    enableToken(
      token: PromiseOrValue<string>,
      cfg: IConfigurable.TokenConfigStruct,
      feeRateCfg: IConfigurable.TokenFeeRateConfigStruct,
      priceCfg: IConfigurable.TokenPriceConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEnabledToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pools(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        BigNumber,
        number,
        number,
        BigNumber,
        number,
        number
      ] & {
        minMarginPerLiquidityPosition: BigNumber;
        maxRiskRatePerLiquidityPosition: number;
        maxLeveragePerLiquidityPosition: number;
        minMarginPerPosition: BigNumber;
        maxLeveragePerPosition: number;
        liquidationFeeRatePerPosition: number;
        liquidationExecutionFee: BigNumber;
        interestRate: number;
        maxFundingRate: number;
      }
    >;

    tokenFeeRateConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, number] & {
        tradingFeeRate: number;
        liquidityFeeRate: number;
        protocolFeeRate: number;
        referralReturnFeeRate: number;
        referralParentReturnFeeRate: number;
        referralDiscountRate: number;
      }
    >;

    tokenPriceConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        maxPriceImpactLiquidity: BigNumber;
        liquidationVertexIndex: number;
      }
    >;

    tokenPriceVertexConfigs(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { balanceRate: number; premiumRate: number }>;

    updateTokenConfig(
      token: PromiseOrValue<string>,
      newCfg: IConfigurable.TokenConfigStruct,
      newFeeRateCfg: IConfigurable.TokenFeeRateConfigStruct,
      newPriceCfg: IConfigurable.TokenPriceConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PoolCreated(address,address,address)"(
      pool?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      usd?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;
    PoolCreated(
      pool?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      usd?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "TokenConfigChanged(address,tuple,tuple,tuple)"(
      token?: PromiseOrValue<string> | null,
      newCfg?: null,
      newFeeRateCfg?: null,
      newPriceCfg?: null
    ): TokenConfigChangedEventFilter;
    TokenConfigChanged(
      token?: PromiseOrValue<string> | null,
      newCfg?: null,
      newFeeRateCfg?: null,
      newPriceCfg?: null
    ): TokenConfigChangedEventFilter;

    "USDEnabled(address)"(
      usd?: PromiseOrValue<string> | null
    ): USDEnabledEventFilter;
    USDEnabled(usd?: PromiseOrValue<string> | null): USDEnabledEventFilter;
  };

  estimateGas: {
    USD(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployParameters(overrides?: CallOverrides): Promise<BigNumber>;

    enableToken(
      token: PromiseOrValue<string>,
      cfg: IConfigurable.TokenConfigStruct,
      feeRateCfg: IConfigurable.TokenFeeRateConfigStruct,
      priceCfg: IConfigurable.TokenPriceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEnabledToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenFeeRateConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPriceConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPriceVertexConfigs(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTokenConfig(
      token: PromiseOrValue<string>,
      newCfg: IConfigurable.TokenConfigStruct,
      newFeeRateCfg: IConfigurable.TokenFeeRateConfigStruct,
      newPriceCfg: IConfigurable.TokenPriceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    USD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPool(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableToken(
      token: PromiseOrValue<string>,
      cfg: IConfigurable.TokenConfigStruct,
      feeRateCfg: IConfigurable.TokenFeeRateConfigStruct,
      priceCfg: IConfigurable.TokenPriceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEnabledToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenFeeRateConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPriceConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPriceVertexConfigs(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTokenConfig(
      token: PromiseOrValue<string>,
      newCfg: IConfigurable.TokenConfigStruct,
      newFeeRateCfg: IConfigurable.TokenFeeRateConfigStruct,
      newPriceCfg: IConfigurable.TokenPriceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
