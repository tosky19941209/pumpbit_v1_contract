/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IPoolLiquidityPositionInterface extends utils.Interface {
  functions: {
    "adjustLiquidityPositionMargin(uint96,int128,address)": FunctionFragment;
    "closeLiquidityPosition(uint96,address)": FunctionFragment;
    "decreaseRiskBufferFundPosition(address,uint128,address)": FunctionFragment;
    "globalLiquidityPosition()": FunctionFragment;
    "globalRiskBufferFund()": FunctionFragment;
    "globalUnrealizedLossMetrics()": FunctionFragment;
    "govUseRiskBufferFund(address,uint128)": FunctionFragment;
    "increaseRiskBufferFundPosition(address,uint128)": FunctionFragment;
    "liquidateLiquidityPosition(uint96,address)": FunctionFragment;
    "liquidityPositionAccount(uint96)": FunctionFragment;
    "liquidityPositions(uint96)": FunctionFragment;
    "openLiquidityPosition(address,uint128,uint128)": FunctionFragment;
    "riskBufferFundPositions(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustLiquidityPositionMargin"
      | "closeLiquidityPosition"
      | "decreaseRiskBufferFundPosition"
      | "globalLiquidityPosition"
      | "globalRiskBufferFund"
      | "globalUnrealizedLossMetrics"
      | "govUseRiskBufferFund"
      | "increaseRiskBufferFundPosition"
      | "liquidateLiquidityPosition"
      | "liquidityPositionAccount"
      | "liquidityPositions"
      | "openLiquidityPosition"
      | "riskBufferFundPositions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjustLiquidityPositionMargin",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLiquidityPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseRiskBufferFundPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "globalLiquidityPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalRiskBufferFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalUnrealizedLossMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govUseRiskBufferFund",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseRiskBufferFundPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLiquidityPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPositionAccount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPositions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openLiquidityPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "riskBufferFundPositions",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustLiquidityPositionMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalRiskBufferFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUnrealizedLossMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govUseRiskBufferFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseRiskBufferFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPositionAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riskBufferFundPositions",
    data: BytesLike
  ): Result;

  events: {
    "GlobalLiquidityPositionNetPositionAdjusted(uint128,uint128,uint160,uint8)": EventFragment;
    "GlobalLiquidityPositionRealizedProfitGrowthChanged(uint256)": EventFragment;
    "GlobalRiskBufferFundChanged(int256)": EventFragment;
    "GlobalRiskBufferFundGovUsed(address,uint128)": EventFragment;
    "GlobalUnrealizedLossMetricsChanged(uint64,uint128,uint256)": EventFragment;
    "LiquidityPositionClosed(uint96,uint128,uint128,uint256,address)": EventFragment;
    "LiquidityPositionLiquidated(address,uint96,uint256,uint256,uint64,address)": EventFragment;
    "LiquidityPositionMarginAdjusted(uint96,int128,uint128,uint256,address)": EventFragment;
    "LiquidityPositionOpened(address,uint96,uint128,uint128,uint256,uint256)": EventFragment;
    "RiskBufferFundPositionDecreased(address,uint128,address)": EventFragment;
    "RiskBufferFundPositionIncreased(address,uint128,uint64)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "GlobalLiquidityPositionNetPositionAdjusted"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalLiquidityPositionRealizedProfitGrowthChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalRiskBufferFundChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalRiskBufferFundGovUsed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalUnrealizedLossMetricsChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionClosed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPositionLiquidated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPositionMarginAdjusted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionOpened"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RiskBufferFundPositionDecreased"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RiskBufferFundPositionIncreased"
  ): EventFragment;
}

export interface GlobalLiquidityPositionNetPositionAdjustedEventObject {
  netSizeAfter: BigNumber;
  liquidationBufferNetSizeAfter: BigNumber;
  entryPriceAfterX96: BigNumber;
  sideAfter: number;
}
export type GlobalLiquidityPositionNetPositionAdjustedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number],
  GlobalLiquidityPositionNetPositionAdjustedEventObject
>;

export type GlobalLiquidityPositionNetPositionAdjustedEventFilter =
  TypedEventFilter<GlobalLiquidityPositionNetPositionAdjustedEvent>;

export interface GlobalLiquidityPositionRealizedProfitGrowthChangedEventObject {
  realizedProfitGrowthAfterX64: BigNumber;
}
export type GlobalLiquidityPositionRealizedProfitGrowthChangedEvent =
  TypedEvent<
    [BigNumber],
    GlobalLiquidityPositionRealizedProfitGrowthChangedEventObject
  >;

export type GlobalLiquidityPositionRealizedProfitGrowthChangedEventFilter =
  TypedEventFilter<GlobalLiquidityPositionRealizedProfitGrowthChangedEvent>;

export interface GlobalRiskBufferFundChangedEventObject {
  riskBufferFundAfter: BigNumber;
}
export type GlobalRiskBufferFundChangedEvent = TypedEvent<
  [BigNumber],
  GlobalRiskBufferFundChangedEventObject
>;

export type GlobalRiskBufferFundChangedEventFilter =
  TypedEventFilter<GlobalRiskBufferFundChangedEvent>;

export interface GlobalRiskBufferFundGovUsedEventObject {
  receiver: string;
  riskBufferFundDelta: BigNumber;
}
export type GlobalRiskBufferFundGovUsedEvent = TypedEvent<
  [string, BigNumber],
  GlobalRiskBufferFundGovUsedEventObject
>;

export type GlobalRiskBufferFundGovUsedEventFilter =
  TypedEventFilter<GlobalRiskBufferFundGovUsedEvent>;

export interface GlobalUnrealizedLossMetricsChangedEventObject {
  lastZeroLossTimeAfter: BigNumber;
  liquidityAfter: BigNumber;
  liquidityTimesUnrealizedLossAfter: BigNumber;
}
export type GlobalUnrealizedLossMetricsChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  GlobalUnrealizedLossMetricsChangedEventObject
>;

export type GlobalUnrealizedLossMetricsChangedEventFilter =
  TypedEventFilter<GlobalUnrealizedLossMetricsChangedEvent>;

export interface LiquidityPositionClosedEventObject {
  positionID: BigNumber;
  margin: BigNumber;
  unrealizedLoss: BigNumber;
  realizedProfit: BigNumber;
  receiver: string;
}
export type LiquidityPositionClosedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  LiquidityPositionClosedEventObject
>;

export type LiquidityPositionClosedEventFilter =
  TypedEventFilter<LiquidityPositionClosedEvent>;

export interface LiquidityPositionLiquidatedEventObject {
  liquidator: string;
  positionID: BigNumber;
  realizedProfit: BigNumber;
  riskBufferFundDelta: BigNumber;
  liquidationExecutionFee: BigNumber;
  feeReceiver: string;
}
export type LiquidityPositionLiquidatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
  LiquidityPositionLiquidatedEventObject
>;

export type LiquidityPositionLiquidatedEventFilter =
  TypedEventFilter<LiquidityPositionLiquidatedEvent>;

export interface LiquidityPositionMarginAdjustedEventObject {
  positionID: BigNumber;
  marginDelta: BigNumber;
  marginAfter: BigNumber;
  entryRealizedProfitGrowthAfterX64: BigNumber;
  receiver: string;
}
export type LiquidityPositionMarginAdjustedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  LiquidityPositionMarginAdjustedEventObject
>;

export type LiquidityPositionMarginAdjustedEventFilter =
  TypedEventFilter<LiquidityPositionMarginAdjustedEvent>;

export interface LiquidityPositionOpenedEventObject {
  account: string;
  positionID: BigNumber;
  margin: BigNumber;
  liquidity: BigNumber;
  entryUnrealizedLoss: BigNumber;
  realizedProfitGrowthX64: BigNumber;
}
export type LiquidityPositionOpenedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidityPositionOpenedEventObject
>;

export type LiquidityPositionOpenedEventFilter =
  TypedEventFilter<LiquidityPositionOpenedEvent>;

export interface RiskBufferFundPositionDecreasedEventObject {
  account: string;
  liquidityAfter: BigNumber;
  receiver: string;
}
export type RiskBufferFundPositionDecreasedEvent = TypedEvent<
  [string, BigNumber, string],
  RiskBufferFundPositionDecreasedEventObject
>;

export type RiskBufferFundPositionDecreasedEventFilter =
  TypedEventFilter<RiskBufferFundPositionDecreasedEvent>;

export interface RiskBufferFundPositionIncreasedEventObject {
  account: string;
  liquidityAfter: BigNumber;
  unlockTimeAfter: BigNumber;
}
export type RiskBufferFundPositionIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RiskBufferFundPositionIncreasedEventObject
>;

export type RiskBufferFundPositionIncreasedEventFilter =
  TypedEventFilter<RiskBufferFundPositionIncreasedEvent>;

export interface IPoolLiquidityPosition extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolLiquidityPositionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustLiquidityPositionMargin(
      positionID: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeLiquidityPosition(
      positionID: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseRiskBufferFundPosition(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        riskBufferFund: BigNumber;
        liquidity: BigNumber;
      }
    >;

    globalUnrealizedLossMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastZeroLossTime: BigNumber;
        liquidity: BigNumber;
        liquidityTimesUnrealizedLoss: BigNumber;
      }
    >;

    govUseRiskBufferFund(
      receiver: PromiseOrValue<string>,
      riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseRiskBufferFundPosition(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidateLiquidityPosition(
      positionID: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidityPositionAccount(
      positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { account: string }>;

    liquidityPositions(
      positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        margin: BigNumber;
        liquidity: BigNumber;
        entryUnrealizedLoss: BigNumber;
        entryRealizedProfitGrowthX64: BigNumber;
        entryTime: BigNumber;
        account: string;
      }
    >;

    openLiquidityPosition(
      account: PromiseOrValue<string>,
      margin: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    riskBufferFundPositions(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { liquidity: BigNumber; unlockTime: BigNumber }
    >;
  };

  adjustLiquidityPositionMargin(
    positionID: PromiseOrValue<BigNumberish>,
    marginDelta: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeLiquidityPosition(
    positionID: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseRiskBufferFundPosition(
    account: PromiseOrValue<string>,
    liquidityDelta: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalLiquidityPosition(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      netSize: BigNumber;
      liquidationBufferNetSize: BigNumber;
      entryPriceX96: BigNumber;
      side: number;
      liquidity: BigNumber;
      realizedProfitGrowthX64: BigNumber;
    }
  >;

  globalRiskBufferFund(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { riskBufferFund: BigNumber; liquidity: BigNumber }
  >;

  globalUnrealizedLossMetrics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      lastZeroLossTime: BigNumber;
      liquidity: BigNumber;
      liquidityTimesUnrealizedLoss: BigNumber;
    }
  >;

  govUseRiskBufferFund(
    receiver: PromiseOrValue<string>,
    riskBufferFundDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseRiskBufferFundPosition(
    account: PromiseOrValue<string>,
    liquidityDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidateLiquidityPosition(
    positionID: PromiseOrValue<BigNumberish>,
    feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidityPositionAccount(
    positionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  liquidityPositions(
    positionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      margin: BigNumber;
      liquidity: BigNumber;
      entryUnrealizedLoss: BigNumber;
      entryRealizedProfitGrowthX64: BigNumber;
      entryTime: BigNumber;
      account: string;
    }
  >;

  openLiquidityPosition(
    account: PromiseOrValue<string>,
    margin: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  riskBufferFundPositions(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { liquidity: BigNumber; unlockTime: BigNumber }
  >;

  callStatic: {
    adjustLiquidityPositionMargin(
      positionID: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeLiquidityPosition(
      positionID: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseRiskBufferFundPosition(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        netSize: BigNumber;
        liquidationBufferNetSize: BigNumber;
        entryPriceX96: BigNumber;
        side: number;
        liquidity: BigNumber;
        realizedProfitGrowthX64: BigNumber;
      }
    >;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        riskBufferFund: BigNumber;
        liquidity: BigNumber;
      }
    >;

    globalUnrealizedLossMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastZeroLossTime: BigNumber;
        liquidity: BigNumber;
        liquidityTimesUnrealizedLoss: BigNumber;
      }
    >;

    govUseRiskBufferFund(
      receiver: PromiseOrValue<string>,
      riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseRiskBufferFundPosition(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateLiquidityPosition(
      positionID: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityPositionAccount(
      positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    liquidityPositions(
      positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        margin: BigNumber;
        liquidity: BigNumber;
        entryUnrealizedLoss: BigNumber;
        entryRealizedProfitGrowthX64: BigNumber;
        entryTime: BigNumber;
        account: string;
      }
    >;

    openLiquidityPosition(
      account: PromiseOrValue<string>,
      margin: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    riskBufferFundPositions(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { liquidity: BigNumber; unlockTime: BigNumber }
    >;
  };

  filters: {
    "GlobalLiquidityPositionNetPositionAdjusted(uint128,uint128,uint160,uint8)"(
      netSizeAfter?: null,
      liquidationBufferNetSizeAfter?: null,
      entryPriceAfterX96?: null,
      sideAfter?: null
    ): GlobalLiquidityPositionNetPositionAdjustedEventFilter;
    GlobalLiquidityPositionNetPositionAdjusted(
      netSizeAfter?: null,
      liquidationBufferNetSizeAfter?: null,
      entryPriceAfterX96?: null,
      sideAfter?: null
    ): GlobalLiquidityPositionNetPositionAdjustedEventFilter;

    "GlobalLiquidityPositionRealizedProfitGrowthChanged(uint256)"(
      realizedProfitGrowthAfterX64?: null
    ): GlobalLiquidityPositionRealizedProfitGrowthChangedEventFilter;
    GlobalLiquidityPositionRealizedProfitGrowthChanged(
      realizedProfitGrowthAfterX64?: null
    ): GlobalLiquidityPositionRealizedProfitGrowthChangedEventFilter;

    "GlobalRiskBufferFundChanged(int256)"(
      riskBufferFundAfter?: null
    ): GlobalRiskBufferFundChangedEventFilter;
    GlobalRiskBufferFundChanged(
      riskBufferFundAfter?: null
    ): GlobalRiskBufferFundChangedEventFilter;

    "GlobalRiskBufferFundGovUsed(address,uint128)"(
      receiver?: PromiseOrValue<string> | null,
      riskBufferFundDelta?: null
    ): GlobalRiskBufferFundGovUsedEventFilter;
    GlobalRiskBufferFundGovUsed(
      receiver?: PromiseOrValue<string> | null,
      riskBufferFundDelta?: null
    ): GlobalRiskBufferFundGovUsedEventFilter;

    "GlobalUnrealizedLossMetricsChanged(uint64,uint128,uint256)"(
      lastZeroLossTimeAfter?: null,
      liquidityAfter?: null,
      liquidityTimesUnrealizedLossAfter?: null
    ): GlobalUnrealizedLossMetricsChangedEventFilter;
    GlobalUnrealizedLossMetricsChanged(
      lastZeroLossTimeAfter?: null,
      liquidityAfter?: null,
      liquidityTimesUnrealizedLossAfter?: null
    ): GlobalUnrealizedLossMetricsChangedEventFilter;

    "LiquidityPositionClosed(uint96,uint128,uint128,uint256,address)"(
      positionID?: PromiseOrValue<BigNumberish> | null,
      margin?: null,
      unrealizedLoss?: null,
      realizedProfit?: null,
      receiver?: null
    ): LiquidityPositionClosedEventFilter;
    LiquidityPositionClosed(
      positionID?: PromiseOrValue<BigNumberish> | null,
      margin?: null,
      unrealizedLoss?: null,
      realizedProfit?: null,
      receiver?: null
    ): LiquidityPositionClosedEventFilter;

    "LiquidityPositionLiquidated(address,uint96,uint256,uint256,uint64,address)"(
      liquidator?: PromiseOrValue<string> | null,
      positionID?: PromiseOrValue<BigNumberish> | null,
      realizedProfit?: null,
      riskBufferFundDelta?: null,
      liquidationExecutionFee?: null,
      feeReceiver?: null
    ): LiquidityPositionLiquidatedEventFilter;
    LiquidityPositionLiquidated(
      liquidator?: PromiseOrValue<string> | null,
      positionID?: PromiseOrValue<BigNumberish> | null,
      realizedProfit?: null,
      riskBufferFundDelta?: null,
      liquidationExecutionFee?: null,
      feeReceiver?: null
    ): LiquidityPositionLiquidatedEventFilter;

    "LiquidityPositionMarginAdjusted(uint96,int128,uint128,uint256,address)"(
      positionID?: PromiseOrValue<BigNumberish> | null,
      marginDelta?: null,
      marginAfter?: null,
      entryRealizedProfitGrowthAfterX64?: null,
      receiver?: null
    ): LiquidityPositionMarginAdjustedEventFilter;
    LiquidityPositionMarginAdjusted(
      positionID?: PromiseOrValue<BigNumberish> | null,
      marginDelta?: null,
      marginAfter?: null,
      entryRealizedProfitGrowthAfterX64?: null,
      receiver?: null
    ): LiquidityPositionMarginAdjustedEventFilter;

    "LiquidityPositionOpened(address,uint96,uint128,uint128,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      positionID?: null,
      margin?: null,
      liquidity?: null,
      entryUnrealizedLoss?: null,
      realizedProfitGrowthX64?: null
    ): LiquidityPositionOpenedEventFilter;
    LiquidityPositionOpened(
      account?: PromiseOrValue<string> | null,
      positionID?: null,
      margin?: null,
      liquidity?: null,
      entryUnrealizedLoss?: null,
      realizedProfitGrowthX64?: null
    ): LiquidityPositionOpenedEventFilter;

    "RiskBufferFundPositionDecreased(address,uint128,address)"(
      account?: PromiseOrValue<string> | null,
      liquidityAfter?: null,
      receiver?: null
    ): RiskBufferFundPositionDecreasedEventFilter;
    RiskBufferFundPositionDecreased(
      account?: PromiseOrValue<string> | null,
      liquidityAfter?: null,
      receiver?: null
    ): RiskBufferFundPositionDecreasedEventFilter;

    "RiskBufferFundPositionIncreased(address,uint128,uint64)"(
      account?: PromiseOrValue<string> | null,
      liquidityAfter?: null,
      unlockTimeAfter?: null
    ): RiskBufferFundPositionIncreasedEventFilter;
    RiskBufferFundPositionIncreased(
      account?: PromiseOrValue<string> | null,
      liquidityAfter?: null,
      unlockTimeAfter?: null
    ): RiskBufferFundPositionIncreasedEventFilter;
  };

  estimateGas: {
    adjustLiquidityPositionMargin(
      positionID: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeLiquidityPosition(
      positionID: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseRiskBufferFundPosition(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalLiquidityPosition(overrides?: CallOverrides): Promise<BigNumber>;

    globalRiskBufferFund(overrides?: CallOverrides): Promise<BigNumber>;

    globalUnrealizedLossMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    govUseRiskBufferFund(
      receiver: PromiseOrValue<string>,
      riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseRiskBufferFundPosition(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidateLiquidityPosition(
      positionID: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidityPositionAccount(
      positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityPositions(
      positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLiquidityPosition(
      account: PromiseOrValue<string>,
      margin: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    riskBufferFundPositions(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustLiquidityPositionMargin(
      positionID: PromiseOrValue<BigNumberish>,
      marginDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeLiquidityPosition(
      positionID: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseRiskBufferFundPosition(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalLiquidityPosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalRiskBufferFund(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalUnrealizedLossMetrics(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    govUseRiskBufferFund(
      receiver: PromiseOrValue<string>,
      riskBufferFundDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseRiskBufferFundPosition(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPosition(
      positionID: PromiseOrValue<BigNumberish>,
      feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidityPositionAccount(
      positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityPositions(
      positionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLiquidityPosition(
      account: PromiseOrValue<string>,
      margin: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    riskBufferFundPositions(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
