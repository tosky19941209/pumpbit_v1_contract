/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IRewardFarmCallbackInterface extends utils.Interface {
  functions: {
    "onChangeReferralToken(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "onLiquidityPositionChanged(address,int256)": FunctionFragment;
    "onPositionChanged(address,uint8,uint128,uint160)": FunctionFragment;
    "onRiskBufferFundPositionChanged(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "onChangeReferralToken"
      | "onLiquidityPositionChanged"
      | "onPositionChanged"
      | "onRiskBufferFundPositionChanged"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "onChangeReferralToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onLiquidityPositionChanged",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onPositionChanged",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onRiskBufferFundPositionChanged",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "onChangeReferralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLiquidityPositionChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onPositionChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRiskBufferFundPositionChanged",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRewardFarmCallback extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardFarmCallbackInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    onChangeReferralToken(
      referee: PromiseOrValue<string>,
      oldReferralToken: PromiseOrValue<BigNumberish>,
      oldReferralParentToken: PromiseOrValue<BigNumberish>,
      newReferralToken: PromiseOrValue<BigNumberish>,
      newReferralParentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onLiquidityPositionChanged(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onPositionChanged(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      sizeAfter: PromiseOrValue<BigNumberish>,
      entryPriceAfterX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onRiskBufferFundPositionChanged(
      account: PromiseOrValue<string>,
      liquidityAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  onChangeReferralToken(
    referee: PromiseOrValue<string>,
    oldReferralToken: PromiseOrValue<BigNumberish>,
    oldReferralParentToken: PromiseOrValue<BigNumberish>,
    newReferralToken: PromiseOrValue<BigNumberish>,
    newReferralParentToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onLiquidityPositionChanged(
    account: PromiseOrValue<string>,
    liquidityDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onPositionChanged(
    account: PromiseOrValue<string>,
    side: PromiseOrValue<BigNumberish>,
    sizeAfter: PromiseOrValue<BigNumberish>,
    entryPriceAfterX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onRiskBufferFundPositionChanged(
    account: PromiseOrValue<string>,
    liquidityAfter: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    onChangeReferralToken(
      referee: PromiseOrValue<string>,
      oldReferralToken: PromiseOrValue<BigNumberish>,
      oldReferralParentToken: PromiseOrValue<BigNumberish>,
      newReferralToken: PromiseOrValue<BigNumberish>,
      newReferralParentToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onLiquidityPositionChanged(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onPositionChanged(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      sizeAfter: PromiseOrValue<BigNumberish>,
      entryPriceAfterX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onRiskBufferFundPositionChanged(
      account: PromiseOrValue<string>,
      liquidityAfter: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    onChangeReferralToken(
      referee: PromiseOrValue<string>,
      oldReferralToken: PromiseOrValue<BigNumberish>,
      oldReferralParentToken: PromiseOrValue<BigNumberish>,
      newReferralToken: PromiseOrValue<BigNumberish>,
      newReferralParentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onLiquidityPositionChanged(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onPositionChanged(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      sizeAfter: PromiseOrValue<BigNumberish>,
      entryPriceAfterX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onRiskBufferFundPositionChanged(
      account: PromiseOrValue<string>,
      liquidityAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    onChangeReferralToken(
      referee: PromiseOrValue<string>,
      oldReferralToken: PromiseOrValue<BigNumberish>,
      oldReferralParentToken: PromiseOrValue<BigNumberish>,
      newReferralToken: PromiseOrValue<BigNumberish>,
      newReferralParentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onLiquidityPositionChanged(
      account: PromiseOrValue<string>,
      liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onPositionChanged(
      account: PromiseOrValue<string>,
      side: PromiseOrValue<BigNumberish>,
      sizeAfter: PromiseOrValue<BigNumberish>,
      entryPriceAfterX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onRiskBufferFundPositionChanged(
      account: PromiseOrValue<string>,
      liquidityAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
