/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IRewardFarm {
  export type ConfigStruct = {
    liquidityRate: PromiseOrValue<BigNumberish>;
    riskBufferFundLiquidityRate: PromiseOrValue<BigNumberish>;
    referralTokenRate: PromiseOrValue<BigNumberish>;
    referralParentTokenRate: PromiseOrValue<BigNumberish>;
  };

  export type ConfigStructOutput = [number, number, number, number] & {
    liquidityRate: number;
    riskBufferFundLiquidityRate: number;
    referralTokenRate: number;
    referralParentTokenRate: number;
  };
}

export interface IRewardFarmInterface extends utils.Interface {
  functions: {
    "collectLiquidityRewardBatch(address[],address,address)": FunctionFragment;
    "collectReferralRewardBatch(address[],uint256[],address)": FunctionFragment;
    "collectRiskBufferFundRewardBatch(address[],address,address)": FunctionFragment;
    "config()": FunctionFragment;
    "poolRewards(address)": FunctionFragment;
    "setConfig((uint32,uint32,uint32,uint32))": FunctionFragment;
    "setPoolsReward(address[],uint128[])": FunctionFragment;
    "setRewardCap(uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collectLiquidityRewardBatch"
      | "collectReferralRewardBatch"
      | "collectRiskBufferFundRewardBatch"
      | "config"
      | "poolRewards"
      | "setConfig"
      | "setPoolsReward"
      | "setRewardCap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collectLiquidityRewardBatch",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectReferralRewardBatch",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectRiskBufferFundRewardBatch",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [IRewardFarm.ConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolsReward",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectLiquidityRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectReferralRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectRiskBufferFundRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolsReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardCap",
    data: BytesLike
  ): Result;

  events: {
    "ConfigChanged(tuple)": EventFragment;
    "LiquidityRewardCollected(address[],address,address,uint256)": EventFragment;
    "LiquidityRewardDebtChanged(address,address,uint256)": EventFragment;
    "PoolLiquidityRewardGrowthIncreased(address,uint256,uint128)": EventFragment;
    "PoolReferralParentTokenRewardGrowthIncreased(address,uint256,uint128,uint256,uint128)": EventFragment;
    "PoolReferralTokenRewardGrowthIncreased(address,uint256,uint128,uint256,uint128)": EventFragment;
    "PoolRewardUpdated(address,uint160)": EventFragment;
    "PoolRiskBufferFundRewardGrowthIncreased(address,uint256,uint128)": EventFragment;
    "ReferralLiquidityRewardDebtChanged(address,uint256,uint256)": EventFragment;
    "ReferralPositionRewardDebtChanged(address,uint256,uint256)": EventFragment;
    "ReferralRewardCollected(address[],uint256[],address,uint256)": EventFragment;
    "RewardCapChanged(uint128)": EventFragment;
    "RiskBufferFundRewardCollected(address[],address,address,uint256)": EventFragment;
    "RiskBufferFundRewardDebtChanged(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRewardCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRewardDebtChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolLiquidityRewardGrowthIncreased"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolReferralParentTokenRewardGrowthIncreased"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolReferralTokenRewardGrowthIncreased"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolRewardUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolRiskBufferFundRewardGrowthIncreased"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReferralLiquidityRewardDebtChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReferralPositionRewardDebtChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralRewardCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardCapChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RiskBufferFundRewardCollected"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RiskBufferFundRewardDebtChanged"
  ): EventFragment;
}

export interface ConfigChangedEventObject {
  newConfig: IRewardFarm.ConfigStructOutput;
}
export type ConfigChangedEvent = TypedEvent<
  [IRewardFarm.ConfigStructOutput],
  ConfigChangedEventObject
>;

export type ConfigChangedEventFilter = TypedEventFilter<ConfigChangedEvent>;

export interface LiquidityRewardCollectedEventObject {
  pools: string[];
  account: string;
  receiver: string;
  rewardDebt: BigNumber;
}
export type LiquidityRewardCollectedEvent = TypedEvent<
  [string[], string, string, BigNumber],
  LiquidityRewardCollectedEventObject
>;

export type LiquidityRewardCollectedEventFilter =
  TypedEventFilter<LiquidityRewardCollectedEvent>;

export interface LiquidityRewardDebtChangedEventObject {
  pool: string;
  account: string;
  rewardDebtDelta: BigNumber;
}
export type LiquidityRewardDebtChangedEvent = TypedEvent<
  [string, string, BigNumber],
  LiquidityRewardDebtChangedEventObject
>;

export type LiquidityRewardDebtChangedEventFilter =
  TypedEventFilter<LiquidityRewardDebtChangedEvent>;

export interface PoolLiquidityRewardGrowthIncreasedEventObject {
  pool: string;
  rewardDelta: BigNumber;
  rewardGrowthAfterX64: BigNumber;
}
export type PoolLiquidityRewardGrowthIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PoolLiquidityRewardGrowthIncreasedEventObject
>;

export type PoolLiquidityRewardGrowthIncreasedEventFilter =
  TypedEventFilter<PoolLiquidityRewardGrowthIncreasedEvent>;

export interface PoolReferralParentTokenRewardGrowthIncreasedEventObject {
  pool: string;
  rewardDelta: BigNumber;
  rewardGrowthAfterX64: BigNumber;
  positionRewardDelta: BigNumber;
  positionRewardGrowthAfterX64: BigNumber;
}
export type PoolReferralParentTokenRewardGrowthIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  PoolReferralParentTokenRewardGrowthIncreasedEventObject
>;

export type PoolReferralParentTokenRewardGrowthIncreasedEventFilter =
  TypedEventFilter<PoolReferralParentTokenRewardGrowthIncreasedEvent>;

export interface PoolReferralTokenRewardGrowthIncreasedEventObject {
  pool: string;
  rewardDelta: BigNumber;
  rewardGrowthAfterX64: BigNumber;
  positionRewardDelta: BigNumber;
  positionRewardGrowthAfterX64: BigNumber;
}
export type PoolReferralTokenRewardGrowthIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  PoolReferralTokenRewardGrowthIncreasedEventObject
>;

export type PoolReferralTokenRewardGrowthIncreasedEventFilter =
  TypedEventFilter<PoolReferralTokenRewardGrowthIncreasedEvent>;

export interface PoolRewardUpdatedEventObject {
  pool: string;
  rewardPerSecond: BigNumber;
}
export type PoolRewardUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PoolRewardUpdatedEventObject
>;

export type PoolRewardUpdatedEventFilter =
  TypedEventFilter<PoolRewardUpdatedEvent>;

export interface PoolRiskBufferFundRewardGrowthIncreasedEventObject {
  pool: string;
  rewardDelta: BigNumber;
  rewardGrowthAfterX64: BigNumber;
}
export type PoolRiskBufferFundRewardGrowthIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PoolRiskBufferFundRewardGrowthIncreasedEventObject
>;

export type PoolRiskBufferFundRewardGrowthIncreasedEventFilter =
  TypedEventFilter<PoolRiskBufferFundRewardGrowthIncreasedEvent>;

export interface ReferralLiquidityRewardDebtChangedEventObject {
  pool: string;
  referralToken: BigNumber;
  rewardDebtDelta: BigNumber;
}
export type ReferralLiquidityRewardDebtChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReferralLiquidityRewardDebtChangedEventObject
>;

export type ReferralLiquidityRewardDebtChangedEventFilter =
  TypedEventFilter<ReferralLiquidityRewardDebtChangedEvent>;

export interface ReferralPositionRewardDebtChangedEventObject {
  pool: string;
  referralToken: BigNumber;
  rewardDebtDelta: BigNumber;
}
export type ReferralPositionRewardDebtChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReferralPositionRewardDebtChangedEventObject
>;

export type ReferralPositionRewardDebtChangedEventFilter =
  TypedEventFilter<ReferralPositionRewardDebtChangedEvent>;

export interface ReferralRewardCollectedEventObject {
  pools: string[];
  referralTokens: BigNumber[];
  receiver: string;
  rewardDebt: BigNumber;
}
export type ReferralRewardCollectedEvent = TypedEvent<
  [string[], BigNumber[], string, BigNumber],
  ReferralRewardCollectedEventObject
>;

export type ReferralRewardCollectedEventFilter =
  TypedEventFilter<ReferralRewardCollectedEvent>;

export interface RewardCapChangedEventObject {
  rewardCapAfter: BigNumber;
}
export type RewardCapChangedEvent = TypedEvent<
  [BigNumber],
  RewardCapChangedEventObject
>;

export type RewardCapChangedEventFilter =
  TypedEventFilter<RewardCapChangedEvent>;

export interface RiskBufferFundRewardCollectedEventObject {
  pools: string[];
  account: string;
  receiver: string;
  rewardDebt: BigNumber;
}
export type RiskBufferFundRewardCollectedEvent = TypedEvent<
  [string[], string, string, BigNumber],
  RiskBufferFundRewardCollectedEventObject
>;

export type RiskBufferFundRewardCollectedEventFilter =
  TypedEventFilter<RiskBufferFundRewardCollectedEvent>;

export interface RiskBufferFundRewardDebtChangedEventObject {
  pool: string;
  account: string;
  rewardDebtDelta: BigNumber;
}
export type RiskBufferFundRewardDebtChangedEvent = TypedEvent<
  [string, string, BigNumber],
  RiskBufferFundRewardDebtChangedEventObject
>;

export type RiskBufferFundRewardDebtChangedEventFilter =
  TypedEventFilter<RiskBufferFundRewardDebtChangedEvent>;

export interface IRewardFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardFarmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collectLiquidityRewardBatch(
      pools: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectReferralRewardBatch(
      pools: PromiseOrValue<string>[],
      referralTokens: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectRiskBufferFundRewardBatch(
      pools: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        liquidityRate: number;
        riskBufferFundLiquidityRate: number;
        referralTokenRate: number;
        referralParentTokenRate: number;
      }
    >;

    poolRewards(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidity: BigNumber;
        liquidityRewardGrowthX64: BigNumber;
        referralLiquidity: BigNumber;
        referralTokenRewardGrowthX64: BigNumber;
        referralParentTokenRewardGrowthX64: BigNumber;
        referralPosition: BigNumber;
        referralTokenPositionRewardGrowthX64: BigNumber;
        referralParentTokenPositionRewardGrowthX64: BigNumber;
        riskBufferFundLiquidity: BigNumber;
        riskBufferFundRewardGrowthX64: BigNumber;
        rewardPerSecond: BigNumber;
        lastMintTime: BigNumber;
      }
    >;

    setConfig(
      config: IRewardFarm.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolsReward(
      pools: PromiseOrValue<string>[],
      rewardsPerSecond: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardCap(
      rewardCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  collectLiquidityRewardBatch(
    pools: PromiseOrValue<string>[],
    account: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectReferralRewardBatch(
    pools: PromiseOrValue<string>[],
    referralTokens: PromiseOrValue<BigNumberish>[],
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectRiskBufferFundRewardBatch(
    pools: PromiseOrValue<string>[],
    account: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      liquidityRate: number;
      riskBufferFundLiquidityRate: number;
      referralTokenRate: number;
      referralParentTokenRate: number;
    }
  >;

  poolRewards(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      liquidity: BigNumber;
      liquidityRewardGrowthX64: BigNumber;
      referralLiquidity: BigNumber;
      referralTokenRewardGrowthX64: BigNumber;
      referralParentTokenRewardGrowthX64: BigNumber;
      referralPosition: BigNumber;
      referralTokenPositionRewardGrowthX64: BigNumber;
      referralParentTokenPositionRewardGrowthX64: BigNumber;
      riskBufferFundLiquidity: BigNumber;
      riskBufferFundRewardGrowthX64: BigNumber;
      rewardPerSecond: BigNumber;
      lastMintTime: BigNumber;
    }
  >;

  setConfig(
    config: IRewardFarm.ConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolsReward(
    pools: PromiseOrValue<string>[],
    rewardsPerSecond: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardCap(
    rewardCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collectLiquidityRewardBatch(
      pools: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectReferralRewardBatch(
      pools: PromiseOrValue<string>[],
      referralTokens: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectRiskBufferFundRewardBatch(
      pools: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        liquidityRate: number;
        riskBufferFundLiquidityRate: number;
        referralTokenRate: number;
        referralParentTokenRate: number;
      }
    >;

    poolRewards(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidity: BigNumber;
        liquidityRewardGrowthX64: BigNumber;
        referralLiquidity: BigNumber;
        referralTokenRewardGrowthX64: BigNumber;
        referralParentTokenRewardGrowthX64: BigNumber;
        referralPosition: BigNumber;
        referralTokenPositionRewardGrowthX64: BigNumber;
        referralParentTokenPositionRewardGrowthX64: BigNumber;
        riskBufferFundLiquidity: BigNumber;
        riskBufferFundRewardGrowthX64: BigNumber;
        rewardPerSecond: BigNumber;
        lastMintTime: BigNumber;
      }
    >;

    setConfig(
      config: IRewardFarm.ConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolsReward(
      pools: PromiseOrValue<string>[],
      rewardsPerSecond: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardCap(
      rewardCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConfigChanged(tuple)"(newConfig?: null): ConfigChangedEventFilter;
    ConfigChanged(newConfig?: null): ConfigChangedEventFilter;

    "LiquidityRewardCollected(address[],address,address,uint256)"(
      pools?: null,
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): LiquidityRewardCollectedEventFilter;
    LiquidityRewardCollected(
      pools?: null,
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): LiquidityRewardCollectedEventFilter;

    "LiquidityRewardDebtChanged(address,address,uint256)"(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      rewardDebtDelta?: null
    ): LiquidityRewardDebtChangedEventFilter;
    LiquidityRewardDebtChanged(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      rewardDebtDelta?: null
    ): LiquidityRewardDebtChangedEventFilter;

    "PoolLiquidityRewardGrowthIncreased(address,uint256,uint128)"(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null
    ): PoolLiquidityRewardGrowthIncreasedEventFilter;
    PoolLiquidityRewardGrowthIncreased(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null
    ): PoolLiquidityRewardGrowthIncreasedEventFilter;

    "PoolReferralParentTokenRewardGrowthIncreased(address,uint256,uint128,uint256,uint128)"(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null,
      positionRewardDelta?: null,
      positionRewardGrowthAfterX64?: null
    ): PoolReferralParentTokenRewardGrowthIncreasedEventFilter;
    PoolReferralParentTokenRewardGrowthIncreased(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null,
      positionRewardDelta?: null,
      positionRewardGrowthAfterX64?: null
    ): PoolReferralParentTokenRewardGrowthIncreasedEventFilter;

    "PoolReferralTokenRewardGrowthIncreased(address,uint256,uint128,uint256,uint128)"(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null,
      positionRewardDelta?: null,
      positionRewardGrowthAfterX64?: null
    ): PoolReferralTokenRewardGrowthIncreasedEventFilter;
    PoolReferralTokenRewardGrowthIncreased(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null,
      positionRewardDelta?: null,
      positionRewardGrowthAfterX64?: null
    ): PoolReferralTokenRewardGrowthIncreasedEventFilter;

    "PoolRewardUpdated(address,uint160)"(
      pool?: PromiseOrValue<string> | null,
      rewardPerSecond?: null
    ): PoolRewardUpdatedEventFilter;
    PoolRewardUpdated(
      pool?: PromiseOrValue<string> | null,
      rewardPerSecond?: null
    ): PoolRewardUpdatedEventFilter;

    "PoolRiskBufferFundRewardGrowthIncreased(address,uint256,uint128)"(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null
    ): PoolRiskBufferFundRewardGrowthIncreasedEventFilter;
    PoolRiskBufferFundRewardGrowthIncreased(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null
    ): PoolRiskBufferFundRewardGrowthIncreasedEventFilter;

    "ReferralLiquidityRewardDebtChanged(address,uint256,uint256)"(
      pool?: PromiseOrValue<string> | null,
      referralToken?: PromiseOrValue<BigNumberish> | null,
      rewardDebtDelta?: null
    ): ReferralLiquidityRewardDebtChangedEventFilter;
    ReferralLiquidityRewardDebtChanged(
      pool?: PromiseOrValue<string> | null,
      referralToken?: PromiseOrValue<BigNumberish> | null,
      rewardDebtDelta?: null
    ): ReferralLiquidityRewardDebtChangedEventFilter;

    "ReferralPositionRewardDebtChanged(address,uint256,uint256)"(
      pool?: PromiseOrValue<string> | null,
      referralToken?: PromiseOrValue<BigNumberish> | null,
      rewardDebtDelta?: null
    ): ReferralPositionRewardDebtChangedEventFilter;
    ReferralPositionRewardDebtChanged(
      pool?: PromiseOrValue<string> | null,
      referralToken?: PromiseOrValue<BigNumberish> | null,
      rewardDebtDelta?: null
    ): ReferralPositionRewardDebtChangedEventFilter;

    "ReferralRewardCollected(address[],uint256[],address,uint256)"(
      pools?: null,
      referralTokens?: null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): ReferralRewardCollectedEventFilter;
    ReferralRewardCollected(
      pools?: null,
      referralTokens?: null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): ReferralRewardCollectedEventFilter;

    "RewardCapChanged(uint128)"(
      rewardCapAfter?: null
    ): RewardCapChangedEventFilter;
    RewardCapChanged(rewardCapAfter?: null): RewardCapChangedEventFilter;

    "RiskBufferFundRewardCollected(address[],address,address,uint256)"(
      pools?: null,
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): RiskBufferFundRewardCollectedEventFilter;
    RiskBufferFundRewardCollected(
      pools?: null,
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): RiskBufferFundRewardCollectedEventFilter;

    "RiskBufferFundRewardDebtChanged(address,address,uint256)"(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      rewardDebtDelta?: null
    ): RiskBufferFundRewardDebtChangedEventFilter;
    RiskBufferFundRewardDebtChanged(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      rewardDebtDelta?: null
    ): RiskBufferFundRewardDebtChangedEventFilter;
  };

  estimateGas: {
    collectLiquidityRewardBatch(
      pools: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectReferralRewardBatch(
      pools: PromiseOrValue<string>[],
      referralTokens: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectRiskBufferFundRewardBatch(
      pools: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    poolRewards(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setConfig(
      config: IRewardFarm.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolsReward(
      pools: PromiseOrValue<string>[],
      rewardsPerSecond: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardCap(
      rewardCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collectLiquidityRewardBatch(
      pools: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectReferralRewardBatch(
      pools: PromiseOrValue<string>[],
      referralTokens: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectRiskBufferFundRewardBatch(
      pools: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRewards(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setConfig(
      config: IRewardFarm.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolsReward(
      pools: PromiseOrValue<string>[],
      rewardsPerSecond: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardCap(
      rewardCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
