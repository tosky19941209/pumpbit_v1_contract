/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace PositionFarmRewardDistributor {
  export type PoolTotalRewardStruct = {
    pool: PromiseOrValue<string>;
    totalReward: PromiseOrValue<BigNumberish>;
  };

  export type PoolTotalRewardStructOutput = [string, BigNumber] & {
    pool: string;
    totalReward: BigNumber;
  };
}

export interface PositionFarmRewardDistributorInterface
  extends utils.Interface {
  functions: {
    "acceptGov()": FunctionFragment;
    "changeGov(address)": FunctionFragment;
    "collectPositionFarmRewardBatch(uint32,(address,uint256)[],bytes,address)": FunctionFragment;
    "collectPositionFarmRewardBatchByCollector(address,uint32,(address,uint256)[],bytes,address)": FunctionFragment;
    "collectedRewards(address,address)": FunctionFragment;
    "collectors(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "pendingGov()": FunctionFragment;
    "setCollector(address,bool)": FunctionFragment;
    "signer()": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptGov"
      | "changeGov"
      | "collectPositionFarmRewardBatch"
      | "collectPositionFarmRewardBatchByCollector"
      | "collectedRewards"
      | "collectors"
      | "gov"
      | "nonces"
      | "pendingGov"
      | "setCollector"
      | "signer"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "acceptGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPositionFarmRewardBatch",
    values: [
      PromiseOrValue<BigNumberish>,
      PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPositionFarmRewardBatchByCollector",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollector",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "acceptGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectPositionFarmRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPositionFarmRewardBatchByCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "ChangeGovStarted(address,address)": EventFragment;
    "GovChanged(address,address)": EventFragment;
    "PositionFarmRewardCollected(address,address,uint32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeGovStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PositionFarmRewardCollected"
  ): EventFragment;
}

export interface ChangeGovStartedEventObject {
  previousGov: string;
  newGov: string;
}
export type ChangeGovStartedEvent = TypedEvent<
  [string, string],
  ChangeGovStartedEventObject
>;

export type ChangeGovStartedEventFilter =
  TypedEventFilter<ChangeGovStartedEvent>;

export interface GovChangedEventObject {
  previousGov: string;
  newGov: string;
}
export type GovChangedEvent = TypedEvent<
  [string, string],
  GovChangedEventObject
>;

export type GovChangedEventFilter = TypedEventFilter<GovChangedEvent>;

export interface PositionFarmRewardCollectedEventObject {
  pool: string;
  account: string;
  nonce: number;
  receiver: string;
  amount: BigNumber;
}
export type PositionFarmRewardCollectedEvent = TypedEvent<
  [string, string, number, string, BigNumber],
  PositionFarmRewardCollectedEventObject
>;

export type PositionFarmRewardCollectedEventFilter =
  TypedEventFilter<PositionFarmRewardCollectedEvent>;

export interface PositionFarmRewardDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionFarmRewardDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectPositionFarmRewardBatch(
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectPositionFarmRewardBatchByCollector(
      _account: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectedRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collectors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    pendingGov(overrides?: CallOverrides): Promise<[string]>;

    setCollector(
      _collector: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptGov(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeGov(
    _newGov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectPositionFarmRewardBatch(
    _nonce: PromiseOrValue<BigNumberish>,
    _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
    _signature: PromiseOrValue<BytesLike>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectPositionFarmRewardBatchByCollector(
    _account: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
    _signature: PromiseOrValue<BytesLike>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectedRewards(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collectors(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  gov(overrides?: CallOverrides): Promise<string>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  pendingGov(overrides?: CallOverrides): Promise<string>;

  setCollector(
    _collector: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptGov(overrides?: CallOverrides): Promise<void>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectPositionFarmRewardBatch(
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectPositionFarmRewardBatchByCollector(
      _account: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectedRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    gov(overrides?: CallOverrides): Promise<string>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    pendingGov(overrides?: CallOverrides): Promise<string>;

    setCollector(
      _collector: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ChangeGovStarted(address,address)"(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): ChangeGovStartedEventFilter;
    ChangeGovStarted(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): ChangeGovStartedEventFilter;

    "GovChanged(address,address)"(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): GovChangedEventFilter;
    GovChanged(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): GovChangedEventFilter;

    "PositionFarmRewardCollected(address,address,uint32,address,uint256)"(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      amount?: null
    ): PositionFarmRewardCollectedEventFilter;
    PositionFarmRewardCollected(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      amount?: null
    ): PositionFarmRewardCollectedEventFilter;
  };

  estimateGas: {
    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectPositionFarmRewardBatch(
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectPositionFarmRewardBatchByCollector(
      _account: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectedRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingGov(overrides?: CallOverrides): Promise<BigNumber>;

    setCollector(
      _collector: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectPositionFarmRewardBatch(
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectPositionFarmRewardBatchByCollector(
      _account: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _poolTotalRewards: PositionFarmRewardDistributor.PoolTotalRewardStruct[],
      _signature: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectedRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCollector(
      _collector: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
