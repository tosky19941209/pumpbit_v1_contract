/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IRewardFarm {
  export type ConfigStruct = {
    liquidityRate: PromiseOrValue<BigNumberish>;
    riskBufferFundLiquidityRate: PromiseOrValue<BigNumberish>;
    referralTokenRate: PromiseOrValue<BigNumberish>;
    referralParentTokenRate: PromiseOrValue<BigNumberish>;
  };

  export type ConfigStructOutput = [number, number, number, number] & {
    liquidityRate: number;
    riskBufferFundLiquidityRate: number;
    referralTokenRate: number;
    referralParentTokenRate: number;
  };
}

export interface RewardFarmInterface extends utils.Interface {
  functions: {
    "EFC()": FunctionFragment;
    "EQU()": FunctionFragment;
    "acceptGov()": FunctionFragment;
    "alreadyBoundReferralTokens(address)": FunctionFragment;
    "changeGov(address)": FunctionFragment;
    "collectLiquidityRewardBatch(address[],address,address)": FunctionFragment;
    "collectReferralRewardBatch(address[],uint256[],address)": FunctionFragment;
    "collectRiskBufferFundRewardBatch(address[],address,address)": FunctionFragment;
    "config()": FunctionFragment;
    "gov()": FunctionFragment;
    "indexPools(uint256)": FunctionFragment;
    "liquidityRewards(address)": FunctionFragment;
    "liquidityRewardsWithPool(address,address)": FunctionFragment;
    "mintTime()": FunctionFragment;
    "mintedReward()": FunctionFragment;
    "onChangeReferralToken(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "onLiquidityPositionChanged(address,int256)": FunctionFragment;
    "onPositionChanged(address,uint8,uint128,uint160)": FunctionFragment;
    "onRiskBufferFundPositionChanged(address,uint256)": FunctionFragment;
    "pendingGov()": FunctionFragment;
    "poolFactory()": FunctionFragment;
    "poolIndexNext()": FunctionFragment;
    "poolIndexes(address)": FunctionFragment;
    "poolRewards(address)": FunctionFragment;
    "positions(address)": FunctionFragment;
    "positionsWithPool(address,address)": FunctionFragment;
    "referralMultiplier()": FunctionFragment;
    "referralRewards(uint256)": FunctionFragment;
    "referralRewardsWithPool(uint256,address)": FunctionFragment;
    "rewardCap()": FunctionFragment;
    "riskBufferFundRewards(address)": FunctionFragment;
    "riskBufferFundRewardsWithPool(address,address)": FunctionFragment;
    "router()": FunctionFragment;
    "setConfig((uint32,uint32,uint32,uint32))": FunctionFragment;
    "setPoolsReward(address[],uint128[])": FunctionFragment;
    "setRewardCap(uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EFC"
      | "EQU"
      | "acceptGov"
      | "alreadyBoundReferralTokens"
      | "changeGov"
      | "collectLiquidityRewardBatch"
      | "collectReferralRewardBatch"
      | "collectRiskBufferFundRewardBatch"
      | "config"
      | "gov"
      | "indexPools"
      | "liquidityRewards"
      | "liquidityRewardsWithPool"
      | "mintTime"
      | "mintedReward"
      | "onChangeReferralToken"
      | "onLiquidityPositionChanged"
      | "onPositionChanged"
      | "onRiskBufferFundPositionChanged"
      | "pendingGov"
      | "poolFactory"
      | "poolIndexNext"
      | "poolIndexes"
      | "poolRewards"
      | "positions"
      | "positionsWithPool"
      | "referralMultiplier"
      | "referralRewards"
      | "referralRewardsWithPool"
      | "rewardCap"
      | "riskBufferFundRewards"
      | "riskBufferFundRewardsWithPool"
      | "router"
      | "setConfig"
      | "setPoolsReward"
      | "setRewardCap"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "EFC", values?: undefined): string;
  encodeFunctionData(functionFragment: "EQU", values?: undefined): string;
  encodeFunctionData(functionFragment: "acceptGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "alreadyBoundReferralTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectLiquidityRewardBatch",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectReferralRewardBatch",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectRiskBufferFundRewardBatch",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "indexPools",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityRewardsWithPool",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "mintTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintedReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onChangeReferralToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onLiquidityPositionChanged",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onPositionChanged",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onRiskBufferFundPositionChanged",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolIndexNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolIndexes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "positionsWithPool",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "referralMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "referralRewardsWithPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "rewardCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "riskBufferFundRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "riskBufferFundRewardsWithPool",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [IRewardFarm.ConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolsReward",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "EFC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "EQU", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "alreadyBoundReferralTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectLiquidityRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectReferralRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectRiskBufferFundRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "indexPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityRewardsWithPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onChangeReferralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLiquidityPositionChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onPositionChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRiskBufferFundPositionChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolIndexNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionsWithPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralRewardsWithPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "riskBufferFundRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riskBufferFundRewardsWithPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolsReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardCap",
    data: BytesLike
  ): Result;

  events: {
    "ChangeGovStarted(address,address)": EventFragment;
    "ConfigChanged(tuple)": EventFragment;
    "GovChanged(address,address)": EventFragment;
    "LiquidityRewardCollected(address[],address,address,uint256)": EventFragment;
    "LiquidityRewardDebtChanged(address,address,uint256)": EventFragment;
    "PoolLiquidityRewardGrowthIncreased(address,uint256,uint128)": EventFragment;
    "PoolReferralParentTokenRewardGrowthIncreased(address,uint256,uint128,uint256,uint128)": EventFragment;
    "PoolReferralTokenRewardGrowthIncreased(address,uint256,uint128,uint256,uint128)": EventFragment;
    "PoolRewardUpdated(address,uint160)": EventFragment;
    "PoolRiskBufferFundRewardGrowthIncreased(address,uint256,uint128)": EventFragment;
    "ReferralLiquidityRewardDebtChanged(address,uint256,uint256)": EventFragment;
    "ReferralPositionRewardDebtChanged(address,uint256,uint256)": EventFragment;
    "ReferralRewardCollected(address[],uint256[],address,uint256)": EventFragment;
    "RewardCapChanged(uint128)": EventFragment;
    "RiskBufferFundRewardCollected(address[],address,address,uint256)": EventFragment;
    "RiskBufferFundRewardDebtChanged(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeGovStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRewardCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRewardDebtChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolLiquidityRewardGrowthIncreased"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolReferralParentTokenRewardGrowthIncreased"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolReferralTokenRewardGrowthIncreased"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolRewardUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolRiskBufferFundRewardGrowthIncreased"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReferralLiquidityRewardDebtChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReferralPositionRewardDebtChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralRewardCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardCapChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RiskBufferFundRewardCollected"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RiskBufferFundRewardDebtChanged"
  ): EventFragment;
}

export interface ChangeGovStartedEventObject {
  previousGov: string;
  newGov: string;
}
export type ChangeGovStartedEvent = TypedEvent<
  [string, string],
  ChangeGovStartedEventObject
>;

export type ChangeGovStartedEventFilter =
  TypedEventFilter<ChangeGovStartedEvent>;

export interface ConfigChangedEventObject {
  newConfig: IRewardFarm.ConfigStructOutput;
}
export type ConfigChangedEvent = TypedEvent<
  [IRewardFarm.ConfigStructOutput],
  ConfigChangedEventObject
>;

export type ConfigChangedEventFilter = TypedEventFilter<ConfigChangedEvent>;

export interface GovChangedEventObject {
  previousGov: string;
  newGov: string;
}
export type GovChangedEvent = TypedEvent<
  [string, string],
  GovChangedEventObject
>;

export type GovChangedEventFilter = TypedEventFilter<GovChangedEvent>;

export interface LiquidityRewardCollectedEventObject {
  pools: string[];
  account: string;
  receiver: string;
  rewardDebt: BigNumber;
}
export type LiquidityRewardCollectedEvent = TypedEvent<
  [string[], string, string, BigNumber],
  LiquidityRewardCollectedEventObject
>;

export type LiquidityRewardCollectedEventFilter =
  TypedEventFilter<LiquidityRewardCollectedEvent>;

export interface LiquidityRewardDebtChangedEventObject {
  pool: string;
  account: string;
  rewardDebtDelta: BigNumber;
}
export type LiquidityRewardDebtChangedEvent = TypedEvent<
  [string, string, BigNumber],
  LiquidityRewardDebtChangedEventObject
>;

export type LiquidityRewardDebtChangedEventFilter =
  TypedEventFilter<LiquidityRewardDebtChangedEvent>;

export interface PoolLiquidityRewardGrowthIncreasedEventObject {
  pool: string;
  rewardDelta: BigNumber;
  rewardGrowthAfterX64: BigNumber;
}
export type PoolLiquidityRewardGrowthIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PoolLiquidityRewardGrowthIncreasedEventObject
>;

export type PoolLiquidityRewardGrowthIncreasedEventFilter =
  TypedEventFilter<PoolLiquidityRewardGrowthIncreasedEvent>;

export interface PoolReferralParentTokenRewardGrowthIncreasedEventObject {
  pool: string;
  rewardDelta: BigNumber;
  rewardGrowthAfterX64: BigNumber;
  positionRewardDelta: BigNumber;
  positionRewardGrowthAfterX64: BigNumber;
}
export type PoolReferralParentTokenRewardGrowthIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  PoolReferralParentTokenRewardGrowthIncreasedEventObject
>;

export type PoolReferralParentTokenRewardGrowthIncreasedEventFilter =
  TypedEventFilter<PoolReferralParentTokenRewardGrowthIncreasedEvent>;

export interface PoolReferralTokenRewardGrowthIncreasedEventObject {
  pool: string;
  rewardDelta: BigNumber;
  rewardGrowthAfterX64: BigNumber;
  positionRewardDelta: BigNumber;
  positionRewardGrowthAfterX64: BigNumber;
}
export type PoolReferralTokenRewardGrowthIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  PoolReferralTokenRewardGrowthIncreasedEventObject
>;

export type PoolReferralTokenRewardGrowthIncreasedEventFilter =
  TypedEventFilter<PoolReferralTokenRewardGrowthIncreasedEvent>;

export interface PoolRewardUpdatedEventObject {
  pool: string;
  rewardPerSecond: BigNumber;
}
export type PoolRewardUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PoolRewardUpdatedEventObject
>;

export type PoolRewardUpdatedEventFilter =
  TypedEventFilter<PoolRewardUpdatedEvent>;

export interface PoolRiskBufferFundRewardGrowthIncreasedEventObject {
  pool: string;
  rewardDelta: BigNumber;
  rewardGrowthAfterX64: BigNumber;
}
export type PoolRiskBufferFundRewardGrowthIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PoolRiskBufferFundRewardGrowthIncreasedEventObject
>;

export type PoolRiskBufferFundRewardGrowthIncreasedEventFilter =
  TypedEventFilter<PoolRiskBufferFundRewardGrowthIncreasedEvent>;

export interface ReferralLiquidityRewardDebtChangedEventObject {
  pool: string;
  referralToken: BigNumber;
  rewardDebtDelta: BigNumber;
}
export type ReferralLiquidityRewardDebtChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReferralLiquidityRewardDebtChangedEventObject
>;

export type ReferralLiquidityRewardDebtChangedEventFilter =
  TypedEventFilter<ReferralLiquidityRewardDebtChangedEvent>;

export interface ReferralPositionRewardDebtChangedEventObject {
  pool: string;
  referralToken: BigNumber;
  rewardDebtDelta: BigNumber;
}
export type ReferralPositionRewardDebtChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReferralPositionRewardDebtChangedEventObject
>;

export type ReferralPositionRewardDebtChangedEventFilter =
  TypedEventFilter<ReferralPositionRewardDebtChangedEvent>;

export interface ReferralRewardCollectedEventObject {
  pools: string[];
  referralTokens: BigNumber[];
  receiver: string;
  rewardDebt: BigNumber;
}
export type ReferralRewardCollectedEvent = TypedEvent<
  [string[], BigNumber[], string, BigNumber],
  ReferralRewardCollectedEventObject
>;

export type ReferralRewardCollectedEventFilter =
  TypedEventFilter<ReferralRewardCollectedEvent>;

export interface RewardCapChangedEventObject {
  rewardCapAfter: BigNumber;
}
export type RewardCapChangedEvent = TypedEvent<
  [BigNumber],
  RewardCapChangedEventObject
>;

export type RewardCapChangedEventFilter =
  TypedEventFilter<RewardCapChangedEvent>;

export interface RiskBufferFundRewardCollectedEventObject {
  pools: string[];
  account: string;
  receiver: string;
  rewardDebt: BigNumber;
}
export type RiskBufferFundRewardCollectedEvent = TypedEvent<
  [string[], string, string, BigNumber],
  RiskBufferFundRewardCollectedEventObject
>;

export type RiskBufferFundRewardCollectedEventFilter =
  TypedEventFilter<RiskBufferFundRewardCollectedEvent>;

export interface RiskBufferFundRewardDebtChangedEventObject {
  pool: string;
  account: string;
  rewardDebtDelta: BigNumber;
}
export type RiskBufferFundRewardDebtChangedEvent = TypedEvent<
  [string, string, BigNumber],
  RiskBufferFundRewardDebtChangedEventObject
>;

export type RiskBufferFundRewardDebtChangedEventFilter =
  TypedEventFilter<RiskBufferFundRewardDebtChangedEvent>;

export interface RewardFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardFarmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EFC(overrides?: CallOverrides): Promise<[string]>;

    EQU(overrides?: CallOverrides): Promise<[string]>;

    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    alreadyBoundReferralTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectLiquidityRewardBatch(
      _pools: PromiseOrValue<string>[],
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectReferralRewardBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectRiskBufferFundRewardBatch(
      _pools: PromiseOrValue<string>[],
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        liquidityRate: number;
        riskBufferFundLiquidityRate: number;
        referralTokenRate: number;
        referralParentTokenRate: number;
      }
    >;

    gov(overrides?: CallOverrides): Promise<[string]>;

    indexPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    liquidityRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { bitmap: BigNumber; rewardDebt: BigNumber }
    >;

    liquidityRewardsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidity: BigNumber;
        rewardGrowthX64: BigNumber;
      }
    >;

    mintTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintedReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    onChangeReferralToken(
      _referee: PromiseOrValue<string>,
      _oldReferralToken: PromiseOrValue<BigNumberish>,
      _oldReferralParentToken: PromiseOrValue<BigNumberish>,
      _newReferralToken: PromiseOrValue<BigNumberish>,
      _newReferralParentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onLiquidityPositionChanged(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onPositionChanged(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _sizeAfter: PromiseOrValue<BigNumberish>,
      _entryPriceAfterX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onRiskBufferFundPositionChanged(
      _account: PromiseOrValue<string>,
      _liquidityAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingGov(overrides?: CallOverrides): Promise<[string]>;

    poolFactory(overrides?: CallOverrides): Promise<[string]>;

    poolIndexNext(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolIndexes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidity: BigNumber;
        liquidityRewardGrowthX64: BigNumber;
        referralLiquidity: BigNumber;
        referralTokenRewardGrowthX64: BigNumber;
        referralParentTokenRewardGrowthX64: BigNumber;
        referralPosition: BigNumber;
        referralTokenPositionRewardGrowthX64: BigNumber;
        referralParentTokenPositionRewardGrowthX64: BigNumber;
        riskBufferFundLiquidity: BigNumber;
        riskBufferFundRewardGrowthX64: BigNumber;
        rewardPerSecond: BigNumber;
        lastMintTime: BigNumber;
      }
    >;

    positions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bitmap: BigNumber }>;

    positionsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { long: BigNumber; short: BigNumber }>;

    referralMultiplier(overrides?: CallOverrides): Promise<[number]>;

    referralRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardDebt: BigNumber }>;

    referralRewardsWithPool(
      _referralToken: PromiseOrValue<BigNumberish>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        rewardGrowthX64: BigNumber;
        position: BigNumber;
        positionRewardGrowthX64: BigNumber;
      }
    >;

    rewardCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    riskBufferFundRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardDebt: BigNumber }>;

    riskBufferFundRewardsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidity: BigNumber;
        rewardGrowthX64: BigNumber;
      }
    >;

    router(overrides?: CallOverrides): Promise<[string]>;

    setConfig(
      _config: IRewardFarm.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolsReward(
      _pools: PromiseOrValue<string>[],
      _rewardsPerSecond: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardCap(
      _rewardCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  EFC(overrides?: CallOverrides): Promise<string>;

  EQU(overrides?: CallOverrides): Promise<string>;

  acceptGov(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  alreadyBoundReferralTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeGov(
    _newGov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectLiquidityRewardBatch(
    _pools: PromiseOrValue<string>[],
    _account: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectReferralRewardBatch(
    _pools: PromiseOrValue<string>[],
    _referralTokens: PromiseOrValue<BigNumberish>[],
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectRiskBufferFundRewardBatch(
    _pools: PromiseOrValue<string>[],
    _account: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      liquidityRate: number;
      riskBufferFundLiquidityRate: number;
      referralTokenRate: number;
      referralParentTokenRate: number;
    }
  >;

  gov(overrides?: CallOverrides): Promise<string>;

  indexPools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  liquidityRewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { bitmap: BigNumber; rewardDebt: BigNumber }
  >;

  liquidityRewardsWithPool(
    _account: PromiseOrValue<string>,
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      liquidity: BigNumber;
      rewardGrowthX64: BigNumber;
    }
  >;

  mintTime(overrides?: CallOverrides): Promise<BigNumber>;

  mintedReward(overrides?: CallOverrides): Promise<BigNumber>;

  onChangeReferralToken(
    _referee: PromiseOrValue<string>,
    _oldReferralToken: PromiseOrValue<BigNumberish>,
    _oldReferralParentToken: PromiseOrValue<BigNumberish>,
    _newReferralToken: PromiseOrValue<BigNumberish>,
    _newReferralParentToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onLiquidityPositionChanged(
    _account: PromiseOrValue<string>,
    _liquidityDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onPositionChanged(
    _account: PromiseOrValue<string>,
    _side: PromiseOrValue<BigNumberish>,
    _sizeAfter: PromiseOrValue<BigNumberish>,
    _entryPriceAfterX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onRiskBufferFundPositionChanged(
    _account: PromiseOrValue<string>,
    _liquidityAfter: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingGov(overrides?: CallOverrides): Promise<string>;

  poolFactory(overrides?: CallOverrides): Promise<string>;

  poolIndexNext(overrides?: CallOverrides): Promise<BigNumber>;

  poolIndexes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolRewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      liquidity: BigNumber;
      liquidityRewardGrowthX64: BigNumber;
      referralLiquidity: BigNumber;
      referralTokenRewardGrowthX64: BigNumber;
      referralParentTokenRewardGrowthX64: BigNumber;
      referralPosition: BigNumber;
      referralTokenPositionRewardGrowthX64: BigNumber;
      referralParentTokenPositionRewardGrowthX64: BigNumber;
      riskBufferFundLiquidity: BigNumber;
      riskBufferFundRewardGrowthX64: BigNumber;
      rewardPerSecond: BigNumber;
      lastMintTime: BigNumber;
    }
  >;

  positions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  positionsWithPool(
    _account: PromiseOrValue<string>,
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { long: BigNumber; short: BigNumber }>;

  referralMultiplier(overrides?: CallOverrides): Promise<number>;

  referralRewards(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referralRewardsWithPool(
    _referralToken: PromiseOrValue<BigNumberish>,
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      rewardGrowthX64: BigNumber;
      position: BigNumber;
      positionRewardGrowthX64: BigNumber;
    }
  >;

  rewardCap(overrides?: CallOverrides): Promise<BigNumber>;

  riskBufferFundRewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  riskBufferFundRewardsWithPool(
    _account: PromiseOrValue<string>,
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      liquidity: BigNumber;
      rewardGrowthX64: BigNumber;
    }
  >;

  router(overrides?: CallOverrides): Promise<string>;

  setConfig(
    _config: IRewardFarm.ConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolsReward(
    _pools: PromiseOrValue<string>[],
    _rewardsPerSecond: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardCap(
    _rewardCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EFC(overrides?: CallOverrides): Promise<string>;

    EQU(overrides?: CallOverrides): Promise<string>;

    acceptGov(overrides?: CallOverrides): Promise<void>;

    alreadyBoundReferralTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectLiquidityRewardBatch(
      _pools: PromiseOrValue<string>[],
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectReferralRewardBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectRiskBufferFundRewardBatch(
      _pools: PromiseOrValue<string>[],
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        liquidityRate: number;
        riskBufferFundLiquidityRate: number;
        referralTokenRate: number;
        referralParentTokenRate: number;
      }
    >;

    gov(overrides?: CallOverrides): Promise<string>;

    indexPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    liquidityRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { bitmap: BigNumber; rewardDebt: BigNumber }
    >;

    liquidityRewardsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidity: BigNumber;
        rewardGrowthX64: BigNumber;
      }
    >;

    mintTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintedReward(overrides?: CallOverrides): Promise<BigNumber>;

    onChangeReferralToken(
      _referee: PromiseOrValue<string>,
      _oldReferralToken: PromiseOrValue<BigNumberish>,
      _oldReferralParentToken: PromiseOrValue<BigNumberish>,
      _newReferralToken: PromiseOrValue<BigNumberish>,
      _newReferralParentToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onLiquidityPositionChanged(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onPositionChanged(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _sizeAfter: PromiseOrValue<BigNumberish>,
      _entryPriceAfterX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onRiskBufferFundPositionChanged(
      _account: PromiseOrValue<string>,
      _liquidityAfter: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingGov(overrides?: CallOverrides): Promise<string>;

    poolFactory(overrides?: CallOverrides): Promise<string>;

    poolIndexNext(overrides?: CallOverrides): Promise<BigNumber>;

    poolIndexes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidity: BigNumber;
        liquidityRewardGrowthX64: BigNumber;
        referralLiquidity: BigNumber;
        referralTokenRewardGrowthX64: BigNumber;
        referralParentTokenRewardGrowthX64: BigNumber;
        referralPosition: BigNumber;
        referralTokenPositionRewardGrowthX64: BigNumber;
        referralParentTokenPositionRewardGrowthX64: BigNumber;
        riskBufferFundLiquidity: BigNumber;
        riskBufferFundRewardGrowthX64: BigNumber;
        rewardPerSecond: BigNumber;
        lastMintTime: BigNumber;
      }
    >;

    positions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { long: BigNumber; short: BigNumber }>;

    referralMultiplier(overrides?: CallOverrides): Promise<number>;

    referralRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralRewardsWithPool(
      _referralToken: PromiseOrValue<BigNumberish>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        rewardGrowthX64: BigNumber;
        position: BigNumber;
        positionRewardGrowthX64: BigNumber;
      }
    >;

    rewardCap(overrides?: CallOverrides): Promise<BigNumber>;

    riskBufferFundRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    riskBufferFundRewardsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidity: BigNumber;
        rewardGrowthX64: BigNumber;
      }
    >;

    router(overrides?: CallOverrides): Promise<string>;

    setConfig(
      _config: IRewardFarm.ConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolsReward(
      _pools: PromiseOrValue<string>[],
      _rewardsPerSecond: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardCap(
      _rewardCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeGovStarted(address,address)"(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): ChangeGovStartedEventFilter;
    ChangeGovStarted(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): ChangeGovStartedEventFilter;

    "ConfigChanged(tuple)"(newConfig?: null): ConfigChangedEventFilter;
    ConfigChanged(newConfig?: null): ConfigChangedEventFilter;

    "GovChanged(address,address)"(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): GovChangedEventFilter;
    GovChanged(
      previousGov?: PromiseOrValue<string> | null,
      newGov?: PromiseOrValue<string> | null
    ): GovChangedEventFilter;

    "LiquidityRewardCollected(address[],address,address,uint256)"(
      pools?: null,
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): LiquidityRewardCollectedEventFilter;
    LiquidityRewardCollected(
      pools?: null,
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): LiquidityRewardCollectedEventFilter;

    "LiquidityRewardDebtChanged(address,address,uint256)"(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      rewardDebtDelta?: null
    ): LiquidityRewardDebtChangedEventFilter;
    LiquidityRewardDebtChanged(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      rewardDebtDelta?: null
    ): LiquidityRewardDebtChangedEventFilter;

    "PoolLiquidityRewardGrowthIncreased(address,uint256,uint128)"(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null
    ): PoolLiquidityRewardGrowthIncreasedEventFilter;
    PoolLiquidityRewardGrowthIncreased(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null
    ): PoolLiquidityRewardGrowthIncreasedEventFilter;

    "PoolReferralParentTokenRewardGrowthIncreased(address,uint256,uint128,uint256,uint128)"(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null,
      positionRewardDelta?: null,
      positionRewardGrowthAfterX64?: null
    ): PoolReferralParentTokenRewardGrowthIncreasedEventFilter;
    PoolReferralParentTokenRewardGrowthIncreased(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null,
      positionRewardDelta?: null,
      positionRewardGrowthAfterX64?: null
    ): PoolReferralParentTokenRewardGrowthIncreasedEventFilter;

    "PoolReferralTokenRewardGrowthIncreased(address,uint256,uint128,uint256,uint128)"(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null,
      positionRewardDelta?: null,
      positionRewardGrowthAfterX64?: null
    ): PoolReferralTokenRewardGrowthIncreasedEventFilter;
    PoolReferralTokenRewardGrowthIncreased(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null,
      positionRewardDelta?: null,
      positionRewardGrowthAfterX64?: null
    ): PoolReferralTokenRewardGrowthIncreasedEventFilter;

    "PoolRewardUpdated(address,uint160)"(
      pool?: PromiseOrValue<string> | null,
      rewardPerSecond?: null
    ): PoolRewardUpdatedEventFilter;
    PoolRewardUpdated(
      pool?: PromiseOrValue<string> | null,
      rewardPerSecond?: null
    ): PoolRewardUpdatedEventFilter;

    "PoolRiskBufferFundRewardGrowthIncreased(address,uint256,uint128)"(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null
    ): PoolRiskBufferFundRewardGrowthIncreasedEventFilter;
    PoolRiskBufferFundRewardGrowthIncreased(
      pool?: PromiseOrValue<string> | null,
      rewardDelta?: null,
      rewardGrowthAfterX64?: null
    ): PoolRiskBufferFundRewardGrowthIncreasedEventFilter;

    "ReferralLiquidityRewardDebtChanged(address,uint256,uint256)"(
      pool?: PromiseOrValue<string> | null,
      referralToken?: PromiseOrValue<BigNumberish> | null,
      rewardDebtDelta?: null
    ): ReferralLiquidityRewardDebtChangedEventFilter;
    ReferralLiquidityRewardDebtChanged(
      pool?: PromiseOrValue<string> | null,
      referralToken?: PromiseOrValue<BigNumberish> | null,
      rewardDebtDelta?: null
    ): ReferralLiquidityRewardDebtChangedEventFilter;

    "ReferralPositionRewardDebtChanged(address,uint256,uint256)"(
      pool?: PromiseOrValue<string> | null,
      referralToken?: PromiseOrValue<BigNumberish> | null,
      rewardDebtDelta?: null
    ): ReferralPositionRewardDebtChangedEventFilter;
    ReferralPositionRewardDebtChanged(
      pool?: PromiseOrValue<string> | null,
      referralToken?: PromiseOrValue<BigNumberish> | null,
      rewardDebtDelta?: null
    ): ReferralPositionRewardDebtChangedEventFilter;

    "ReferralRewardCollected(address[],uint256[],address,uint256)"(
      pools?: null,
      referralTokens?: null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): ReferralRewardCollectedEventFilter;
    ReferralRewardCollected(
      pools?: null,
      referralTokens?: null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): ReferralRewardCollectedEventFilter;

    "RewardCapChanged(uint128)"(
      rewardCapAfter?: null
    ): RewardCapChangedEventFilter;
    RewardCapChanged(rewardCapAfter?: null): RewardCapChangedEventFilter;

    "RiskBufferFundRewardCollected(address[],address,address,uint256)"(
      pools?: null,
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): RiskBufferFundRewardCollectedEventFilter;
    RiskBufferFundRewardCollected(
      pools?: null,
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      rewardDebt?: null
    ): RiskBufferFundRewardCollectedEventFilter;

    "RiskBufferFundRewardDebtChanged(address,address,uint256)"(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      rewardDebtDelta?: null
    ): RiskBufferFundRewardDebtChangedEventFilter;
    RiskBufferFundRewardDebtChanged(
      pool?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      rewardDebtDelta?: null
    ): RiskBufferFundRewardDebtChangedEventFilter;
  };

  estimateGas: {
    EFC(overrides?: CallOverrides): Promise<BigNumber>;

    EQU(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    alreadyBoundReferralTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectLiquidityRewardBatch(
      _pools: PromiseOrValue<string>[],
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectReferralRewardBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectRiskBufferFundRewardBatch(
      _pools: PromiseOrValue<string>[],
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    indexPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityRewardsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintedReward(overrides?: CallOverrides): Promise<BigNumber>;

    onChangeReferralToken(
      _referee: PromiseOrValue<string>,
      _oldReferralToken: PromiseOrValue<BigNumberish>,
      _oldReferralParentToken: PromiseOrValue<BigNumberish>,
      _newReferralToken: PromiseOrValue<BigNumberish>,
      _newReferralParentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onLiquidityPositionChanged(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onPositionChanged(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _sizeAfter: PromiseOrValue<BigNumberish>,
      _entryPriceAfterX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onRiskBufferFundPositionChanged(
      _account: PromiseOrValue<string>,
      _liquidityAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingGov(overrides?: CallOverrides): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    poolIndexNext(overrides?: CallOverrides): Promise<BigNumber>;

    poolIndexes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    referralRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralRewardsWithPool(
      _referralToken: PromiseOrValue<BigNumberish>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardCap(overrides?: CallOverrides): Promise<BigNumber>;

    riskBufferFundRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    riskBufferFundRewardsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setConfig(
      _config: IRewardFarm.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolsReward(
      _pools: PromiseOrValue<string>[],
      _rewardsPerSecond: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardCap(
      _rewardCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EFC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EQU(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    alreadyBoundReferralTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeGov(
      _newGov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectLiquidityRewardBatch(
      _pools: PromiseOrValue<string>[],
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectReferralRewardBatch(
      _pools: PromiseOrValue<string>[],
      _referralTokens: PromiseOrValue<BigNumberish>[],
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectRiskBufferFundRewardBatch(
      _pools: PromiseOrValue<string>[],
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityRewardsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onChangeReferralToken(
      _referee: PromiseOrValue<string>,
      _oldReferralToken: PromiseOrValue<BigNumberish>,
      _oldReferralParentToken: PromiseOrValue<BigNumberish>,
      _newReferralToken: PromiseOrValue<BigNumberish>,
      _newReferralParentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onLiquidityPositionChanged(
      _account: PromiseOrValue<string>,
      _liquidityDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onPositionChanged(
      _account: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _sizeAfter: PromiseOrValue<BigNumberish>,
      _entryPriceAfterX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onRiskBufferFundPositionChanged(
      _account: PromiseOrValue<string>,
      _liquidityAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolIndexNext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolIndexes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralRewardsWithPool(
      _referralToken: PromiseOrValue<BigNumberish>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskBufferFundRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    riskBufferFundRewardsWithPool(
      _account: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setConfig(
      _config: IRewardFarm.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolsReward(
      _pools: PromiseOrValue<string>[],
      _rewardsPerSecond: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardCap(
      _rewardCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
