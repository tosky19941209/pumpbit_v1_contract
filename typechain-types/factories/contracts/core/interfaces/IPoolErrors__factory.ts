/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPoolErrors,
  IPoolErrorsInterface,
} from "../../../../contracts/core/interfaces/IPoolErrors";

const _abi = [
  {
    inputs: [],
    name: "CallerNotLiquidator",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "balance",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "requiredAmount",
        type: "uint128",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientGlobalLiquidity",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientMargin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "size",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "requiredSize",
        type: "uint128",
      },
    ],
    name: "InsufficientSizeToDecrease",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requiredCaller",
        type: "address",
      },
    ],
    name: "InvalidCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidLiquidityToOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "LastLiquidityPositionCannotBeClosed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "margin",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint32",
        name: "maxLeverage",
        type: "uint32",
      },
    ],
    name: "LeverageTooHigh",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requiredPositionID",
        type: "uint256",
      },
    ],
    name: "LiquidityPositionNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "margin",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "unrealizedPnL",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "maintenanceMargin",
        type: "uint256",
      },
    ],
    name: "MarginRateTooHigh",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "margin",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "unrealizedPnL",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "maintenanceMargin",
        type: "uint256",
      },
    ],
    name: "MarginRateTooLow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requiredAccount",
        type: "address",
      },
      {
        internalType: "Side",
        name: "requiredSide",
        type: "uint8",
      },
    ],
    name: "PositionNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "margin",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "liquidationExecutionFee",
        type: "uint64",
      },
      {
        internalType: "uint128",
        name: "positionUnrealizedLoss",
        type: "uint128",
      },
    ],
    name: "RiskRateTooHigh",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "margin",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "liquidationExecutionFee",
        type: "uint64",
      },
      {
        internalType: "uint128",
        name: "positionUnrealizedLoss",
        type: "uint128",
      },
    ],
    name: "RiskRateTooLow",
    type: "error",
  },
] as const;

export class IPoolErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IPoolErrorsInterface {
    return new utils.Interface(_abi) as IPoolErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPoolErrors {
    return new Contract(address, _abi, signerOrProvider) as IPoolErrors;
  }
}
