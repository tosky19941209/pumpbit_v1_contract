/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockUniswapV3PoolFactory,
  MockUniswapV3PoolFactoryInterface,
} from "../../../contracts/test/MockUniswapV3PoolFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
    ],
    name: "feeAmountTickSpacing",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100155760d3908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c6322afcccb14602857600080fd5b3460785760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126078576004359162ffffff8316830360755750606e602092607c565b60020b8152f35b80fd5b5080fd5b62ffffff168015609757610bb803609257603c90565b601e90565b5060009056fea2646970667358221220f5eb80dc7f6b2ad82a0a40ad11f9ee9584ddcad98135ff1c30e50137cafe305864736f6c63430008180033";

type MockUniswapV3PoolFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUniswapV3PoolFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUniswapV3PoolFactory__factory extends ContractFactory {
  constructor(...args: MockUniswapV3PoolFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockUniswapV3PoolFactory> {
    return super.deploy(overrides || {}) as Promise<MockUniswapV3PoolFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockUniswapV3PoolFactory {
    return super.attach(address) as MockUniswapV3PoolFactory;
  }
  override connect(signer: Signer): MockUniswapV3PoolFactory__factory {
    return super.connect(signer) as MockUniswapV3PoolFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUniswapV3PoolFactoryInterface {
    return new utils.Interface(_abi) as MockUniswapV3PoolFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockUniswapV3PoolFactory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockUniswapV3PoolFactory;
  }
}
