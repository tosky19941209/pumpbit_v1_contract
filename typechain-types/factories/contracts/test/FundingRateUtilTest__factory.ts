/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FundingRateUtilTest,
  FundingRateUtilTestInterface,
} from "../../../contracts/test/FundingRateUtilTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "Side",
        name: "_side",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "_premiumRateX96",
        type: "uint128",
      },
      {
        internalType: "uint32",
        name: "_interestRate",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "_maxSamplingTime",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "_timeDelta",
        type: "uint16",
      },
    ],
    name: "_samplePremiumRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "longSize",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "shortSize",
            type: "uint128",
          },
          {
            internalType: "int192",
            name: "longFundingRateGrowthX96",
            type: "int192",
          },
          {
            internalType: "int192",
            name: "shortFundingRateGrowthX96",
            type: "int192",
          },
        ],
        internalType: "struct IPoolPosition.GlobalPosition",
        name: "_globalPositionCache",
        type: "tuple",
      },
      {
        internalType: "int256",
        name: "_fundingRateDeltaX96",
        type: "int256",
      },
      {
        internalType: "uint32",
        name: "_maxFundingRate",
        type: "uint32",
      },
      {
        internalType: "uint160",
        name: "_indexPriceX96",
        type: "uint160",
      },
    ],
    name: "calculateFundingRateGrowthX96",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "clampedFundingRateDeltaX96",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fundingRateDeltaX96",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gasUsed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "globalRiskBufferFund",
    outputs: [
      {
        internalType: "int256",
        name: "riskBufferFund",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "longFundingRateGrowthAfterX96",
    outputs: [
      {
        internalType: "int192",
        name: "",
        type: "int192",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "position",
    outputs: [
      {
        internalType: "uint128",
        name: "netSize",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "liquidationBufferNetSize",
        type: "uint128",
      },
      {
        internalType: "uint160",
        name: "entryPriceX96",
        type: "uint160",
      },
      {
        internalType: "Side",
        name: "side",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "realizedProfitGrowthX64",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceState",
    outputs: [
      {
        internalType: "uint128",
        name: "maxPriceImpactLiquidity",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "premiumRateX96",
        type: "uint128",
      },
      {
        internalType: "uint8",
        name: "pendingVertexIndex",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "liquidationVertexIndex",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "currentVertexIndex",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sample",
    outputs: [
      {
        internalType: "uint64",
        name: "lastAdjustFundingRateTime",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "sampleCount",
        type: "uint16",
      },
      {
        internalType: "int176",
        name: "cumulativePremiumRateX96",
        type: "int176",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_interestRate",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "_currentTimestamp",
        type: "uint64",
      },
    ],
    name: "samplePremiumRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shortFundingRateGrowthAfterX96",
    outputs: [
      {
        internalType: "int192",
        name: "",
        type: "int192",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "shouldAdjustFundingRate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_riskBufferFund",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_liquidity",
        type: "uint256",
      },
    ],
    name: "updateGlobalRiskBufferFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Side",
        name: "_side",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "_netSize",
        type: "uint128",
      },
      {
        internalType: "uint160",
        name: "_entryPriceX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "_liquidity",
        type: "uint128",
      },
    ],
    name: "updatePosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "_maxPriceImpactLiquidity",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "_premiumRateX96",
        type: "uint128",
      },
    ],
    name: "updatePriceState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "_lastAdjustFundingRateTime",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "_sampleCount",
        type: "uint16",
      },
      {
        internalType: "int176",
        name: "_cumulativePremiumRateX96",
        type: "int176",
      },
    ],
    name: "updateSample",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610fb0908161001c8239f35b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816304cef5e9146109895750806309218e91146108f55780631df6db86146108425780633bcb9f871461080157806341ae2714146107bf5780634fa14c7c1461071f57806350843dc9146106df57806350c4f1ee14610665578063592cdadd146106285780636d713af9146105aa5780639347b0541461056d5780639af35474146105305780639e6e51c2146104f0578063ae062e7d146103f0578063c9482a5d14610391578063cdc6fa52146103525763d39336ab146100df57600080fd5b3461034e577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360160e081126102fc5760801361034e578051906080820182811067ffffffffffffffff82111761032257815261013a610b12565b8252610144610af3565b91602081019283526044358060170b810361031e578282019081526064358060170b810361031a576060830190815260a4359163ffffffff83168093036103165760c4359373ffffffffffffffffffffffffffffffffffffffff8516809503610312575a968651987f3d134a3d000000000000000000000000000000000000000000000000000000008a52808a01526fffffffffffffffffffffffffffffffff8092511660248a0152511660448801525160170b60648701525160170b608486015260843560a486015260c485015260e48401526060836101048173__$d90c0a13b24e7baead22cae208cb363ccb$__5af4918215610308578491859486946102ae575b5050610255905a90610ba1565b6014556017557fffffffffffffffff000000000000000000000000000000000000000000000000806018541677ffffffffffffffffffffffffffffffffffffffffffffffff938416176018556019541691161760195580f35b9250935091506060813d606011610300575b816102cd60609383610b31565b810103126102fc576102556102f18251946102ea60208501610bdd565b9301610bdd565b939193929038610248565b8380fd5b3d91506102c0565b81513d86823e3d90fd5b8880fd5b8780fd5b8680fd5b8580fd5b6024856041867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8280fd5b503461034e577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038d578035905560243560055580f35b5080fd5b83823461038d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038d576060906006549080519167ffffffffffffffff8116835261ffff81831c16602084015260501d60150b90820152f35b83346104ed5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104ed57610428610ade565b610430610af3565b60443573ffffffffffffffffffffffffffffffffffffffff81168091036102fc57606435926fffffffffffffffffffffffffffffffff9081851680950361031e5774ff00000000000000000000000000000000000000007fffffffffffffffffffffff00000000000000000000000000000000000000000091600154937fffffffffffffffffffffffffffffffff0000000000000000000000000000000096168689541617885560a01b1691161717600155600254161760025580f35b80fd5b83823461038d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038d5760209060185460170b9051908152f35b83823461038d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038d576020906016549051908152f35b83823461038d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038d576020906017549051908152f35b83823461038d577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104ed576105e1610b12565b6fffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffff0000000000000000000000000000000061061b610af3565b60801b1691161760075580f35b83823461038d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038d576020906014549051908152f35b83823461038d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038d5760a09060ff60075491600f54908051936fffffffffffffffffffffffffffffffff8116855260801c602085015282821690840152818160081c16606084015260101c166080820152f35b83823461038d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038d5760209060195460170b9051908152f35b50903461034e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261034e573567ffffffffffffffff811680910361034e5760243561ffff811681036102fc57604435908160150b82036107bb577fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000069ffff00000000000000009260501b16931b16171760065580f35b8480fd5b83823461038d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038d5760209060ff6015541690519015158152f35b5091346104ed57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104ed57505460055482519182526020820152f35b83346104ed5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104ed5761087a610ade565b610882610af3565b60443563ffffffff811681036102fc576064359067ffffffffffffffff821682036107bb576084359261ffff8416840361031e576108bf94610c18565b9060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060155416911515161760155560165580f35b83823461038d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261038d5760c091546fffffffffffffffffffffffffffffffff9160ff600154846002541692600354948151968116875260801c602087015273ffffffffffffffffffffffffffffffffffffffff82169086015260a01c166060840152608083015260a0820152f35b929050346102fc57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102fc57803563ffffffff81168091036107bb576024359067ffffffffffffffff821680920361031e5760065a937fdedc89cf0000000000000000000000000000000000000000000000000000000087528601528560248601526007604486015260648501526084840152818360a48173__$d90c0a13b24e7baead22cae208cb363ccb$__5af4928315610ad45784928594610a92575b5050610a5a905a90610ba1565b60145560ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060155416911515161760155560165580f35b809294508193503d8311610acd575b610aab8183610b31565b8101031261034e5780519081151582036102fc576020015191610a5a38610a4d565b503d610aa1565b82513d86823e3d90fd5b6004359060ff82168203610aee57565b600080fd5b602435906fffffffffffffffffffffffffffffffff82168203610aee57565b600435906fffffffffffffffffffffffffffffffff82168203610aee57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b7257604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b91908203918211610bae57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b51908160170b8203610aee57565b7f80000000000000000000000000000000000000000000000000000000000000008114610bae5760000390565b919493916fffffffffffffffffffffffffffffffff919060ff16600103610d78571660150b7fffffffffffffffffffff800000000000000000000000000000000000000000008114610bae57600003905b600561ffff809216049160065490627fffff838360401c16858101948086168097600162ffffff9384921694011601160260011c1660020b0260150b8160501d016102d08160150b9410610d225750610cd89291505060008112610d0357610cd090610d82565b935b84610dbb565b9260008482019485129112908015821691151617610bae5767ffffffffffffffff1660065560019190565b610d17610d12610d1c92610beb565b610d82565b610beb565b93610cd2565b69ffff0000000000000000929596507fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000091945067ffffffffffffffff935060501b169360401b1691161717600655600090600090565b1660150b90610c69565b80610d8d5750600090565b621faf407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60019201040190565b9063ffffffff166305f5e1006c01000000000000000000000000610dde83610e84565b9209610e49575b60008282039212818312811691831390151617610bae576a04189374bc6a7ef9db22d19081811315610e15575090565b7ffffffffffffffffffffffffffffffffffffffffffffbe76c8b4395810624dd2f915081811215610e44575090565b905090565b6001810180911115610de5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6c010000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183098260601b91828083109203918083039214610f6d576305f5e1009082821115610f0f577facbe0e98f503f8881186e60dbb7f727bf36b7213ee9f5a78c767074b22e90e21940990828211900360f81b910360081c170290565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f7700000000000000000000006044820152fd5b50506305f5e1009150049056fea2646970667358221220e8372ceb72678c3e10cc9808a1ae8039afb48a60482509f599315cda8b4a3d2264736f6c63430008180033";

type FundingRateUtilTestConstructorParams =
  | [linkLibraryAddresses: FundingRateUtilTestLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingRateUtilTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class FundingRateUtilTest__factory extends ContractFactory {
  constructor(...args: FundingRateUtilTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        FundingRateUtilTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: FundingRateUtilTestLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$d90c0a13b24e7baead22cae208cb363ccb\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/FundingRateUtil.sol:FundingRateUtil"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FundingRateUtilTest> {
    return super.deploy(overrides || {}) as Promise<FundingRateUtilTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FundingRateUtilTest {
    return super.attach(address) as FundingRateUtilTest;
  }
  override connect(signer: Signer): FundingRateUtilTest__factory {
    return super.connect(signer) as FundingRateUtilTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingRateUtilTestInterface {
    return new utils.Interface(_abi) as FundingRateUtilTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundingRateUtilTest {
    return new Contract(address, _abi, signerOrProvider) as FundingRateUtilTest;
  }
}

export interface FundingRateUtilTestLibraryAddresses {
  ["contracts/libraries/FundingRateUtil.sol:FundingRateUtil"]: string;
}
