/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockFeeDistributorCallback,
  MockFeeDistributorCallbackInterface,
} from "../../../contracts/test/MockFeeDistributorCallback";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256",
      },
    ],
    name: "onMintArchitect",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100155760d9908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c806354f80bb114606a5763a5c42ef114603257600080fd5b34606657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112606657602091548152f35b5080fd5b823460a05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260a057600435815580f35b80fdfea26469706673582212208e9d714e18d3219db7383dee76ded710827ace0a1efc4c20d01feee8a0fef66664736f6c63430008180033";

type MockFeeDistributorCallbackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockFeeDistributorCallbackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockFeeDistributorCallback__factory extends ContractFactory {
  constructor(...args: MockFeeDistributorCallbackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockFeeDistributorCallback> {
    return super.deploy(overrides || {}) as Promise<MockFeeDistributorCallback>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockFeeDistributorCallback {
    return super.attach(address) as MockFeeDistributorCallback;
  }
  override connect(signer: Signer): MockFeeDistributorCallback__factory {
    return super.connect(signer) as MockFeeDistributorCallback__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFeeDistributorCallbackInterface {
    return new utils.Interface(_abi) as MockFeeDistributorCallbackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockFeeDistributorCallback {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockFeeDistributorCallback;
  }
}
