/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../../contracts/test/MockRouter.sol/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "Forbidden",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousGov",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newGov",
        type: "address",
      },
    ],
    name: "ChangeGovStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousGov",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newGov",
        type: "address",
      },
    ],
    name: "GovChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptGov",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newGov",
        type: "address",
      },
    ],
    name: "changeGov",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gov",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingGov",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPool",
        name: "",
        type: "address",
      },
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pluginAdjustLiquidityPositionMargin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPool",
        name: "",
        type: "address",
      },
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pluginCloseLiquidityPosition",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPool",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "Side",
        name: "",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pluginDecreasePosition",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPool",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pluginDecreaseRiskBufferFundPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPool",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "Side",
        name: "",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    name: "pluginIncreasePosition",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPool",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    name: "pluginIncreaseRiskBufferFundPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPool",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    name: "pluginOpenLiquidityPosition",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "pluginTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_positionID",
        type: "uint256",
      },
    ],
    name: "setPositionID",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "_priceImpactFee",
        type: "uint128",
      },
    ],
    name: "setPriceImpactFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "_tradePriceX96",
        type: "uint160",
      },
    ],
    name: "setTradePriceX96",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100605760008054336001600160a01b0319821681178355916001600160a01b03909116907f3d1e4c3a68fed9f4f8315582b7297cf8fa264bc8e6704287603ba8c72bf05ac29080a36001600355610bae90816100668239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182630fb94c7b146108c657826310e8667b1461087357826312d43a5114610825575081631b827878146105de578163252408101461058b5781632a5a2cca1461050a5781632d4cf9521461048e5781637bc6729b146103dd5781638c96742e14610393578163a86f20f71461035b578163a962ef1e14610285578163ae39e59c1461022b578163c67f1a35146101be57508063f5d01c531461015d5763f86786f1146100ca57600080fd5b346101595760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101595761010161099f565b5061010a6109c2565b50610113610a2b565b5061011c610961565b50610125610980565b5073ffffffffffffffffffffffffffffffffffffffff60a435818116036101555760209250600254169051908152f35b8280fd5b5080fd5b50346101595760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101595760209061019861099f565b506101a16109c2565b506101aa61093d565b506101b3610961565b506003549051908152f35b8284346102285760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022857506fffffffffffffffffffffffffffffffff60209261020c61099f565b50610215610a3b565b5061021e610a08565b5054169051908152f35b80fd5b83346102285760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102285761026361099f565b5061026c610a3b565b5060443580600f0b03610228576102816109e5565b5080f35b9050346101555760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576102be61099f565b73ffffffffffffffffffffffffffffffffffffffff9182855416938433036103355750501690817fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001557fb9911e2099e372c216862258dc462bb65da46a2c854536c8b1acae619d0d62ed8380a380f35b517fee90c468000000000000000000000000000000000000000000000000000000008152fd5b8390346101595760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610159573560035580f35b83346102285760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610228576103cb61099f565b506103d46109c2565b5061028161093d565b9190503461015557827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576001549173ffffffffffffffffffffffffffffffffffffffff9182841633036103355750507fffffffffffffffffffffffff0000000000000000000000000000000000000000809216600155825491339083161783553391167f3d1e4c3a68fed9f4f8315582b7297cf8fa264bc8e6704287603ba8c72bf05ac28380a380f35b8390346101595760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610159573573ffffffffffffffffffffffffffffffffffffffff8116809103610159577fffffffffffffffffffffffff0000000000000000000000000000000000000000600254161760025580f35b5050346101595760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101595760209061054661099f565b5061054f6109c2565b50610558610a2b565b50610561610961565b5061056a610980565b5073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b50503461015957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101595760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b8383346101595760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101595782359273ffffffffffffffffffffffffffffffffffffffff938481168091036108215761063a6109c2565b92610643610a08565b81519660208801917f23b872dd0000000000000000000000000000000000000000000000000000000083528160249716878a015216604488015260643560648801526064875260a087019067ffffffffffffffff97808310898411176107e45760e081018381108a8211176107b9578452601e83527f416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564000060c082015251879182919082875af13d1561080f573d908882116107e4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe091845192603f81601f8401160116830199838b10908b11176107b95784959697989961075095528252818960203d92013e5b85610a56565b8051908115159182610791575b5050610767578480f35b51917f5274afe7000000000000000000000000000000000000000000000000000000008352820152fd5b81925090602091810103126107b557602001518015908115036107b557868061075d565b8580fd5b87896041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b86886041887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6107509293949596975060609061074a565b8380fd5b84903461015957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101595773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b84346102285760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610228576108ab61099f565b506108b46109c2565b506108bd61093d565b506102816109e5565b8482346101595760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101595780356fffffffffffffffffffffffffffffffff8116809103610155577fffffffffffffffffffffffffffffffff0000000000000000000000000000000082541617905580f35b604435906fffffffffffffffffffffffffffffffff8216820361095c57565b600080fd5b606435906fffffffffffffffffffffffffffffffff8216820361095c57565b608435906fffffffffffffffffffffffffffffffff8216820361095c57565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361095c57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361095c57565b6064359073ffffffffffffffffffffffffffffffffffffffff8216820361095c57565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361095c57565b6044359060ff8216820361095c57565b602435906bffffffffffffffffffffffff8216820361095c57565b91929015610ad15750815115610a6a575090565b3b15610a735790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610ae45750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110610b61575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201610b2056fea2646970667358221220f2d103667a4dfb8ac8723da0ccfa68e0d4b91c73075ae601b3b3c2c8d86add9664736f6c63430008180033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
