/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockFeeDistributor,
  MockFeeDistributorInterface,
} from "../../../contracts/test/MockFeeDistributor";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [],
    name: "balance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    name: "collectArchitectBatchByRouter",
    outputs: [
      {
        internalType: "uint256",
        name: "rewardAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    name: "collectBatchByRouter",
    outputs: [
      {
        internalType: "uint256",
        name: "rewardAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    name: "collectV3PosBatchByRouter",
    outputs: [
      {
        internalType: "uint256",
        name: "rewardAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "period",
        type: "uint16",
      },
    ],
    name: "lockupRewardMultipliers",
    outputs: [
      {
        internalType: "uint16",
        name: "multiplier",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    name: "multipliers",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardAmountRes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    name: "setToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "period",
        type: "uint16",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenIDRes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100a757600360208190527f6117fee2f1274e1b392d2c3fe842478040a980d896757f38cbfe2ceebfa9f55f805461ffff199081166001179091557f01c8d1bf01472944f62fa726559c57c955f3535856e865cee78082252c0dbe65805482166002179055605a6000527f3219ed562b3fd9188a49dd9a57bec5aecadcb61ea33f29053262442c210d825f805490911690911790556108ff90816100ad8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600090813560e01c908163144fa6d7146106645781631d56eed0146106435750806324cf5671146106205780633a3328cb146104de578063423c485a146105af57806353ec31d1146105315780637ad4f822146104de578063b69ef8a8146104a3578063bb4419f014610466578063c55e391b14610429578063dc8c4ffe146100fb5763fc0c546a146100a857600080fd5b346100f857807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f8575073ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b80fd5b5082346104255760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104255760249273ffffffffffffffffffffffffffffffffffffffff90843582811603610421576044359161ffff928381168091036102de578552602092600384528286205416156103a057835416918151818101907f23b872dd0000000000000000000000000000000000000000000000000000000082523388820152306044820152853560648201526064815260a081019167ffffffffffffffff91808410838511176103755760e081018481108482111761034a578652601e84527f416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564000060c082015251979897899182919082895af13d1561033c573d82811161031157855192601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168401908111848210176102e6578652825261027a9291903d8a8684013e5b866107a7565b80519182151591826102bd575b50509050610293578480f35b51917f5274afe7000000000000000000000000000000000000000000000000000000008352820152fd5b8092508193810103126102e25701518015908115036102de57808780610287565b8580fd5b8680fd5b898b60418b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b888a60418a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b61027a929150606090610274565b8a8a60418b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b898960418a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b608484602288868651937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f4d6f636b4665654469737472696275746f723a20696e76616c6964207065726960448201527f6f640000000000000000000000000000000000000000000000000000000000006064820152fd5b8380fd5b5080fd5b50903461042557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610425576020906001549051908152f35b50903461042557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610425576020906002549051908152f35b50903461042557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261042557602091549051908152f35b5090346104255760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610425576020918161ffff9182610520610796565b168152600385522054169051908152f35b50346100f857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f857823573ffffffffffffffffffffffffffffffffffffffff8116036100f8576024359067ffffffffffffffff82116100f857506020926105a1913691016106e3565b505060036001555160038152f35b5082346104255760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261042557815490803582018092116105f45750815580f35b8260116024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5090346104255760209061063336610719565b5050505060026001555160028152f35b9050346104255760209061065636610719565b505050506001805560018152f35b8285346104255760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261042557803573ffffffffffffffffffffffffffffffffffffffff81168091036106df577fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905580f35b8280fd5b9181601f840112156107145782359167ffffffffffffffff8311610714576020808501948460051b01011161071457565b600080fd5b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126107145773ffffffffffffffffffffffffffffffffffffffff9160043583811681036107145792602435908116810361071457916044359067ffffffffffffffff821161071457610792916004016106e3565b9091565b6004359061ffff8216820361071457565b9192901561082257508151156107bb575090565b3b156107c45790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156108355750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b8481106108b2575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161087156fea26469706673582212202b6bd0b12c15e7cffc477e51f72ccd35452fb74102d7895fd6afaa0a4a800e3764736f6c63430008180033";

type MockFeeDistributorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockFeeDistributorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockFeeDistributor__factory extends ContractFactory {
  constructor(...args: MockFeeDistributorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockFeeDistributor> {
    return super.deploy(overrides || {}) as Promise<MockFeeDistributor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockFeeDistributor {
    return super.attach(address) as MockFeeDistributor;
  }
  override connect(signer: Signer): MockFeeDistributor__factory {
    return super.connect(signer) as MockFeeDistributor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFeeDistributorInterface {
    return new utils.Interface(_abi) as MockFeeDistributorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockFeeDistributor {
    return new Contract(address, _abi, signerOrProvider) as MockFeeDistributor;
  }
}
