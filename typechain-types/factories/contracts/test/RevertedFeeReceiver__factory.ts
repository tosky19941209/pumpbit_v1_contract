/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RevertedFeeReceiver,
  RevertedFeeReceiverInterface,
} from "../../../contracts/test/RevertedFeeReceiver";

const _abi = [
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080806040523460135760a1908160198239f35b600080fdfe6080806040523615600f57600080fd5b807f08c379a0000000000000000000000000000000000000000000000000000000006064925260206004820152600860248201527f52657665727465640000000000000000000000000000000000000000000000006044820152fdfea264697066735822122080aee7860dd92a953dbc279e67b1f75a6668e02f2fb5535925e9ac79dda9220464736f6c63430008180033";

type RevertedFeeReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RevertedFeeReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RevertedFeeReceiver__factory extends ContractFactory {
  constructor(...args: RevertedFeeReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RevertedFeeReceiver> {
    return super.deploy(overrides || {}) as Promise<RevertedFeeReceiver>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RevertedFeeReceiver {
    return super.attach(address) as RevertedFeeReceiver;
  }
  override connect(signer: Signer): RevertedFeeReceiver__factory {
    return super.connect(signer) as RevertedFeeReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RevertedFeeReceiverInterface {
    return new utils.Interface(_abi) as RevertedFeeReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RevertedFeeReceiver {
    return new Contract(address, _abi, signerOrProvider) as RevertedFeeReceiver;
  }
}
