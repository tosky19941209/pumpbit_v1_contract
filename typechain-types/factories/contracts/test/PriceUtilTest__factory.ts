/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PriceUtilTest,
  PriceUtilTestInterface,
} from "../../../contracts/test/PriceUtilTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "requiredCaller",
        type: "address",
      },
    ],
    name: "InvalidCaller",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "bits",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "SafeCastOverflowedUintDowncast",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "index",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "sizeAfter",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "premiumRateAfterX96",
        type: "uint128",
      },
    ],
    name: "PriceVertexChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "Side",
        name: "_globalSide",
        type: "uint8",
      },
      {
        internalType: "Side",
        name: "_side",
        type: "uint8",
      },
      {
        internalType: "uint160",
        name: "_indexPriceX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "_premiumRateX96",
        type: "uint128",
      },
    ],
    name: "calculateMarketPriceX96",
    outputs: [
      {
        internalType: "uint160",
        name: "marketPriceX96",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "startExclusive",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "endInclusive",
        type: "uint8",
      },
    ],
    name: "changePriceVertex",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "globalLiquidityPosition",
    outputs: [
      {
        internalType: "uint128",
        name: "netSize",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "liquidationBufferNetSize",
        type: "uint128",
      },
      {
        internalType: "uint160",
        name: "entryPriceX96",
        type: "uint160",
      },
      {
        internalType: "Side",
        name: "side",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "realizedProfitGrowthX64",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceState",
    outputs: [
      {
        internalType: "uint128",
        name: "maxPriceImpactLiquidity",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "premiumRateX96",
        type: "uint128",
      },
      {
        internalType: "uint8",
        name: "pendingVertexIndex",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "liquidationVertexIndex",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "currentVertexIndex",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "netSize",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "liquidationBufferNetSize",
            type: "uint128",
          },
          {
            internalType: "uint160",
            name: "entryPriceX96",
            type: "uint160",
          },
          {
            internalType: "Side",
            name: "side",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "realizedProfitGrowthX64",
            type: "uint256",
          },
        ],
        internalType: "struct IPoolLiquidityPosition.GlobalLiquidityPosition",
        name: "_globalLiquidityPosition",
        type: "tuple",
      },
    ],
    name: "setGlobalLiquidityPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_poolFactory",
        type: "address",
      },
    ],
    name: "setPoolFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address",
      },
    ],
    name: "setPriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "maxPriceImpactLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "premiumRateX96",
            type: "uint128",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "size",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "premiumRateX96",
                type: "uint128",
              },
            ],
            internalType: "struct IPool.PriceVertex[7]",
            name: "priceVertices",
            type: "tuple[7]",
          },
          {
            internalType: "uint8",
            name: "pendingVertexIndex",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "liquidationVertexIndex",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "currentVertexIndex",
            type: "uint8",
          },
          {
            internalType: "uint128[7]",
            name: "liquidationBufferNetSizes",
            type: "uint128[7]",
          },
        ],
        internalType: "struct IPool.PriceState",
        name: "_priceState",
        type: "tuple",
      },
    ],
    name: "setPriceState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "setToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tradePriceX96",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Side",
        name: "_side",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "_sizeDelta",
        type: "uint128",
      },
      {
        internalType: "uint160",
        name: "_indexPriceX96",
        type: "uint160",
      },
      {
        internalType: "bool",
        name: "liquidation",
        type: "bool",
      },
    ],
    name: "updatePriceState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761151a908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c9081630d5035c014610eb157508063144fa6d714610e345780633b04cd2614610de2578063473597a014610d6757806350c4f1ee14610cef5780635a9d0bbd14610bd95780637153e04414610a71578063724e78da146109f0578063a4683715146102f5578063a85fc2a91461025f578063b1249d64146100f95763fc0c546a146100a557600080fd5b346100f657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b80fd5b50346100f65760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657610131611307565b6101396112cb565b90610142611327565b916064359081151580920361025b576fffffffffffffffffffffffffffffffff9060ff604051947f3cb3b61c000000000000000000000000000000000000000000000000000000008652600360048701526007602487015216604485015216606483015273ffffffffffffffffffffffffffffffffffffffff809316608483015260a482015260208160c48173__$805fb987dad0c1e2a5e4f2ce601198b4d3$__5af4908115610250578391610221575b50167fffffffffffffffffffffffff0000000000000000000000000000000000000000601454161760145580f35b610243915060203d602011610249575b61023b8183611266565b81019061134a565b386101f3565b503d610231565b6040513d85823e3d90fd5b8480fd5b50346100f657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f65760c06003546fffffffffffffffffffffffffffffffff9060045460ff83600554169160065493604051958116865260801c602086015273ffffffffffffffffffffffffffffffffffffffff8116604086015260a01c166060840152608083015260a0820152f35b50346100f65760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f65761032d611307565b90610336611317565b3033036109c057600660ff8216106108e8575b9073ffffffffffffffffffffffffffffffffffffffff6001541692602073ffffffffffffffffffffffffffffffffffffffff600254166024604051809781937f9fae754100000000000000000000000000000000000000000000000000000000835260048301525afa9384156108dd5782946108bc575b5060ff60016fffffffffffffffffffffffffffffffff600554166fffffffffffffffffffffffffffffffff600754168082106000146108b45750925b01165b60ff841660ff8216116108b05773ffffffffffffffffffffffffffffffffffffffff835416604073ffffffffffffffffffffffffffffffffffffffff6002541660448251809481937fbb2809f0000000000000000000000000000000000000000000000000000000008352600483015260ff871660248301525afa9384156108a45780918195610857575b508061082a57506104e19073ffffffffffffffffffffffffffffffffffffffff8716906305f5e1006fffffffff0000000000000000000000006fffffffffffffffffffffffffffffffff87169260601b16046113b5565b6fffffffffffffffffffffffffffffffff81116107f2576000936fffffffffffffffffffffffffffffffff8216916fffffffffffffffffffffffffffffffff6305f5e1006fffffffff0000000000000000000000008460601b16041691600160ff8616116106cc575b5050600783101561069257608081901b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff83161760088401557fcec50807be451eada53d341444630bc10a27787cf8a5c6012b55ce5a227229f3606060405160ff861681526fffffffffffffffffffffffffffffffff851660208201526fffffffffffffffffffffffffffffffff84166040820152a160ff861660ff841614806106bf575b610613575b505060010160ff166103ff565b600760ff600185011610156106925761063460ff6001850116600801611376565b916fffffffffffffffffffffffffffffffff808451169116109182159261066d575b5050610664575b3880610606565b6006935061065d565b602001516fffffffffffffffffffffffffffffffff9081169116101590503880610656565b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b50600660ff871610610601565b600760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87011610156107c55761072b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff870116600801611376565b906fffffffffffffffffffffffffffffffff808351169316831090811591610776575b501561054a5760209193506fffffffffffffffffffffffffffffffff9250015116388061054a565b6fffffffffffffffffffffffffffffffff91506fffffffff0000000000000000000000006305f5e1009160601b1604166fffffffffffffffffffffffffffffffff60208301511610153861074e565b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b604490604051907f6dfcc650000000000000000000000000000000000000000000000000000000008252608060048301526024820152fd5b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fd5b915093506040813d60401161089c575b8161087460409383611266565b810103126108985783610892602061088b846113a4565b93016113a4565b9461048a565b8380fd5b3d9150610867565b604051903d90823e3d90fd5b8280f35b9050926103fc565b6108d691945060203d6020116102495761023b8183611266565b92386103c0565b6040513d84823e3d90fd5b6007811015610993576108fd81600801611376565b60ff600183011660078110156109665761091990600801611376565b6fffffffffffffffffffffffffffffffff8083511681835116119283159361094c575b5050501561034957506006610349565b81929350906020809201511692015116111538808061093c565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b60246040517fcbd9d2e0000000000000000000000000000000000000000000000000000000008152306004820152fd5b50346100f65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f65760043573ffffffffffffffffffffffffffffffffffffffff8116809103610a6d577fffffffffffffffffffffffff0000000000000000000000000000000000000000600154161760015580f35b5080fd5b50346100f65760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f65760405160c0810181811067ffffffffffffffff821117610bac576040526020610ac86112a7565b91828152610ad46112cb565b9182910152610ae1611327565b60643560ff8116810361025b57608435936fffffffffffffffffffffffffffffffff808616809603610ba8577fffffffffffffffffffffffffffffffff00000000000000000000000000000000809560801b169116176003557fffffffffffffffffffffff00000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff74ff00000000000000000000000000000000000000006004549360a01b16931691161717600455600554161760055560a43560065580f35b8680fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b50346100f65760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657610c11611307565b610c19611317565b610c21611327565b90606435906fffffffffffffffffffffffffffffffff821680920361025b5760ff9081604051957f5a9d0bbd00000000000000000000000000000000000000000000000000000000875216600486015216602484015273ffffffffffffffffffffffffffffffffffffffff8092166044840152606483015260208260848173__$805fb987dad0c1e2a5e4f2ce601198b4d3$__5af49182156102505760209392610cd0575b5060405191168152f35b610ce8919250833d85116102495761023b8183611266565b9038610cc6565b50346100f657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f65760a060075460ff600f54604051926fffffffffffffffffffffffffffffffff8116845260801c60208401528181166040840152818160081c16606084015260101c166080820152f35b50346100f65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f65760043573ffffffffffffffffffffffffffffffffffffffff8116809103610a6d577fffffffffffffffffffffffff000000000000000000000000000000000000000082541617815580f35b50346100f657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657602073ffffffffffffffffffffffffffffffffffffffff60145416604051908152f35b50346100f65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f65760043573ffffffffffffffffffffffffffffffffffffffff8116809103610a6d577fffffffffffffffffffffffff0000000000000000000000000000000000000000600254161760025580f35b905034610a6d576103407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a6d5760e0810181811067ffffffffffffffff821117610bac57604052610f056112a7565b8152610f0f6112cb565b90602080820192835236606312156108985760405192610f2e8461124a565b61020484368211610ba8576044905b8282106111c1575050604084019485523560ff811681036111bd5760608401908152610224359060ff82168203610ba85760808501918252610244359560ff871687036111b95760a086019687523661028312156111b95760405193610fa28561124a565b610344853682116111b55761026499989799905b828210611197575050508460c08701526fffffffffffffffffffffffffffffffff809651167fffffffffffffffffffffffffffffffff0000000000000000000000000000000080925160801b16179160079260075551906008908a925b84841061112757505050505060ff9051169361ff00600f54925160081b169051947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000062ff000060109760101b169316171717600f5591845b600381106110ca5750508392845b6001811061108957858560135580f35b90919293826110bf60019286885116908560041b60031b916fffffffffffffffffffffffffffffffff809116831b921b19161790565b950193929101611079565b8594929394865b600281106110ea5750828201559193929160010161106b565b95908461111e60019288855116908a60041b60031b916fffffffffffffffffffffffffffffffff809116831b921b19161790565b920196016110d1565b60018b826111878c839e9f9d9e85965182815116898b5416178a5501511687906fffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffff0000000000000000000000000000000083549260801b169116179055565b0193019301929199989799611013565b998080999a9b6111a6846112ea565b81520191019099989799610fb6565b8a80fd5b8780fd5b8580fd5b6040823603126111b9578460409182516111da816111ff565b6111e3856112ea565b81526111f08386016112ea565b83820152815201910190610f3d565b6040810190811067ffffffffffffffff82111761121b57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60e0810190811067ffffffffffffffff82111761121b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761121b57604052565b600435906fffffffffffffffffffffffffffffffff821682036112c657565b600080fd5b602435906fffffffffffffffffffffffffffffffff821682036112c657565b35906fffffffffffffffffffffffffffffffff821682036112c657565b6004359060ff821682036112c657565b6024359060ff821682036112c657565b6044359073ffffffffffffffffffffffffffffffffffffffff821682036112c657565b908160209103126112c6575173ffffffffffffffffffffffffffffffffffffffff811681036112c65790565b90604051611383816111ff565b91546fffffffffffffffffffffffffffffffff8116835260801c6020830152565b519063ffffffff821682036112c657565b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82840992828102928380861095039480860395146114a75784831115611449578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f7700000000000000000000006044820152fd5b5050809250156114b5570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212201e60cfe55bd5ea13244ede193573ee4c0444ede501e0ee7c587ec2c29c9ea58d64736f6c63430008180033";

type PriceUtilTestConstructorParams =
  | [linkLibraryAddresses: PriceUtilTestLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriceUtilTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class PriceUtilTest__factory extends ContractFactory {
  constructor(...args: PriceUtilTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        PriceUtilTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: PriceUtilTestLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$805fb987dad0c1e2a5e4f2ce601198b4d3\\$__", "g"),
      linkLibraryAddresses["contracts/libraries/PriceUtil.sol:PriceUtil"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PriceUtilTest> {
    return super.deploy(overrides || {}) as Promise<PriceUtilTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PriceUtilTest {
    return super.attach(address) as PriceUtilTest;
  }
  override connect(signer: Signer): PriceUtilTest__factory {
    return super.connect(signer) as PriceUtilTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceUtilTestInterface {
    return new utils.Interface(_abi) as PriceUtilTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceUtilTest {
    return new Contract(address, _abi, signerOrProvider) as PriceUtilTest;
  }
}

export interface PriceUtilTestLibraryAddresses {
  ["contracts/libraries/PriceUtil.sol:PriceUtil"]: string;
}
