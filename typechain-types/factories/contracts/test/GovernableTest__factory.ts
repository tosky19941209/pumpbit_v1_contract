/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GovernableTest,
  GovernableTestInterface,
} from "../../../contracts/test/GovernableTest";

const _abi = [
  {
    inputs: [],
    name: "Forbidden",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousGov",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newGov",
        type: "address",
      },
    ],
    name: "ChangeGovStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousGov",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newGov",
        type: "address",
      },
    ],
    name: "GovChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptGov",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newGov",
        type: "address",
      },
    ],
    name: "changeGov",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gov",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "onlyGovTest",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingGov",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f3d1e4c3a68fed9f4f8315582b7297cf8fa264bc8e6704287603ba8c72bf05ac29080a361031690816100618239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816312d43a511461026d57508063252408101461021b5780637bc6729b14610146578063a962ef1e146100945763c1e576c41461005857600080fd5b3461009157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100915761008e6102bf565b80f35b80fd5b50346100915760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100915760043573ffffffffffffffffffffffffffffffffffffffff808216809203610142576100ee6102bf565b817fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001558254167fb9911e2099e372c216862258dc462bb65da46a2c854536c8b1acae619d0d62ed8380a380f35b8280fd5b503461009157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100915760015473ffffffffffffffffffffffffffffffffffffffff80821633036101f1577fffffffffffffffffffffffff0000000000000000000000000000000000000000809216600155825491339083161783553391167f3d1e4c3a68fed9f4f8315582b7297cf8fa264bc8e6704287603ba8c72bf05ac28380a380f35b60046040517fee90c468000000000000000000000000000000000000000000000000000000008152fd5b503461009157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009157602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b9050346102bb57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bb5773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b5080fd5b73ffffffffffffffffffffffffffffffffffffffff6000541633036101f15756fea2646970667358221220885d28e486cd093a15f2a94db12093dc4221ba06dc6e52a76deff02768d0662864736f6c63430008180033";

type GovernableTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovernableTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GovernableTest__factory extends ContractFactory {
  constructor(...args: GovernableTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GovernableTest> {
    return super.deploy(overrides || {}) as Promise<GovernableTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GovernableTest {
    return super.attach(address) as GovernableTest;
  }
  override connect(signer: Signer): GovernableTest__factory {
    return super.connect(signer) as GovernableTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernableTestInterface {
    return new utils.Interface(_abi) as GovernableTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GovernableTest {
    return new Contract(address, _abi, signerOrProvider) as GovernableTest;
  }
}
