/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPriceFeed,
  IPriceFeedInterface,
} from "../../../../contracts/oracle/interfaces/IPriceFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sequencerUptime",
        type: "uint256",
      },
    ],
    name: "GracePeriodNotOver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "referencePrice",
        type: "int256",
      },
    ],
    name: "InvalidReferencePrice",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "stableTokenPrice",
        type: "int256",
      },
    ],
    name: "InvalidStableTokenPrice",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "timestamp",
        type: "uint64",
      },
    ],
    name: "InvalidUpdateTimestamp",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "ReferencePriceFeedNotSet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elapsed",
        type: "uint256",
      },
    ],
    name: "ReferencePriceTimeout",
    type: "error",
  },
  {
    inputs: [],
    name: "SequencerDown",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elapsed",
        type: "uint256",
      },
    ],
    name: "StableTokenPriceTimeout",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint160",
        name: "priceX96",
        type: "uint160",
      },
      {
        indexed: false,
        internalType: "uint160",
        name: "refPriceX96",
        type: "uint160",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "cumulativeDelta",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "cumulativeRefDelta",
        type: "uint64",
      },
    ],
    name: "MaxCumulativeDeltaDiffExceeded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint160",
        name: "priceX96",
        type: "uint160",
      },
      {
        indexed: false,
        internalType: "uint160",
        name: "minPriceX96",
        type: "uint160",
      },
      {
        indexed: false,
        internalType: "uint160",
        name: "maxPriceX96",
        type: "uint160",
      },
    ],
    name: "PriceUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint160",
            name: "priceX96",
            type: "uint160",
          },
        ],
        internalType: "struct IPriceFeed.TokenPrice[]",
        name: "tokenPrices",
        type: "tuple[]",
      },
    ],
    name: "calculatePriceX96s",
    outputs: [
      {
        internalType: "uint160[]",
        name: "minPriceX96s",
        type: "uint160[]",
      },
      {
        internalType: "uint160[]",
        name: "maxPriceX96s",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "getMaxPriceX96",
    outputs: [
      {
        internalType: "uint160",
        name: "priceX96",
        type: "uint160",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "getMinPriceX96",
    outputs: [
      {
        internalType: "uint160",
        name: "priceX96",
        type: "uint160",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isUpdater",
    outputs: [
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "latestPrices",
    outputs: [
      {
        internalType: "uint64",
        name: "updateTimestamp",
        type: "uint64",
      },
      {
        internalType: "uint160",
        name: "maxPriceX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "minPriceX96",
        type: "uint160",
      },
      {
        internalType: "uint64",
        name: "updateBlockTimestamp",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sequencerUptimeFeed",
    outputs: [
      {
        internalType: "contract IChainLinkAggregator",
        name: "sequencerUptimeFeed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "cumulativeRoundDuration",
        type: "uint32",
      },
    ],
    name: "setCumulativeRoundDuration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "maxCumulativeDeltaDiff",
        type: "uint64",
      },
    ],
    name: "setMaxCumulativeDeltaDiffs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "maxDeviationRatio",
        type: "uint32",
      },
    ],
    name: "setMaxDeviationRatio",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint160",
            name: "priceX96",
            type: "uint160",
          },
        ],
        internalType: "struct IPriceFeed.TokenPrice[]",
        name: "tokenPrices",
        type: "tuple[]",
      },
      {
        internalType: "uint64",
        name: "timestamp",
        type: "uint64",
      },
    ],
    name: "setPriceX96s",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "duration",
        type: "uint32",
      },
    ],
    name: "setRefHeartbeatDuration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "refPriceExtraSample",
        type: "uint32",
      },
    ],
    name: "setRefPriceExtraSample",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "contract IChainLinkAggregator",
        name: "priceFeed",
        type: "address",
      },
    ],
    name: "setRefPriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IChainLinkAggregator",
        name: "sequencerUptimeFeed",
        type: "address",
      },
    ],
    name: "setSequencerUptimeFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IChainLinkAggregator",
        name: "stableTokenPriceFeed",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "stableTokenPriceFeedHeartBeatDuration",
        type: "uint32",
      },
    ],
    name: "setStableTokenPriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "updateTxTimeout",
        type: "uint32",
      },
    ],
    name: "setUpdateTxTimeout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
    ],
    name: "setUpdater",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "slot",
    outputs: [
      {
        internalType: "uint32",
        name: "maxDeviationRatio",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "cumulativeRoundDuration",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "refPriceExtraSample",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "updateTxTimeout",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stableTokenPriceFeed",
    outputs: [
      {
        internalType: "contract IChainLinkAggregator",
        name: "priceFeed",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stableTokenPriceFeedHeartBeatDuration",
    outputs: [
      {
        internalType: "uint32",
        name: "duration",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "tokenConfigs",
    outputs: [
      {
        internalType: "contract IChainLinkAggregator",
        name: "refPriceFeed",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "refHeartbeatDuration",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "maxCumulativeDeltaDiff",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPriceFeed__factory {
  static readonly abi = _abi;
  static createInterface(): IPriceFeedInterface {
    return new utils.Interface(_abi) as IPriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPriceFeed {
    return new Contract(address, _abi, signerOrProvider) as IPriceFeed;
  }
}
